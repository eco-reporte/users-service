{"_id":"sequelize-typescript","_rev":"109-e57660885e8030f3b9eb59457deb5fab","name":"sequelize-typescript","description":"Decorators and some other features for sequelize","dist-tags":{"latest":"2.1.6","beta":"0.6.12-beta.3","next":"2.0.0-beta.1","canary":"1.0.0-alpha.9"},"versions":{"0.1.0":{"name":"sequelize-typescript","version":"0.1.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc && tsc --project lib/models/v4","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","exec-tests":"SEQ_SILENT=true mocha 'test/specs/**/*.js'","test":"npm run test-v4 && npm run test-v3"},"main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.39","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","sqlite3":"3.1.8","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"gitHead":"06b8111bee4c4c71034fa9fd1ab7ee886a5eed24","_id":"sequelize-typescript@0.1.0","_shasum":"dc010380718a57449e7ce74c26956dd44db73cad","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"dc010380718a57449e7ce74c26956dd44db73cad","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.1.0.tgz","integrity":"sha512-71kF7+wNr8kcsPf1a4dQ2i5PyoBb1GwbkPKr46krGIrgjUTN+7Z/q2xZkdNhKJoShqmPWWlsQWL0WOGdcn1wJQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCQarGhK2J3OaQ5s91L/jH3s6hhUd3Awr5uyfzIrN/IvAIhAP8pc/1g3ToE+UQrLLrfMDpdpzbLO/K3Fj2qbCuvKvWt"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/sequelize-typescript-0.1.0.tgz_1489600550342_0.5709488692227751"},"directories":{}},"0.1.1":{"name":"sequelize-typescript","version":"0.1.1","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc && tsc --project lib/models/v4","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","exec-tests":"SEQ_SILENT=true mocha 'test/specs/**/*.js'","test":"npm run test-v4 && npm run test-v3"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.39","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","sqlite3":"3.1.8","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"gitHead":"2e728161c353cbcabcd3fdf6d61ade549a022a99","_id":"sequelize-typescript@0.1.1","_shasum":"5de3c9d2b392fbd80bbaa2671055fe9dbfd65780","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"5de3c9d2b392fbd80bbaa2671055fe9dbfd65780","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.1.1.tgz","integrity":"sha512-08wLU6uiV3k6gbcj/DyI/8RU7yQ+I7pkkS+F4wo7At6AN3WiQXxjSplu2sidk/NZY66j1b4qupXIIfYqqAcdRg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCzZFQdX1+slyU2yzStcRAGPQN77IPQ+38pO6ODzFnh6gIgCwkOmS1c1JmidRaf6hXhWcv03yZysma1sdWLFS72igw="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/sequelize-typescript-0.1.1.tgz_1489600885488_0.24129828345030546"},"directories":{}},"0.1.2":{"name":"sequelize-typescript","version":"0.1.2","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc && tsc --project lib/models/v4","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","exec-tests":"SEQ_SILENT=true mocha 'test/specs/**/*.js'","test":"npm run test-v4 && npm run test-v3"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.39","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","sqlite3":"3.1.8","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"gitHead":"32005c306407e3cc6bbe93dc1786b894c05d3fb7","_id":"sequelize-typescript@0.1.2","_shasum":"e0e1336b246cfbf1033ddffde74ca733a62e9cb2","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"e0e1336b246cfbf1033ddffde74ca733a62e9cb2","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.1.2.tgz","integrity":"sha512-MgxARShNxXGMGciWYqARQ14cDP57sHaVP4MsBMKcuUJOXtTETJ8Gu3i/8a6ycfBuN5k5h5JUlYBwKQyB8RRC1w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICYg+CcSzKym/AXNU6lHv2p4NjQ0v7O7tL6ORZEMctBaAiEA6ju9dK3x26gMVaTDVwKApssobaOcykSTJ51K+6AFpfE="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/sequelize-typescript-0.1.2.tgz_1489608037590_0.570787540404126"},"directories":{}},"0.1.3":{"name":"sequelize-typescript","version":"0.1.3","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc && tsc --project lib/models/v4","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","exec-tests":"SEQ_SILENT=true mocha 'test/specs/**/*.js'","test":"npm run test-v4 && npm run test-v3"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.39","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","sqlite3":"3.1.8","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"gitHead":"32005c306407e3cc6bbe93dc1786b894c05d3fb7","_id":"sequelize-typescript@0.1.3","_shasum":"1b875de319ae219535d98ccc9429e65fe363d442","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"1b875de319ae219535d98ccc9429e65fe363d442","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.1.3.tgz","integrity":"sha512-zFmJS+ckxBVhQj63hguI9KRSM/Mj2oK6E/mwbZ4bBwGlEQRU+Gd0gsIx55gNVt9qqXsZC5/r0wo+BeaZSYdK2Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC6Bn+W0DJKuwZltbxVYqaV9sHEPdAPeDRt2zYOiIUXQAIgFNVoAKb4qzd8ZcjNVH+uWwqzjNGjibpwdlkuWwuVgm0="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/sequelize-typescript-0.1.3.tgz_1489608281800_0.4071543514728546"},"directories":{}},"0.1.4":{"name":"sequelize-typescript","version":"0.1.4","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc && tsc --project lib/models/v4","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","exec-tests":"SEQ_SILENT=true mocha 'test/specs/**/*.js'","test":"npm run test-v4 && npm run test-v3"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.39","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","sqlite3":"3.1.8","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"gitHead":"1c3de2041242e39b23eeb671e33d2f8de7ba59b2","_id":"sequelize-typescript@0.1.4","_shasum":"b1dd5cf97b362d96e879a2c11e19a2f53323b785","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"b1dd5cf97b362d96e879a2c11e19a2f53323b785","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.1.4.tgz","integrity":"sha512-DT9DtNaoK8HZ09sZwqXRjX/7lFLtrvADB7Ti+ZgBzQNAN5Taa6qK6j06e2AJuDjbDJAhdaEkdxLjPuW+qftUDw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDlQDry7sgvzCwPYPyRyd09pnYyCwW+AVk8AlplsginGwIhAMRCgt+8RAn3LSMlm8LCoa8lCyKHRvMiqcJSOPe09OUD"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/sequelize-typescript-0.1.4.tgz_1490023638175_0.2561899966094643"},"directories":{}},"0.2.0":{"name":"sequelize-typescript","version":"0.2.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc && tsc --project lib/models/v4","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && SEQ_SILENT=true nyc --exclude 'lib/models/v4/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","cover-v4":"npm run prepare-test-v4 && SEQ_SILENT=true nyc --exclude 'lib/models/v3/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","exec-tests":"SEQ_SILENT=true mocha 'test/specs/**/*.js'","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.39","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","nyc":"10.1.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"b419627021711d448de3ef6366bb2d7857d4a6f4","_id":"sequelize-typescript@0.2.0","_shasum":"a80582d85b4b5edc0544287025d4bc01de7c75e0","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"a80582d85b4b5edc0544287025d4bc01de7c75e0","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.2.0.tgz","integrity":"sha512-6/fVsZ1SCl6+8OeVI8JAOuk75fhznUAFEIxX2DEJzcHqjCYLUI5guHiQeBBzgnJL/2EiQfzlDgVZizqBMSA85w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDItJz+lq8qj+AIrx0sHYWkhee9AH9u1Xdhjfb6WgELkQIhANj5xc9nA15hT71y5WwjTYjhNMbWHZS67PGAXuB63iqK"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/sequelize-typescript-0.2.0.tgz_1490554469081_0.01992949773557484"},"directories":{}},"0.2.1":{"name":"sequelize-typescript","version":"0.2.1","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc && tsc --project lib/models/v4","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && SEQ_SILENT=true nyc --exclude 'lib/models/v4/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","cover-v4":"npm run prepare-test-v4 && SEQ_SILENT=true nyc --exclude 'lib/models/v3/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","exec-tests":"SEQ_SILENT=true mocha 'test/specs/**/*.js'","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.39","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","nyc":"10.1.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"476bf836b502e375ecf452ff3c4c8c9a8fd9ca1b","_id":"sequelize-typescript@0.2.1","_shasum":"70f314216935f12cdbbc8bed9f2a30a43ba27a76","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"70f314216935f12cdbbc8bed9f2a30a43ba27a76","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.2.1.tgz","integrity":"sha512-DRcvCqapRXCS3N3TaDLUQDErPX0frPe5IebKZp0iSpT5LHIWEC8D4VLoziHS7l452VyYaFwBYPC/8EHgfJGaew==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDhMKJAgO8/Yw5DVGQ0f4DT+SmFP+BPGDvWdaYs+ubQcAIge1fyzKLLu5faHfEFpIWgQtUtVwPxiQ9taZp0SchrVgQ="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/sequelize-typescript-0.2.1.tgz_1490863033356_0.16540098446421325"},"directories":{}},"0.2.2-rc.0":{"name":"sequelize-typescript","version":"0.2.2-rc.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc && tsc --project lib/models/v4","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && SEQ_SILENT=true nyc --exclude 'lib/models/v4/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","cover-v4":"npm run prepare-test-v4 && SEQ_SILENT=true nyc --exclude 'lib/models/v3/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","exec-tests":"SEQ_SILENT=true mocha 'test/specs/**/*.js'","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.39","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","nyc":"10.1.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"8ffaad88f94dce72481d0e6dabaf0228e5deef47","_id":"sequelize-typescript@0.2.2-rc.0","_shasum":"6c543ab9d46088c78bc16eb26167dc1cd6091c17","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"6c543ab9d46088c78bc16eb26167dc1cd6091c17","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.2.2-rc.0.tgz","integrity":"sha512-6uKwZeJoq8pVwNo2mD2myvIW/sP6wPbbrupjEFdUg1yCYBeMPhn/kGFX9RZ5nxnS9MQTkRTmHBrcGGsQfdXAGA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDN3w6o/WEM6Hg4wvidJm8z5JJKx8kUU/Nvbv9IRbvFNAiEAt478yp7p/i8VMk3erWPlOK+wgPuKXxyCqbh98jLpQi4="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/sequelize-typescript-0.2.2-rc.0.tgz_1491373984990_0.1402563073206693"},"directories":{}},"0.2.2":{"name":"sequelize-typescript","version":"0.2.2","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc && tsc --project lib/models/v4","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && SEQ_SILENT=true nyc --exclude 'lib/models/v4/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","cover-v4":"npm run prepare-test-v4 && SEQ_SILENT=true nyc --exclude 'lib/models/v3/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","exec-tests":"SEQ_SILENT=true mocha 'test/specs/**/*.js'","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.39","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","nyc":"10.1.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"998b50313eb6307461f677b7e21a938203ed9dca","_id":"sequelize-typescript@0.2.2","_shasum":"975a651236133b3f95c9898d18c650a3de16a117","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"975a651236133b3f95c9898d18c650a3de16a117","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.2.2.tgz","integrity":"sha512-HGq+cdOk1bpxrcMQ2AdwLLVghL1Ov0KurwqRR5mZuPeKc0YalS9hFyWor4doV5iQQ+niLsDsdqfFwe8E6RqyMA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBTixkb7VS2aJYb/edKoSKkxTRozL7WVWY5DGTGMSoURAiEAzDaDi20yB0zA2XL5oJe9JcKWlbhQwikSyIR9zq1iYMg="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/sequelize-typescript-0.2.2.tgz_1491374065138_0.2805808177217841"},"directories":{}},"0.2.3":{"name":"sequelize-typescript","version":"0.2.3","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc && tsc --project lib/models/v4","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && SEQ_SILENT=true nyc --exclude 'lib/models/v4/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","cover-v4":"npm run prepare-test-v4 && SEQ_SILENT=true nyc --exclude 'lib/models/v3/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","exec-tests":"SEQ_SILENT=true mocha 'test/specs/**/*.js'","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.39","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","nyc":"10.1.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"7d152989b7e080650cd1dd4ffb3fcf94d60f20a4","_id":"sequelize-typescript@0.2.3","_shasum":"ef4a67f4a279bcf4e3a72138d4fa68dd3115baea","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"ef4a67f4a279bcf4e3a72138d4fa68dd3115baea","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.2.3.tgz","integrity":"sha512-D9M/p1M8qPGbkE7Yd37Rvf2nRFCXzuAgW2OtZjmGfGs0iBBjeVouMxlk/BQBPi969XPbkck3tg7WTQDS0PqD2g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDNt4krccH13Q9RmOw1w7vnk42kQPpJsX/6vl75Gd4KVAIgRMaBt9KLCOUFgsQyl0y3RQzvm9COromH5okTX7a/H1g="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/sequelize-typescript-0.2.3.tgz_1491377220849_0.8309370852075517"},"directories":{}},"0.2.4":{"name":"sequelize-typescript","version":"0.2.4","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && SEQ_SILENT=true nyc --exclude 'lib/models/v4/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","cover-v4":"npm run prepare-test-v4 && SEQ_SILENT=true nyc --exclude 'lib/models/v3/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","exec-tests":"SEQ_SILENT=true mocha 'test/specs/**/*.js'","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.39","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","nyc":"10.1.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"cad18f72f6c68619a0536ce44942941910dca695","_id":"sequelize-typescript@0.2.4","_shasum":"4e90f7d8ae5bb67f7ab20324146336b1df39059e","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"4e90f7d8ae5bb67f7ab20324146336b1df39059e","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.2.4.tgz","integrity":"sha512-ikJR35sGQJx44Rx/Qtx6yvU6eRKBoPx0M+BCPEWvwloTkdpy1Be6H8fcswuP7CtYBA04OsDLgX35+y+2cqAsew==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIA+FD3dBtmpC7w2zoGm8/vaZwvKph//EiHNO5xaIb7yZAiA5kIcTGdNE9jWfFKuJNMzBbnY2d7d0x6dpfkhj0IEONg=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/sequelize-typescript-0.2.4.tgz_1491380904456_0.725386381149292"},"directories":{}},"0.3.0":{"name":"sequelize-typescript","version":"0.3.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && SEQ_SILENT=true nyc --exclude 'lib/models/v4/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","cover-v4":"npm run prepare-test-v4 && SEQ_SILENT=true nyc --exclude 'lib/models/v3/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","exec-tests":"SEQ_SILENT=true mocha 'test/specs/**/*.js'","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.39","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","nyc":"10.1.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"20bfeb064ae1fc72cc1a19a4892faf9219283f87","_id":"sequelize-typescript@0.3.0","_shasum":"ddb7a5c44d37460c0aa59ad44c490c35a78f6967","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.9.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"ddb7a5c44d37460c0aa59ad44c490c35a78f6967","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.3.0.tgz","integrity":"sha512-koTyEn6SwKs+uGKM/FuruEPeSU7NNpQa7jLXozFdQZXzPVaautW05YlEX29TkjKrqr2N7qPlM9suvBgtxGLzCg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD2esuXKTufxY8ATVlVmxu4S79CvGqR1bp0snkgm8WlBgIhAKul53mofqxIvLAACXTC9m2aj5yNzeF5VZ9cRu1dcBzl"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/sequelize-typescript-0.3.0.tgz_1494410270273_0.4667210835032165"},"directories":{}},"0.3.1":{"name":"sequelize-typescript","version":"0.3.1","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && SEQ_SILENT=true nyc --exclude 'lib/models/v4/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","cover-v4":"npm run prepare-test-v4 && SEQ_SILENT=true nyc --exclude 'lib/models/v3/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","exec-tests":"SEQ_SILENT=true mocha 'test/specs/**/*.js'","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.39","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","nyc":"10.1.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"d342f051ffea8e201aba67c62759bc9eb13d146e","_id":"sequelize-typescript@0.3.1","_shasum":"ffa14f6bfc7e622d9253c805a561cd00c9cf090d","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.9.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"ffa14f6bfc7e622d9253c805a561cd00c9cf090d","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.3.1.tgz","integrity":"sha512-DNrZdGLMs4yInh0L2+LI3vG8k1vyFcTciQtfC1GgvUouM/J4UnlfJaLWrlCkYwl8Rx58qZAD9T63ICAkebG3Tw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDi4kTowXSqYirbef8Jk2Ytg7TqcfEDYvD10trY6kdJ4AIhALmzHIIAktY543Z729bXlbtQl7A7M+2yLXce8bldD6Pa"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/sequelize-typescript-0.3.1.tgz_1495189505493_0.8082789725158364"},"directories":{}},"0.3.2":{"name":"sequelize-typescript","version":"0.3.2","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && SEQ_SILENT=true nyc --exclude 'lib/models/v4/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","cover-v4":"npm run prepare-test-v4 && SEQ_SILENT=true nyc --exclude 'lib/models/v3/**/*.js' --all --require source-map-support/register mocha 'test/specs/**/*.js'","exec-tests":"SEQ_SILENT=true mocha 'test/specs/**/*.js'","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.39","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","nyc":"10.1.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"1f28cb7db9828c75c9ed459b6d05264b4907a57d","_id":"sequelize-typescript@0.3.2","_shasum":"a00f4202f546a9d65a175f95de92fb7824710873","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.9.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"a00f4202f546a9d65a175f95de92fb7824710873","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.3.2.tgz","integrity":"sha512-6L26Ltg8bKlVOxR01rEVwzc+w0gFxl0IvFtS1UPSDnZo3aQf736Y9gryBQrLFC75x6RCtcFS/5e1BM9jgCPtXA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCh+xuAN7mugGP99nQfZUjddDLphJOd1qTRuR9cwAKfNAIgE8xNDY15fhF1NJSk0npgmA1dAKprfvLtAwx6/jwG6U0="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.3.2.tgz_1496497496833_0.18129592039622366"},"directories":{}},"0.3.3":{"name":"sequelize-typescript","version":"0.3.3","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js --all --require source-map-support/register mocha test/specs/","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js --all --require source-map-support/register mocha test/specs/","exec-tests":"mocha test/specs/","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.59","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","nyc":"10.1.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"db8c071fd2ab4a445c5160e4742da2fd2b7857af","_id":"sequelize-typescript@0.3.3","_shasum":"c2d694c80f51a871579b5af707229ea0d83ae15f","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.9.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"shasum":"c2d694c80f51a871579b5af707229ea0d83ae15f","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.3.3.tgz","integrity":"sha512-pH+Mc5QwBTrVpQyTHN80ZwgrbFHAOpRvgw8kR6e7fkXPhIYctbuLkozsSaj/pOQkC/0vtxaqkFMbTZPrSeCMVA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDrrxqkXDvqpwHpz3JP7igiwaQNLBYOLKHns0mYeeRiHgIgXjLgoW6cax5AsvCDMU3MNF+G8RqBWlDlbwANY6+KS3c="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.3.3.tgz_1497284899419_0.5337459642905742"},"directories":{}},"0.3.4":{"name":"sequelize-typescript","version":"0.3.4","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.1 && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js --all --require source-map-support/register mocha test/specs/","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js --all --require source-map-support/register mocha test/specs/","exec-tests":"mocha test/specs/","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.60","es6-shim":"0.35.3","sequelize":"3.30.1"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"b86e102d186e85926122c2dd5cb0f5f37ff4a138","_id":"sequelize-typescript@0.3.4","_npmVersion":"5.0.3","_nodeVersion":"7.9.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-FPkcmaPWlaKhroPqZRtH6vDo5LZK4UZ+foSOuICETvGpLFRGm239ZD64XCrl65jIINjtKd6ux1rp8RC4R1QxVQ==","shasum":"a14e60e69aeb89dcac1f7ba3e6e21ce0415246d1","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.3.4.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDfkID1EYkUK81RCqbVYd8Btg4nqDy9Yhmx7qwGcMMYegIhAII+rtoklutr1etJftuSivFz7OIJ+qrl2UPmC6KLMobF"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.3.4.tgz_1497465626423_0.6949181163217872"},"directories":{}},"0.3.5":{"name":"sequelize-typescript","version":"0.3.5","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.1 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.0.0-1 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js --all --require source-map-support/register mocha test/specs/","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js --all --require source-map-support/register mocha test/specs/","exec-tests":"mocha test/specs/","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.60","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"2a1b83637fe550fd8c2784ddfea45c95dd74c023","_id":"sequelize-typescript@0.3.5","_npmVersion":"5.0.3","_nodeVersion":"7.9.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-1xFRC6ZVTvkvPFZcq3QvYpe7NT6P9bnnsrRhkPou7bQUMY5sjh6PkZ7YlJ6qzSOKjlySO2EAd9Cal0K+LpomGw==","shasum":"6bb7d108e7b103eccaa2f0314e3de49fe3e8a443","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.3.5.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCgvqMm6Yz7BXr6jVkw3ROY3/BfWs1mNfj7MfbeNVUGmQIhAKLpiBha0YECjq+Qi1+tjzoBaeKSwRn2d2ryxJuffCv2"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.3.5.tgz_1497466425930_0.0453750416636467"},"directories":{}},"0.4.0-beta":{"name":"sequelize-typescript","version":"0.4.0-beta","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.1.0 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js --all --require source-map-support/register mocha test/specs/","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js --all --require source-map-support/register mocha test/specs/","exec-tests":"mocha test/specs/","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"ISC","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.60","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"c4bd0c4d19c518b586f941297cad4c0005a99281","_id":"sequelize-typescript@0.4.0-beta","_npmVersion":"5.0.3","_nodeVersion":"7.9.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-sVSbRsom2FIuiYx84ss2afp5HwBAcx192KZE7Ji5dohWr2hZdUm88IpIcT3aNpolnhBa+sFce8yBTX/ILzVaUg==","shasum":"55321ba250f25922dc98bd638cd09b652faf0f59","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.4.0-beta.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDlrynndxvBi7fslZViRcT22iZlzZ6Av0hdzpiA/NpPaAiBIhp+06IohgDO+ODJnlf4MBVjVHBbap67YexlI9GJOPA=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.4.0-beta.tgz_1500228286163_0.35666947811841965"},"directories":{}},"0.4.0-beta.1":{"name":"sequelize-typescript","version":"0.4.0-beta.1","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.1.0 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js --all --require source-map-support/register mocha test/specs/","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js --all --require source-map-support/register mocha test/specs/","exec-tests":"mocha test/specs/","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.60","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"a3bfa4a4bea5829009d9ecf955fa7243cb3c1b49","_id":"sequelize-typescript@0.4.0-beta.1","_npmVersion":"5.0.3","_nodeVersion":"7.9.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-YtUKjuU2IkZNBpaZWU2U4dZ2mNEeTn7IzSFQP8j1xn/Mgcnp0mmtGAWPlTzsLoQoIao/B5pVxo9hUx5gqubm3g==","shasum":"2bb09e780b27591eedf3deba55c23b2950817041","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.4.0-beta.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCqh2mc0CTOq5+w8aFtbPmx4tZTVbjqP6gV1Qvz1ysw2AIhAP8W/EkUkEJm/PtzziNRFWJidZcvp1NPVkkviiyoGOi8"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.4.0-beta.1.tgz_1501938538572_0.09084537415765226"},"directories":{}},"0.4.0":{"name":"sequelize-typescript","version":"0.4.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.1.0 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js --all --require source-map-support/register mocha test/specs/","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js --all --require source-map-support/register mocha test/specs/","exec-tests":"mocha test/specs/","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.60","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"93e62810f41742f638631bb286f96a4a4a7693b5","_id":"sequelize-typescript@0.4.0","_npmVersion":"5.0.3","_nodeVersion":"7.9.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-i7XSBRJOm47EGhrRiSGn/5ETE2qUPGRAMEE0WULwvucIHn+hponOaEuAlWffFxg7gUgWrFzl6e3QOL8JFF22aA==","shasum":"bff1dccec1e1261d3c3039fe7b81743f239ef86e","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.4.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEdWXkRHnVSVV6PyAUugTeVr4EJ7pdfz5jCMhDsJqGuUAiEA7x4smqPaOgkZdWtMGFAc47za94Zy+XouChQQtFQa1KM="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.4.0.tgz_1501940062319_0.5906160674057901"},"directories":{}},"0.5.0-beta.0":{"name":"sequelize-typescript","version":"0.5.0-beta.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.1.0 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js --all --require source-map-support/register mocha test/specs/","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js --all --require source-map-support/register mocha test/specs/","exec-tests":"mocha test/specs/","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.4","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.69","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"81f8b7e6683ade1931f703287f5092d9f597c52b","_id":"sequelize-typescript@0.5.0-beta.0","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-nWWilUayC8IvxsjDXQ3mzxOLjaCnzMQCchwE4YRpKZROXuouv+jW0O11vc9KyTWW1uXo+LAEjUhATR79Uu9GWg==","shasum":"5385c5fcf2591dc2fa670e6fa776c2c8a8bac9e1","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.5.0-beta.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAK3ubRJxNVBtGxvne5I/edHqNsNrun+NjkGIONYUBczAiEAjBMzKLeL0KMwXixLaZHeCYcBJnKbHPB4wBCTKeNhAss="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.5.0-beta.0.tgz_1503759427870_0.11664244229905307"},"directories":{}},"0.5.0-beta.1":{"name":"sequelize-typescript","version":"0.5.0-beta.1","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.1.0 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js --all --require source-map-support/register mocha test/specs/","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js --all --require source-map-support/register mocha test/specs/","exec-tests":"mocha test/specs/","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.4","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.69","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"27efc238773aa31c3e0bebbd47df94f5ed52d33c","_id":"sequelize-typescript@0.5.0-beta.1","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-K3LWEKi3vr7TYWQfKDs6FzYpmZP9QVuUMe70aVYLQ1NUBwxliEbI7MSTxZzsJM3UeYzSOFWglToScTBoSb6IXQ==","shasum":"9741830f306c156897d5fade34eadb5b73757fab","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.5.0-beta.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBgb/4z7199bmMHN1d5FQpWUVg26+5ylItXxTs34nC9rAiEAtdJe7ZIJBQhhEnztvQ6KU7o78Co+1POU450ccfpkDVE="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.5.0-beta.1.tgz_1504106914708_0.11756880162283778"},"directories":{}},"0.5.0-beta.2":{"name":"sequelize-typescript","version":"0.5.0-beta.2","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.1.0 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js --all --require source-map-support/register mocha test/specs/","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js --all --require source-map-support/register mocha test/specs/","exec-tests":"mocha test/specs/","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.4","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.69","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"000fbb11503a622085c8735e2d3f96ebd6c46d6a","_id":"sequelize-typescript@0.5.0-beta.2","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-zIvdM4B+yeRFgCoHa2q3jxwapUrstjY6OQF2ligOzGRVaTukfRUWXNfh/8obhRZBaLGZJfJxxzh+QUFxNLVpIQ==","shasum":"0b2b5c9f9cc70ff460d66d4466eed0b33b6a2d0c","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.5.0-beta.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHXH6wJMLhlAbz9Dy1AXjFaUgv9Ld7etmglNypXpQVZUAiAzdnUahMIgpvCER1p3J5L/HUV4wvkI+oq2J/zG8xvzIw=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.5.0-beta.2.tgz_1504211893821_0.17309408984147012"},"directories":{}},"0.5.0-beta.3":{"name":"sequelize-typescript","version":"0.5.0-beta.3","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.1.0 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js --all --require source-map-support/register mocha test/specs/","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js --all --require source-map-support/register mocha test/specs/","exec-tests":"mocha test/specs/","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.4","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.69","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"71518ab63395251639d5c06614ad9ace3c457454","_id":"sequelize-typescript@0.5.0-beta.3","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-YHrwlgWNpqt7qj6Plu787FIte1hoIrPJgCERMmzGbzc2ctIeYbHLmLi1+vQWgU4cloMqimvreFN0mBdyFEMSlA==","shasum":"77a6b197bdadad0320244eae4cc0c244f312bb2e","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.5.0-beta.3.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC/YJUo+zjXEfgLhKSdVGs62yHSgwrxhsMnYLxDWvT2wgIgDfVIfymOOPh9poQD7gEMVgn1dGwOmqjuJCABBlUtklQ="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.5.0-beta.3.tgz_1504722538280_0.1813254370354116"},"directories":{}},"0.5.0":{"name":"sequelize-typescript","version":"0.5.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.1.0 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js --all --require source-map-support/register mocha test/specs/","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js --all --require source-map-support/register mocha test/specs/","exec-tests":"mocha test/specs/","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.4","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.69","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"f71072cd7d0215019be53c8ddc04e907037d21da","_id":"sequelize-typescript@0.5.0","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-w0Vdn9UNTqJGdLsBprm2XJ2v5HoMd6xdGf18uRji8kUAoiIdbax6qTBKWLYceXjDckPVBEsciKfh2SzUgffLTw==","shasum":"d663d6cd4eac9ea54991b7ac30ebd2d65cde1823","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.5.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHjONY8tNne9FvuYbtY1vKyjziuwTNUzb5t7dGpY6hEbAiA55mMWiPYauk0g8mL6MuimBaK55b4tgjazV08Jv6eo+Q=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.5.0.tgz_1505410832527_0.7219413765706122"},"directories":{}},"0.6.0-beta.0":{"name":"sequelize-typescript","version":"0.6.0-beta.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.1.0 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js --all --require source-map-support/register mocha test/specs/","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js --all --require source-map-support/register mocha test/specs/","exec-tests":"mocha test/specs/","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.4","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.73","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"6d7b4e1bd2aceae45d0661f07f99f441c2efd889","_id":"sequelize-typescript@0.6.0-beta.0","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-ITYL2hM3LZyYh2z1owrIgANJKOwS0CFlQKiBeir5gz1q45dnodcbWygkSUuXXax3q5ZcLitl1RyOHdw28EWCnw==","shasum":"84deba74692779965207500e3e6b6df69a528dd7","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.0-beta.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFNWK24TETpb25ypvilvl4ngqUJYhgGII1D9ZR9g5iolAiBD0dyJCATJGzoB9Bg9NabMSSBsXWOeAIfcZXdYzks+0g=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.6.0-beta.0.tgz_1506103960821_0.41006568912416697"},"directories":{}},"0.6.0-beta.1":{"name":"sequelize-typescript","version":"0.6.0-beta.1","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.1.0 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js --all --require source-map-support/register mocha test/specs/","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js --all --require source-map-support/register mocha test/specs/","exec-tests":"mocha test/specs/","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.4","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.73","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"1edcf240141c299a691e8faed2a46c812b3d7e2d","_id":"sequelize-typescript@0.6.0-beta.1","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-pmGCkkbjMjAMixd+YI5AYGCaavn2YfMaGz5Qo1Gh4YxpPV8Vrh1BDjPflcxO8+hZaPgPSZZqAo7DqfiGjLQSIA==","shasum":"6839ca273740be6211364c8325c3b374522c0a4d","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.0-beta.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEGyL0g6lP6xOXSVbwrJ/jpNOmlWO5hoPPEEoNVGiz+bAiEAty6O/KOgAki5wqH9w/mxGDrNVOiX3H4yjN0nqCleHSY="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.6.0-beta.1.tgz_1507789491418_0.7090800940059125"},"directories":{}},"0.6.0-beta.2":{"name":"sequelize-typescript","version":"0.6.0-beta.2","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.1.0 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js --all --require source-map-support/register mocha test/specs/","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js --all --require source-map-support/register mocha test/specs/","exec-tests":"mocha test/specs/","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.4","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.73","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.2.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"89739312bae1f8c3f951a2eee0c9cc7e1e5c1380","_id":"sequelize-typescript@0.6.0-beta.2","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-My/BiSrvaW3lSYqAPJJgHG+czsGbkntHQ1Q9dOa2tW5I4NxDmZfqo9aM4OqO9QDPxT2X0jg39jwg7+bgrcHXyQ==","shasum":"a5a828d946a80014708daf9c89370d564de23b48","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.0-beta.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDYy/YlEkwV5Znlp64TJjoqjyeOm+ccxzNj8QLELbhdIAIgX/PRzdRhAcY9V42g1JIUTHbBc8gTR/B5Ez+tR3Uit50="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.6.0-beta.2.tgz_1507984062459_0.37684295838698745"},"directories":{}},"0.6.0-beta.3":{"name":"sequelize-typescript","version":"0.6.0-beta.3","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.22.1 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.73","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.5.3","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"707d356a4090101c700f716e9a9b7077b0059f65","_id":"sequelize-typescript@0.6.0-beta.3","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-XYu1Jh+latiYWrhinTdRqeOOJtaUjHM5GVtW+rFup7cx3Lw9xmQVpqdJFQBE1jFHwnaDtXHYBhmyUqm8XbuEnQ==","shasum":"e885db0aa3d20a5acafcfe845b7906335feb0774","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.0-beta.3.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD3KUi6/a4xsyzqlASU+Vz88Iu/AHpqgfFPtVH83hwe6QIgDY06M3sicV+cYh4oWx2vwKH+6ydfRXaFzm83TJZmV9A="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.6.0-beta.3.tgz_1509830406380_0.8586170596536249"},"directories":{}},"0.6.0-beta.4":{"name":"sequelize-typescript","version":"0.6.0-beta.4","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.22.1 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.73","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"b444af3ca78a06114f4fd6c457f150aa284faf1c","_id":"sequelize-typescript@0.6.0-beta.4","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-KxVZO6B1L+wgOETwRkkoNjKRIl1HO/XfkvdLYLUF4OXqH/MWTncmclrv8RV2iojAA4ICzOhvP5YJ4JhhUGLtvA==","shasum":"b3169d1398e3ec0f07c78bf16fe8efb3181f26cb","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.0-beta.4.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBm1sEA8k7r9HbrWjwT0f3XuumD4646MyrelcX+hQbDJAiBXCoe8jxrGf/LcxYF1/KWkRKHXYA+N+1z8A/oQtlsQvQ=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.6.0-beta.4.tgz_1510084504829_0.868567084427923"},"directories":{}},"0.6.0-beta.5":{"name":"sequelize-typescript","version":"0.6.0-beta.5","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.22.1 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint ."},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.73","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"1fda92ac34460fbfa82758bd8e0c33bedd1bfad6","_id":"sequelize-typescript@0.6.0-beta.5","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-uju0HtIj6lf8C8jeSP7/T4tFUMzDCLOl1eC78dIogROApCDJajyEG1o4Lsfr4YyHEiZ2h50Gk8VT+dW9ptRIBg==","shasum":"55b0f0da7e46ca928d01ef6caa0c46cf6f9b5da0","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.0-beta.5.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQClWEtDKWtomryDAEut5Y4m+tRh3AVsd62rZYiaB5MeVQIgaNQTJD8jhhigPqH2LRQ7gXKkpZb2yFZa8m5Ictrhr4A="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.6.0-beta.5.tgz_1510399276159_0.6824578288942575"},"directories":{}},"0.6.0":{"name":"sequelize-typescript","version":"0.6.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.22.1 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.79","es6-shim":"0.35.3"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"659f5fe6b3221aad5b82046cd8637852d201001f","_id":"sequelize-typescript@0.6.0","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-D7nXgYzTuhT7DuZ9IVrfyEiP7K/5l0UL5yr4pbH0bidVQRmhw+IaRovqpYk3cqzdR3Z5zIbRIC1aL09XbTmJlQ==","shasum":"e7329e3ab08116840eb279a71db7ac0fb41d3b15","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHU18cjlPBwZ8bqZc5AA79GkKdQVin6lVGT0wRj3H/O3AiARGBAWIN0oQPnqLx2EzUThuliiQSF2hEYynxNk68VeCA=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.6.0.tgz_1511814906110_0.8045148828532547"},"directories":{}},"0.6.1":{"name":"sequelize-typescript","version":"0.6.1","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.22.1 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.79","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.8","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"59681a0a533f9104e0cdaa4508e980f554151f7f","_id":"sequelize-typescript@0.6.1","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-DbKayDlqzg13qMGvhDg7/wvoaNYO1dIhHdyt12Nbf6Kr12yFS/apqe9MecniEXYFt0nsqQFa/6RZXVM0IJt3/g==","shasum":"603c948183aebb534dbea182258ee6b0d0571bcb","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAkuZ3BYpGE6vPgs/6QbxpiZrOlstYWH4GPZYXBMUtzRAiEAzBTOVP0kB5iibsd/C91yzJ0+1CZ1plP1+ZBiHWi5bbg="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.6.1.tgz_1511972618942_0.4636466992087662"},"directories":{}},"0.6.2":{"name":"sequelize-typescript","version":"0.6.2","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.22.1 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.0.79","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.13","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"634a9ff94e3f73029c5154e3aceefd6187bd20b6","_id":"sequelize-typescript@0.6.2","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-Jz25RC1yMfJd7jCdnew/S77aeZ7k3Jx5mM1BPvlvK00aq3x7x9tRERF1VmSX13B4tKEkpxAmsRoI//BVcHyoyw==","shasum":"c0c7685143b0dae81def55a8f1b52d98868255a7","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIALQILo7PDHg091PyD3vCK4mqLPFoNLsU7iL2+cGekXHAiBOpTHIgASjrOAgmiGS9DFec3ag79/SWuedWUfCDDL4YA=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.6.2.tgz_1513716575792_0.6914524950552732"},"directories":{}},"0.6.3-beta.0":{"name":"sequelize-typescript","version":"0.6.3-beta.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.22.1 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.0","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.13","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"ddb344d38cc85038788ba2b205ac0a973ab17200","_id":"sequelize-typescript@0.6.3-beta.0","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-yhqNIdy6ORy83711kKhTZ2PV6Kf5YQo0x0WqNciYxPj2eqzsdU8nc9DYguXeH0m+YyBlCfqH2uYgXg37G1Tx3w==","shasum":"16c947f5d19760752c68cdbd8fa83bd90cf45eb9","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.3-beta.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC14JiSQADQJfTEN6nHwIoaVcdf6wxqncw2C5wlHrLqtQIgUaJ3kcKi5KvaPpT3FYaHcG5eNt9DLggjlFkt5F2g6Jg="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript-0.6.3-beta.0.tgz_1516396135469_0.5475272480398417"},"directories":{}},"0.6.3-beta.1":{"name":"sequelize-typescript","version":"0.6.3-beta.1","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@3.30.4 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@4.22.1 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.5","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.13","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other extras for sequelize (v3 + v4).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save // v4\nnpm install sequelize@3.30.4 --save // or v3\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nWhen using a path to resolve the required models, either the class has to be exported as default or if not exported\nas default, the file should have the same name as the corresponding class:\n```typescript\nexport default class User extends Model<User> {}\n\n// User.ts\nexport class User extends Model<User> {}\n```\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"923f5609d4b81076dd6f574f9e169cffbbb36ef3","_id":"sequelize-typescript@0.6.3-beta.1","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-1sgWDrF6HI3AqwGIgZ0Mfb++mZErnVNz76Yo8XK8ln1idCo7bHpSupFBN0Em4/qxr3XXibYdIGoXGzt15vdgVg==","shasum":"e2e0c136b717f39ce497c1b7712c0de6ea4a0c50","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.3-beta.1.tgz","fileCount":312,"unpackedSize":259188,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCf91zGSxVRsSH889sG9Oio0KVA/r4cF/uYLifNLPNbxQIgChZKBO81fa6TXn2+LujpIaewKGvYB4x1u1SiOjiFeMM="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.3-beta.1_1518469653272_0.27843890622579015"},"_hasShrinkwrap":false},"0.6.3-beta.2":{"name":"sequelize-typescript","version":"0.6.3-beta.2","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.5","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.17.1","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.13","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other extras for sequelize (v3 + v4).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save // v4\nnpm install sequelize@3.30.4 --save // or v3\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nWhen using a path to resolve the required models, either the class has to be exported as default or if not exported\nas default, the file should have the same name as the corresponding class:\n```typescript\nexport default class User extends Model<User> {}\n\n// User.ts\nexport class User extends Model<User> {}\n```\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"8529945dcad03a877bbb5e14e9b3bad92623ca13","_id":"sequelize-typescript@0.6.3-beta.2","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-77e0WRmtna9UcoRkjoZffveul72LrXnZQ492fZAylg6e0ok3mv1fQiSL10s8axG6/bV5J/+EPLkcVSx2vRNK/A==","shasum":"30db2875cf7390049eab7333eea8e1e09ed835d4","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.3-beta.2.tgz","fileCount":314,"unpackedSize":261698,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEMCHwu0BOGaBcXcuS1FRMcIwWfLGpz8cs8O7mkFTeQ72yICIAtAgzjHfmI77n5F9AmjIKU31yqmn76dQzgn0w+NcYI+"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.3-beta.2_1520362284640_0.5315660991109079"},"_hasShrinkwrap":false},"0.6.3":{"name":"sequelize-typescript","version":"0.6.3","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.5","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.13","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"3309260656df8485972d5237b7814baf4e036900","_id":"sequelize-typescript@0.6.3","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-Mj+/g8QPqWJ+0h7IsmHUzJziu8vINKPZFhBBkClF066gPOHOz3xay+iQudVkdVdMEjMRqwfp2YoPARSqr+r5Fw==","shasum":"567ef7d12193c16aac7ee85e5d321e8980fb817d","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.3.tgz","fileCount":314,"unpackedSize":261691,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCRbfTeLm87imxb/nqs8xvieaTjfgmihzd4KNJ7YwbwmAIgZANh611nB0lmYTeWIsz7IRBjAvmo2ShURRKyvvGj8xo="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.3_1520363200334_0.5947706710785687"},"_hasShrinkwrap":false},"1.0.0-alpha.0":{"name":"sequelize-typescript","version":"1.0.0-alpha.0","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","build-tests":"tsc --project test","test":"npm run build && npm run build-tests && mocha","cover":"npm run build && npm run build-tests && nyc mocha","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.5","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"4.35.2","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.13","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize.\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nWhen using a path to resolve the required models, either the class has to be exported as default or if not exported\nas default, the file should have the same name as the corresponding class:\n```typescript\nexport default class User extends Model<User> {}\n\n// User.ts\nexport class User extends Model<User> {}\n```\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"5a2998f1f7fc9fd41b69a65fe5207f54555c13f3","_id":"sequelize-typescript@1.0.0-alpha.0","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-yAYMtDLkGVWxEFeFfQkS+DiBSWCCJ+NG2RVPBppoW1MG6NSbAC59uS8wBWNM1TAnwr9j81bTG02TWUHeSSSIgQ==","shasum":"7eaecde8d92133fe7832ccc96f21668942b0e91d","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-alpha.0.tgz","fileCount":323,"unpackedSize":256642,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDBc+mD5YusqG5EglG+ZPkMnTc526KjNeGSxAFl9seJWgIgF73X0xQ763Of7uyPRwV9NvzCM609h1iCVO4oacJhsw4="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-alpha.0_1522434718702_0.8504284753186886"},"_hasShrinkwrap":false},"1.0.0-alpha.1":{"name":"sequelize-typescript","version":"1.0.0-alpha.1","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","build-tests":"tsc --project test","test":"npm run build && npm run build-tests && mocha","cover":"npm run build && npm run build-tests && nyc mocha","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.5","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"4.35.2","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.13","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize.\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nWhen using a path to resolve the required models, either the class has to be exported as default or if not exported\nas default, the file should have the same name as the corresponding class:\n```typescript\nexport default class User extends Model<User> {}\n\n// User.ts\nexport class User extends Model<User> {}\n```\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"7958baf63420a3501f8e901316b4ada8cac4447f","_id":"sequelize-typescript@1.0.0-alpha.1","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-2DZCcGJUwRTZHNcQ3l9vRhz/1Wq20RzUk67oF8ytbOjayhTdeOF51NYqJQHAZ34ZLCwLs+5aUaARy92Z2BTWCg==","shasum":"c340df9d912170e88be56d4a278e4c814b03e9a7","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-alpha.1.tgz","fileCount":323,"unpackedSize":256422,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC78jlhm57mJM595CueBU8OmCSSpElDyj1NjGsDqagtMgIgATAcYPPh+SMsnW8hZBoVD5pOFf+AfWRiQMuO6sKbrrc="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-alpha.1_1522499419642_0.700814063642988"},"_hasShrinkwrap":false},"1.0.0-alpha.2":{"name":"sequelize-typescript","version":"1.0.0-alpha.2","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","build-tests":"tsc --project test","test":"npm run build && npm run build-tests && mocha","cover":"npm run build && npm run build-tests && nyc mocha","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.5","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"4.35.2","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.13","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize.\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nWhen using a path to resolve the required models, either the class has to be exported as default or if not exported\nas default, the file should have the same name as the corresponding class:\n```typescript\nexport default class User extends Model<User> {}\n\n// User.ts\nexport class User extends Model<User> {}\n```\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"80e50d1218d7411de0ebab6fc304fbb31a3055f9","_id":"sequelize-typescript@1.0.0-alpha.2","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-q8Fh5+0vrl2ncDTU9JHdMeqvZWf5Nk+dnDOD8FEcokDttttBKjBO1kVwSfolWBRlAeUCF2LE1j8/9099lmwGsw==","shasum":"740a220966d40eef1824df5d851dd6f052b1962f","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-alpha.2.tgz","fileCount":329,"unpackedSize":261586,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIF1ofopVmH0AhVkjg/D34fF/xMmTsxuZdMYlBZA7jCABAiEAlYaszIy8UHHWjLx6BrfD/FocHEppGe47cT7nIB4GP4o="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-alpha.2_1523211100046_0.16932505437355627"},"_hasShrinkwrap":false},"0.6.4-beta.0":{"name":"sequelize-typescript","version":"0.6.4-beta.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.5","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.13","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other extras for sequelize (v3 + v4).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save // v4\nnpm install sequelize@3.30.4 --save // or v3\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nWhen using a path to resolve the required models, either the class has to be exported as default or if not exported\nas default, the file should have the same name as the corresponding class:\n```typescript\nexport default class User extends Model<User> {}\n\n// User.ts\nexport class User extends Model<User> {}\n```\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"7a2970f9254a7c286a1409a128cc46510e1a4547","_id":"sequelize-typescript@0.6.4-beta.0","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-8qBZwO9xvOrxf4ROzcUcWZMGu+y5uifEY0z26VE+t+A7pUe/YxP8RzXRUQ2Dc3WbLpmeiR2uA23+d4VEzaoKwQ==","shasum":"c36e4bfc030dd59b1211967ecace243601b2242e","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.4-beta.0.tgz","fileCount":312,"unpackedSize":261167,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDTILZ3w6I+v37U29NZBCS8rq7opyfhqI93CDo0wOVnFgIhAKRmWlO2DUdxNY6dY33xPlmarFCA+0u8E3AcF/cAr/MP"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.4-beta.0_1523560148117_0.6341451678087033"},"_hasShrinkwrap":false},"0.6.4-beta.1":{"name":"sequelize-typescript","version":"0.6.4-beta.1","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.14","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.13","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3 + v4).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save // v4\nnpm install sequelize@3.30.4 --save // or v3\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n#### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nWhen using a path to resolve the required models, either the class has to be exported as default or if not exported\nas default, the file should have the same name as the corresponding class:\n```typescript\nexport default class User extends Model<User> {}\n\n// User.ts\nexport class User extends Model<User> {}\n```\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"23dd169c45781501d474784bf6019cbaa18c7c89","_id":"sequelize-typescript@0.6.4-beta.1","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-268Ksu9M5BKZ5ISSyEFJmFLtkLpHwdSYaV1mtyHL29d8l7LU4dswAfwW7Za6aWgcvJU3MHuxw5Zm/Xiv4WClXA==","shasum":"24d99e7fe3d2a4895c7617dde7cc7b4dc85204b7","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.4-beta.1.tgz","fileCount":312,"unpackedSize":261448,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa3idYCRA9TVsSAnZWagAAs2AP/0KbWomUPoEey/FKTRq2\n/pyMEWW40olrFfg04cNNop94IJAr2S01eBpjrdPuOthpetjEU82QpGl3oKa4\nOD1cJWDOs0ZjxeYVNRVXNLwybUaPqFI5a02+RxkWP4OQC1uLSWZB2FW4zrv2\n9yB4EiXd5+rFnKTvJeCs3j92u6q7XNJXBVxTzgCm/0/dFOxNghkSnVuQoh1E\ne2ZDjVFJR8129LYUjJU+xGwN+aKIoxdpH5Jsl8NeLxSeucJbPDTslVAYTMFA\nnBWttzOEORGC3/+pQIRkQCeJq5Q20WgyAtxATY27JH3zrKJTmQA8ipCADcVv\nEY1USZWaUA6LV4KO3VZzed6IsHd2A7NCvpB0c1qyVfE5Ud8C+5ExzSqpNbyC\nOn7nz+BWvsYBPBJdTclJKyS16dvHwjoi5NNWv1yhUqbEdsk7dGB4jbdzPHTT\n6GtNRrf7Ch7DA/vG4hG0GNhByXN+Bs8ivncWcXQO1tInTRZY5coej8ExO2Wu\nfgAL4TFgKJgt6QW40mCJl+IKx11o/gtrD24vzyb6prlchygz7hnubiSy3Ypl\niOCmejbeJP7TB+ayuSonGY/b/eMWl+Vu5YU2BBBBDxsRgJOe0O5TkXeGjKLu\nM6iP4/1gw7LjUew50sdakDRZLAHfMtxMpnfVqBTjeX4i0/7/nkFX9ckE7Qpl\n4lDc\r\n=9RS0\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICfSiqULS+DOs00hovgopW2LzzMWn9yaZzqc0P4crncMAiB+bQR3KE+iKzlPPvJuUxoHJ0dTNvnvj0X2OgOe5Ef7Tg=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.4-beta.1_1524508503366_0.24302528595549666"},"_hasShrinkwrap":false},"0.6.4":{"name":"sequelize-typescript","version":"0.6.4","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.14","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.13","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"64586e67b2d73e4e797604474ab9db7110aed40d","_id":"sequelize-typescript@0.6.4","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-5Xl2mTr+b3SXClmBSrL4l2xoOK2lhkW0vZVKBA6aCpM5hPC5iZexq1mLizGzgLualE3cUg5C8xDo7Tt0FuIyJQ==","shasum":"3fa829fd86790079ba425686d2ee6dc3cb697978","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.4.tgz","fileCount":312,"unpackedSize":261441,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa3ijrCRA9TVsSAnZWagAATjcP/1pY3U98RbeZtwm8+xOp\nVTFlh1tAteEX057lFyNlUXhc9g8hNWia3hI82BLXqzlXkJlSwQV4mG+AJGAx\nvrs24tabdWbrAsqMVzjikKx2xzO6y59jGkevLckMz9CJKLiw9L7dzHBTEocM\ngAO+xaWAmpO689hRO6P1yALo2I+zS5YHWb9ICVvtyWNbcdNeSIJ6piPOFXwH\nbw7b9vE8tUbQknhXRDKZPy8iuhwnjGxLkh4ukH2//k+CpD1L1qt4MmcJYczU\nK4cmeoz/faWKClEyfcuN1bYWbqwz5uvR9s+ojsoYsKMT1I/3tEeZlXWLED4l\nMpcO2osr9+80Eb1XNfQNy4aEUCFdZba4mCTIn7zYnTo4seddeXfaACm/L75k\nYyPY/FwxWZIaxbDY4ale85Q5EIPpQVNFBJ0blJZXcCg+8IDNtIi84H4P4wJH\n7HW4GrcEX5RC8ZKwOWNo/pg4hj19UBgrscOac88Mdl4HMBAp8MmtOGWMLHrc\nVZOfIkQF9vxaCZDN2MWUrgog/6JYHTmJzcBHJQrC8CYLNUfsivj/e50fPV1x\nUP24SaETCWVNE+oJeWOnphQnm2fqa6o9wZDDH0gAo902Vlf+NkOTtalWlY1o\nEGI/KyG0LKIKO04PCw/QjFS5ju4R0QxvjW6qWRGXTOdItAHAhQ2PYx/BxJFE\n4m7F\r\n=Gdag\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD/0DO9PE0F0hy1DcSB5qVpRx0YiEQoriEdPKe7GMePYwIhAIN9Y97cYhVUjMGjgux7NKZis23sQzaII/KzixdE/mZh"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.4_1524508904682_0.9772032224789589"},"_hasShrinkwrap":false},"0.6.5-beta.0":{"name":"sequelize-typescript","version":"0.6.5-beta.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.14","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"3.1.13","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3 + v4).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save // v4\nnpm install sequelize@3.30.4 --save // or v3\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n#### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nWhen using a path to resolve the required models, either the class has to be exported as default or if not exported\nas default, the file should have the same name as the corresponding class:\n```typescript\nexport default class User extends Model<User> {}\n\n// User.ts\nexport class User extends Model<User> {}\n```\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"4f38b529e87fa4c75e162c9088034b300597d9c6","_id":"sequelize-typescript@0.6.5-beta.0","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-ZIdkjwXgzU124r/2NM1g9Q+FkqGBIn02vR54mliCYHYO6JaaMNxok36xSwsNZOjswRxv6yLe2r1i30s6KzAq4w==","shasum":"d7c8a123494a1f96f86193fe3279bcc4a0ffd913","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.5-beta.0.tgz","fileCount":312,"unpackedSize":261451,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa32m5CRA9TVsSAnZWagAA22AQAIWM6Aff72ctg/H3bfvl\nDA21d9GmOZvvXPEW6mr44j6tt6gX6MOgF7LmjAmMIQB249CL9Jctl3PSkc8B\nMDVeg2DvT0FN6yPYdP9MRhyg6Wg7R51q5vG9MCzKbM1+R6hgjToBOwzp3h5T\n4MgtwCyuCGrnkIYaTsCNrsKJhY7Z/AKGPyA3bFWOXXNWHvwfCBDAX4ANCftT\ntBpmUrr3ViL25Xv2KsvWm48UqFiRnMUVjBYMauKn1KC3OYb3Q+VC5S/fuJoO\nkW86l3z8UxmSNGcRDqG4TLYq7Z2V/nDirL9L6RjWI8PGdHpQ+QHIcWiQTqmO\ne456/7HB2r0YlLLh1Pj98c72WTQua2YkRHHtJGkX1dw/XRmfYo7oECgJlnAW\nmqG9tRNQosQ5/GWljmnPCKFCE2evqaVSQrWiy1+QQADy1lUAOiQw/w4ay4PQ\nhVO2KN28IwVmTA0Dx6smuXm9yWUuUUc28llhvKLh/Mwarn4A6HRFeaN1dk5k\nRIGW2CLKVJ+deNzLwXxkESTpls5/KUKo5X3KZ42Lcc5ai7n+hhfWZVlvbAH1\nSpnT1rEdIoPo0rYfifOShav4KcxgxdUHNXcnfycHoYRD7bAeJXh5AOWQoUze\nl+MZ1bTSGVyb8s/b7ZgXlvoUw97ElOgs3q0+LbLgxmxnfz8fXkb7H+2OpWDM\nQvQX\r\n=A9Vx\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHvQZpjktUevjr9cxXHv9JhgdHr8ZdQxnRCmYErO4Hv+AiBgGjRCCNWTdCdpJXzh6V+SsWknNtbzbjr8NagRRUae/w=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.5-beta.0_1524591033426_0.7506779227097731"},"_hasShrinkwrap":false},"1.0.0-alpha.3":{"name":"sequelize-typescript","version":"1.0.0-alpha.3","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","build-tests":"tsc --project test","test":"npm run build && npm run build-tests && mocha","cover":"npm run build && npm run build-tests && nyc mocha","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.*","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.14","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"2.1.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"4.35.2","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.0","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize.\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nWhen using a path to resolve the required models, either the class has to be exported as default or if not exported\nas default, the file should have the same name as the corresponding class:\n```typescript\nexport default class User extends Model<User> {}\n\n// User.ts\nexport class User extends Model<User> {}\n```\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"329fff22f07abc5679492be336e8dfe5020e75fd","_id":"sequelize-typescript@1.0.0-alpha.3","_npmVersion":"5.6.0","_nodeVersion":"10.0.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-ONCOjICHvFogavq6j0ahb1ATnEZcbGpabjVS+v03ROl+rsp/+mKrGvr3q1zdkj9wfEp9VrLz+PybwTgmE/7U5A==","shasum":"1fcb92d89f2dec2c6ab7f179292842fdfd0e2fc3","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-alpha.3.tgz","fileCount":331,"unpackedSize":262030,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa7f4eCRA9TVsSAnZWagAAA5QP/0RHVMhGK7Lw7o4Jw67m\nQFBujzHNslKY+Iq8BqfjsyeJYWMZT7pj4x+C2FSb9wtaMDwK4TyBJ1uFCvaK\nMdkTAzaB3wHmrFWyVgsR9LRnKlxeOtV9Qc1ipus6p//CsyxEEuKP0bYrMVqF\n/hHJMDhNu/t364UsI2kbhXxYt9r1kgb0+1OQE9MpBCKo31iGu0+8X7UWfdgt\nY5TKUgz11Rh/63oQKvDhMEWCMa4Yt+6plOC2H9zhxG8YV6HTjbUlYiqYbT/S\n03vcOfVRqrkUlMgE3SJ17+aqJpmpN9hUG+z4L5giEjUnG3VLd+7IDqRSVWQg\na12SftSxOa1zNGJeIf7xqxV+I98J4ET1pcpwbWhzMLEBvCJ3ZPQqZErVnWtG\nFLddkDLqiHeURPFkaN1bRcGhXrIHviw8TqFa2o6YreWv/7jnyQMUjMRVY8MD\nc0+S18nr6U3P+5xNXXmNZ5fOBodEzNeSk2mcPJuHestJAi49X/2LBKThj7Zn\nVkWti+Z7MfN+USdh1uEkRyvIioLi9xGcesvODNX1jJvuEprvSIWxg1VQj0fp\nBWClIjmh7GVBPVpbRWjqFWMKWGt7i/T2YvhzPvw5/xqDgu3C/l5C1uDZ3awL\nbQeLbftb7IiSbRfaupTwXc/HK6arxlTvMBLG3PmFY6GsgBJjWjBrLSCEoFT9\nsffF\r\n=KsXF\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDVAgRf3pmFe7aRB3u5DbK66MR1pwW+mfbJAJ9CCn6U+wIgIC5XPy8skdVl3IX+yg41KkAHTO/VAdHiUS4Ofs2D9UU="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-alpha.3_1525546525837_0.12481715392708281"},"_hasShrinkwrap":false},"0.6.5-beta.1":{"name":"sequelize-typescript","version":"0.6.5-beta.1","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.14","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.0.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.0","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"97bafbb71f2108f0486835992f3a0d5cbd739ba3","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save // v4\nnpm install sequelize@3.30.4 --save // or v3\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n#### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nWhen using a path to resolve the required models, either the class has to be exported as default or if not exported\nas default, the file should have the same name as the corresponding class:\n```typescript\nexport default class User extends Model<User> {}\n\n// User.ts\nexport class User extends Model<User> {}\n```\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@0.6.5-beta.1","_npmVersion":"6.0.1","_nodeVersion":"10.0.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-vDlFL56OexsmeiujbIN6LIRiZ8ysDk0msQV2XVFcuJ87RfQiklO1QOieB/4LvnPFhhMewBxC+FVdmvx+EVQAkg==","shasum":"1445cd229ae3aa22f8de3aacda713a95c38aa711","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.5-beta.1.tgz","fileCount":314,"unpackedSize":261919,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa+xrTCRA9TVsSAnZWagAAw08P/Res2QxSIcuSTcVfhQV/\nKBqbT+tnsZLPRqSoMxVm0/SSrRWvM9iP6XhXjbd2XV5UTXCS0bKnxdxXLbgk\nDWkKkh7IHENHapuFCpKUCub9nANuVuahptTp4SO9oKpx0l1XGGq4z3bLJ266\n+lVyFLST2TILDuV2SrjNrk/j2noPTsYzLbBzopG7pUvb5LYaWkwQ4h8ZQrsN\ncTXT7xs475B3pht7GefZ8tz/0a5pZWGYylETQ0AxgdH3ui1EkKUepHvM2zcp\nF4rffdha5m+9iI85uiEQVBMvVGb4SEAUY7NYcpH8JBCvmZ7yGaLUNDl3k9ui\nrvLi9O0XvN0n1PHYoC3o0rbtkrJiTTQEjqY/2JVDgOApEVLYmJ5F8f0XX+i3\nYD29Ny//Z/lwIaFZJ45vFVUS6KqjsGGd6fRATab4ILQQetSoUu8M1ciYQdV7\ncVToA4SGHhfpRkd5plu0viZX6FK9Hk0X5lEAC5oX5yigndJsBgYf8a++938w\nBT6ORAC2aoHddCtN2RCL/BBROAaD1XO497ZUos9rHfKO2AypXCRVaMPVvZio\nUYgimun0DojcSUGR5H4jg8m+qDRQUxNKEz5i80B9I3JwZKdhDFBRfbHKVA2Q\nFW3GxN+WaTOkk/LS5uz1bUcfIOyQ/98oYLnpUjDVt3JSh3qv9PwOWQRuMmce\nONH7\r\n=Udsf\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICw8TSzdrUQ8aNd+bzBht4YcFQAr9+Du0cKk2Tv4L1x1AiA2dP1F1ZNnpWr/n4H/mNXZ49IizmG2qjB8QFHPjpMHog=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.5-beta.1_1526405841858_0.7846309411481338"},"_hasShrinkwrap":false},"0.6.5-beta.2":{"name":"sequelize-typescript","version":"0.6.5-beta.2","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.14","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.0.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.0","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"c03c51f2543643d9d17e24ed6cd14e1e1ff44f7f","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save // v4\nnpm install sequelize@3.30.4 --save // or v3\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n#### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nWhen using a path to resolve the required models, either the class has to be exported as default or if not exported\nas default, the file should have the same name as the corresponding class:\n```typescript\nexport default class User extends Model<User> {}\n\n// User.ts\nexport class User extends Model<User> {}\n```\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@0.6.5-beta.2","_npmVersion":"6.0.1","_nodeVersion":"10.0.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-JUn/3evgE1ZZbmSm3EOAlhJCVNrN2mJzFhEfAxSpzZn+k/Zus+KS9XResX5vo2RhVY0TOcOaA6FEcdUi8tAFcQ==","shasum":"6190c495a291ecf33614a35f58dc29eac518b8ba","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.5-beta.2.tgz","fileCount":314,"unpackedSize":261939,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa/HzxCRA9TVsSAnZWagAAWl0P/j+MC5HKlDe6/kCl4xtL\npdI3q3FPvVllJr9fGjLEyt7umGNYaipOCdOeMiHiWHNnB2CkC80c8jajywKt\n8bZ6SJrbkKAmqqcTRrh4Mptrnq8fmVOdBgQkdQ1dsLhJm66DE2W/020QSr6y\nvilEVZzQ3tvOxAXVCbI0ycPkfVL09X4YgurxOORrIjdn+4Dpw2DIeyaDB44B\nm4KCHD2SQVWUnhD52CRgJgpfXcx72/3A6lvo5EvZC1Z64pGw/VeMHH4zx+fY\n+Oy4e9iKLJpLIXIggdtvS2mKpMCFpEkrYgGCAnC8/TttgtveATnvv5sC9NxL\ne/l38TjLtGIBhoFsshJQtN5zxl0YGarrtlxPV3qZWwUzTD/UNALljsvtotqo\n6yAqWWFZxXbs70j6UAjmExHHHDqUKPLIfGEzoxM7Irdz0Vfw40IWTu+UgkAS\ndJ7elpMyeL5Lo6yd5nUmWvcLpeSyTU4l2S5Xe6McHNFUsgQK4YRknp9wZjVz\nEmsmuMWSV3mTWLvH+RTU0h4fqTRp3TE0fy339jIeJZAXmSf2ESNLIB6wLVXT\nywUwE8/xmjhMzIGCWtb2Br2pLxBy8IZRPi1OYMgR8maNPH/8NjCyKzpTB2Fb\nbYxrLGOoa3z0MFq598GyGdZwyWLE/Em/48D5kW63m56GSFhVLI1bwL5jcFfz\n+t6b\r\n=NtR8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDj0w1oEVBUrqeQ45WF401Lc3HpxqKAZCri1HY3tGCZ1AiB5cleNg4zwuO0StdEjpk+cYaUZB83kR2Y2xznvc54S+w=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.5-beta.2_1526496495852_0.2949552706174281"},"_hasShrinkwrap":false},"0.6.5":{"name":"sequelize-typescript","version":"0.6.5","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.14","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.0.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.0","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"8c37a59aae3042f541710397b14bc41bf6e9b2e1","_id":"sequelize-typescript@0.6.5","_npmVersion":"6.0.1","_nodeVersion":"10.0.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-5K/+g5zU995fg4z2tgVdaSgGoRiPRMFJ4iY6WVG3przWbZY85zDgAZrNVaj/URzm51Ea+UvXHfrIwt+yY5fHeg==","shasum":"e6263c60feed285eb576a9fab98156713b965202","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.5.tgz","fileCount":314,"unpackedSize":261932,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbBwEdCRA9TVsSAnZWagAAncAQAJJyYKCgB228hHiZRJYS\n+WfZKs6T6U1htSTTIZkmdIsOxS1fBa8MGzcxY+9fkT4kFA8PV/Ypro4euvGE\nmHq8TYr2lCrasRFAhL5Hq9rH7gtDga4+qQ6WYrHIUH1eiTGHlxigblsFF2t6\nePiH9hYzzlofQrT+z8kmOKI9ToWwyu9MBXVO8DqNucNdN4IB3cpRiI3n0qcq\nzEe2gmuJfolLT00+XtUXAt6h0nT5p9TDSXo1cWlGPt2UGLBrYZL/H7FOOt1E\nr5YqETSUbtq8JVmu3Pohn6i/seGJV9aWqb8gyozoV5yAXmUKp63ppmUnq3J/\nNmqR3YbWbZAB+93YTpBBPXQ8fYY+T9cXWVmX8lKt0qRMbhr3rbnTIDFJGpd8\n2OguQje6cHBIJvK143Fdy1DCNCo6R5Md8HHVEbUzj79muPDFCX81MZZY8pEy\n8EfnOU/BJeft2G8SheSNRuLZg/5jn7FMoQlTeKnD0crzC9b32bjbZXF86mmr\n0m5hSjJqZK0s1obTbmkEEo3JQqm3j/xKsJ5GbhLVq1hm4GUz5jD3QDWyKo9a\nQ4agptNHKe9U8AC/WJ77AiFv6YkYoocThL7Aic2ERFTHJoFMQmJKKhlHNM4Z\nx9JxyTOebLe5zS8ATT+dgaLbUdZJgBxzqwBV3VZelZO9OZH0R0qSnuZIWTLi\neAd/\r\n=iQrc\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD7kUJk22BryssGgbZ9uxm4Xa5+238+c/D5eLcnDOBRRgIgK0lyCGmOw4SsQQ7HkJcLyT4eoKmYKYb1rf0PC7JNYBI="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.5_1527185691113_0.32499646522907133"},"_hasShrinkwrap":false},"0.6.6-beta.0":{"name":"sequelize-typescript","version":"0.6.6-beta.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.20","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.54","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.0.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.0","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.6.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"eadc29e560dccb1a1540bff9b2768677e58b0e9a","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save // v4\nnpm install sequelize@3.30.4 --save // or v3\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n#### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nWhen using a path to resolve the required models, either the class has to be exported as default or if not exported\nas default, the file should have the same name as the corresponding class:\n```typescript\nexport default class User extends Model<User> {}\n\n// User.ts\nexport class User extends Model<User> {}\n```\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@0.6.6-beta.0","_npmVersion":"6.1.0","_nodeVersion":"10.0.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-UsHxt8AUZZPDU0hn54D0qNkwxChwyHyJAgva0msMLXkln3mfFJW4BZZDdTW+yecn27l1yP4Ptj5fdapsvzurvg==","shasum":"b486f47f5b78b1af19d9c6e74757660a0b4c974c","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.6-beta.0.tgz","fileCount":314,"unpackedSize":262233,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbDueACRA9TVsSAnZWagAAUxUQAJ3fZRLkloEaYFH/yMhb\nep7Q6f5rgkiuzRQECV98zPwHMrN32oAEZNQn4eUd8505DeWfRh00tXnX72ia\nJgOPDxi3OrSBK0N6X9jRHiEINnGIoKp+a5cyQ+QYmSlztfpT1l43s478WOji\nirM64RXaOu6OQ/byyuK/YOkJ9wRHu1JCFOU8WbOXVXPHgM7LSKDNG/t9aikT\nylfF11tdZ0P/qkXjNhw8biObZ7S0A04e52B2nXnbO8xV4MMQB11HHNfPHIck\ntXTrhLA0R8PJFLC/vgW3F9A94R2MJJT5Io/52VtaBLOXa9YBBxDJAA+YTU17\njeexEWF4oYJvQh+NPYbMSjvFdwQTjs5dLG2/RB88WucVFQ89v6uKhnRns3XR\nnrfDEDHo/wBkw2zGbgQo/ou3ImBgxnmt28G8S38r7YtD/a/UyqSAqJvw9isL\n9nnANlfob3fpeoTompgABpGMYTV+cYDPtYdpGzseNmHK0yLJFxfSImDhkORv\n7YeuiHIRRPOaPBkQY5G5Fq03RNwwm6r47e0BqjymOGET737eObpdbWKQUqpk\nAz6Z6uTteTp7+h8w6JRzCGKkj+586ly/rKTDn2Jozcm/rK8iOmpOTC0cEP/X\npihbYSZAGKtjhu6/xsV7GhqijyTwT6CbEMV7Axw6f+RUszcN6SzqFicJx47U\nsevR\r\n=WNwe\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDQFDZ0VbmIrTl1q6+n6mUtA73HacklaGQnRv9LcaizKgIgCFpnB7IpVj68UVieS249Puu6DbI1mg4UY2FiRjfDkP0="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.6-beta.0_1527703422979_0.20522736179220513"},"_hasShrinkwrap":false},"0.6.6-beta.1":{"name":"sequelize-typescript","version":"0.6.6-beta.1","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/reflect-metadata":"0.0.4","@types/sequelize":"4.27.20","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.0.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.0","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save // v4\nnpm install sequelize@3.30.4 --save // or v3\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n#### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nWhen using a path to resolve the required models, either the class has to be exported as default or if not exported\nas default, the file should have the same name as the corresponding class:\n```typescript\nexport default class User extends Model<User> {}\n\n// User.ts\nexport class User extends Model<User> {}\n```\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"93330a700b11e1eaf7fdc53b05fe0b3d92eeb22b","_id":"sequelize-typescript@0.6.6-beta.1","_npmVersion":"5.6.0","_nodeVersion":"8.11.2","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-SBkZZ6+9y8gX+Uq0e9XRedIWyaZzlvF5Hf9G8Ds0appzAk+DkQYtQW/6/hYz+GGcCvEAOmr/J9MgEBDuD+TC9w==","shasum":"2c32f2b09404ddff0427e36c183f913daca0b667","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.6-beta.1.tgz","fileCount":314,"unpackedSize":261341,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbF+4bCRA9TVsSAnZWagAAF/oP/0L6TOvwmTAQo5z/v9Ap\nbz7uhyGlCVu7eibQcZM3dGxH2aj1EZu3ALmS1CbITz8hOEH9a6V/68x47L3f\nF3N1dlzCpMR2K3qFCdx2C9a4AHxHfjCULblH/CQ50+muVA7LqlBGPFr0Z8Ju\n/30p/FRRlSZOaVn4aBBCcqXpbH2reKbb5YGq25uNHmHKuoFUFRr1hS8goUBC\nORxTsn5kpYSdP6Z1EQt7hazPn64lzhszQOJQIyJBf4Beg/4NeWGpkyJa0N5M\nxfRkh+g9EUXMLIktuiHgL3I0nAF9LysfrWaRVXk8o7mMuMkIHMyTixe5y0ga\nVT0BELEwSWIqxGQZKmIVttxUHcJxK/+nymC6YPJJlYp5JsghWpKbHlP/Rphy\nJypiG4ME5un+DuCLjObdhwKcjv7BAkVe3YVOJG/z0QUCY36e8d9rmsH+1H0l\nkIrJCzBhK5+qR7W8+c944nuCMalVviXfZKNCPIihu+4SeRYeKKjlXm69Et1a\n5ifs/Vc+sWT3HO4YWP9C6ruGi4Ln86RF57nlSTLiarNDhjGUD6+FX/9CEt9+\nPcW4kOB5Jr9aAEIwXgdvFvMMghuK4BpKuaOELFpzXDAYoggdL+pKGBSEczYj\nF4PjiRARIZ5UrcWtSO4hvoKlAjCOZh6WOQyEkiC/UJSGvjBtaoaJZKj0ldGd\n4lvY\r\n=Noe8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCMprIwucFNsMENFlVOCreMgw6/R+avZky1TWGxMQFH5gIhAIZMELoq8NVagOJVGZbiR4+RSdOFJp15jkavCLcP97qu"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.6-beta.1_1528294938459_0.27765810299337845"},"_hasShrinkwrap":false},"0.6.6-beta.2":{"name":"sequelize-typescript","version":"0.6.6-beta.2","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/sequelize":"4.27.24","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.0.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.0","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save // v4\nnpm install sequelize@3.30.4 --save // or v3\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n#### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"390c18610d3eb3587d7dedd59eaf0395c11f2b50","_id":"sequelize-typescript@0.6.6-beta.2","_npmVersion":"5.6.0","_nodeVersion":"8.11.2","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-zKNcsCOYe2F3+BwwjcQJrDyc89ZTt8/CinpV+ChXaWBpKOSRmYvmry42jFI3tb+OTb2rTYPYjkX1Na4tKg75ew==","shasum":"79e5394d1793a75d69c34a5f56d62c4445d9002c","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.6-beta.2.tgz","fileCount":314,"unpackedSize":264099,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbabx0CRA9TVsSAnZWagAA/r8P/1SomF9Xkpwt757d/pSV\nyUkWFlfq6ueiz4UBblXHlR68ueMm51Xi4soHORq7/6HKJ8zg1gu4FP1EBrCq\nXDl3LowMdRa7f+bAimOZ36xHJeA416BPz/u1z1JK+tCIHdraelqe5drAJ6gA\nwIwPaBYPQVU0pu9T8UyVYctxui7xUgk96cr5G8ZMb3r850ZToigbR3Rie+sT\n5OXHMuQQOJj8sn0Lu4Z68TXyEelCwBrxEd0tDXvTaBVjs0gXpABFMTwyJdeL\nckzn6aZuy1V3N3tY6MM3k/BFId6NwveSmbkq2/gCRpcjqQWs8omivU5pwUMV\nSXn/BL3SdODC+V2gjqbLwvneGJzUQuk8Zf/VLB6VOc88Cbdil+J8gb6MKcEJ\nr2e4nKrvEvU3JrOCk0EHp5WZQgFWpik+9KYRI3NcchZai8N+BctTKbAY0xzI\nIqK1mIeX+P3lMjWc6NC7Af72T3SNd55vLjIPGYVHmutWBjXYoBg7IEDt9dqz\nJ0hLLuhOj5aFfwpqw77B9/p5/RSPCKX3mEjD11ZCJy4ltdGOgyXVbjLNdUPI\n2xT+eIHzJBtVnTBvyz8DcM3G/11qWv1F+7Un+IQP11lncq60Y9N02QWprwBD\nKIlgYc1iOIMQht63AX/jJVgxTnrAUkkHsUhFC0KfQ+iJQQ3BAgKojjK1yGNx\n3xjy\r\n=TKCk\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICekn2FJ3xWmaKTHHXGhibh7sPVKD8Hk0uViNV9Dml1fAiBaR8WRwM3YXDLJ0Xli+50ZlshKU/ZBfVSk/U5CDjuWmw=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.6-beta.2_1533656169024_0.0002678104759108457"},"_hasShrinkwrap":false},"0.6.6-beta.3":{"name":"sequelize-typescript","version":"0.6.6-beta.3","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/sequelize":"4.27.24","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.0.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.0","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save // v4\nnpm install sequelize@3.30.4 --save // or v3\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n#### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"fdbcf1885eef63714caeb8fc259fb6372497093b","_id":"sequelize-typescript@0.6.6-beta.3","_npmVersion":"5.6.0","_nodeVersion":"8.11.2","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-uVBhOU3G4P0tZmD0tDoGkRQGkYm4GxMcXKxh8s+qYCKgmJ3d1mKGLWrZKAB7ze4Ip2uofgnscN0hwLqMsyeMiQ==","shasum":"b7b5b341aa5d4196fd93ccfeb4660728fafdc6b7","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.6-beta.3.tgz","fileCount":314,"unpackedSize":264099,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbac2tCRA9TVsSAnZWagAAR8gP/jkMVqwOXBdi6tdRfIzY\n98oBV8oBVgOpirGUw2auKtsWa3zasHFRsJSK2MR86skz4ZZOYCWa+blAuqRG\n+dcKhIFx9f32c8/0VuU4LpAMpwnWtjVknz+5CmbLKViVal7g6/MbpsQNuwiQ\nTWrt5+XliI8/nHrmBrkJk6oJXFrt1CzQMie/nLCf5jj9m9T2mQIoFMDX1yUw\ntEYhf3ZjonCMulCUAAd3abcn/kX9n7z2n2HXfJFjGnqM1KwtUXQrIcE3nn7d\nv1u+bPFyoX65n+nEx2RJlP1ZVDN2B2hmBZnuIW3/6TnCWxt5MTzRI3f+wlY5\neI5JwqNuS4z7wh9gWrx+SlsavwbwwjJe1Ds4CklCHX0xOM6gFaZbDaElJ/JS\nA4t+ngQhj1ydJLzn9ezvCjyHLImIpIWF0aJptwUI7+usQ2t1HLGJIYvnvJRX\n9ONJIpNdcqsQWu2Bh3kDk10htiQArPmnBrOupGvWPRoGICLqnF64nHdKpfBF\n4zzNQIioIq2MaFOmFhoj7QOkQt5at6RDbTP6is8yvUpXIL3GJK9XdfefqFI+\n8uk0/NytuWRPPNUmdjt25HQBbg5PcbRff0Zt8YVl2OCxk+kstDLmRId42kwk\nDHiO1sAdP2vV3bXX3tSpCYhp5X/nvcy6IBt4tDhbXUs24vml4aw4tMeTkihg\ngaJB\r\n=YeXE\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDYI16HUJdzTIzZ7bfwwO/+pXwDkr16qMRKjQqRQzboNwIgRwpbZN9EB+loC8/59FhiUA32CsK7ded0WQPv11LDBn8="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.6-beta.3_1533660589142_0.4579757562854829"},"_hasShrinkwrap":false},"0.6.6":{"name":"sequelize-typescript","version":"0.6.6","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/sequelize":"4.27.24","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.0.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.0","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"d473cf3c79d78645353bc1817812bc8f510f12d7","_id":"sequelize-typescript@0.6.6","_npmVersion":"5.6.0","_nodeVersion":"8.11.2","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-WGJTaNuHyYwUM8itxZvMVLeNEb7xSjisbVN1Q5rxLaIf2w67Xaf1GX6Jb+9840bjcNPvMsKgC2aR88zmw7UlcQ==","shasum":"926037b542dae9f4eff20609d095cc5e3a3640f3","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.6.tgz","fileCount":314,"unpackedSize":264092,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbadGNCRA9TVsSAnZWagAAyygQAJrqWBV3bjJR4cS5AnZh\n/XMOFObtTYl4oEo3U7GIV9PwaeiAvFH4UUUWKMUUamgIzXOvh3BIQbvoiQCd\n/zPlviDIcef4aOJt5hHRVCRcH92DPeJYJdCkfMPq+gfORqwziBC5gVIy7xm9\nW2HSzdivoezVa1h4lbIgaV/Ijyqa03/6nDTyMBHcqswjqZHaDWw2RpowS0Dh\n82l5dlnOm4rjbqcZAk38juqC/Yz32UUzvyotuBgSEmHo7IGIUuHxIMdIT5y7\nG+baqp1h1VKjAoocEdUpdjVvqIjmTgIKCUa5W92lGScjlk24wLm+Hi7naYqg\n1vvx52KmoXMgfnofqGLN3nvGOzGlt15l0QLwyTN/nDXbalrsUK/e8bVInCwj\n6FEpn7chOYBiulbRNAPb9SmmoOEwkaT9+lCYjTyClkqlBhk2iEJROl4hoAxs\nRi7u8Dz8/n62DsoWBRU9QuZjlPiwkk88s4nU+YNfs/PkyBPYvyYoUXuGRaBh\nYPFEaIxji/zXTIX3zLOBvbpuyj1fHoQWEE1oZ3Gb8a9D+AEXmykzYcESrPRc\nKrGzf0VFJxCoGrql8+M2+X3plqfbdlCHjUMU2sPtNOz1gB0VlLoKuV0/8tDn\nYKlCf1C/fR8qZzvN+IsJV98KVXFSy8b7+Ce9t6KtHVVGcsc1kMybKMY7QjJF\nTPiG\r\n=sN37\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEh10it83Ayrhue1vdXTNZ+8AbZHF6x1CBsW1zqjdFcIAiBVODGVeRNHTBwJX+1Xx4mhuWn2tUsIk6TKPbg+cGmlUg=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.6_1533661581174_0.6712033895594498"},"_hasShrinkwrap":false},"0.6.7-beta.0":{"name":"sequelize-typescript","version":"0.6.7-beta.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/sequelize":"4.27.24","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.0.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql":"2.13.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.0","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save // v4\nnpm install sequelize@3.30.4 --save // or v3\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n#### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"8bf6c1d4ea43f6d453d28cc37e4dc5189cdeb31a","_id":"sequelize-typescript@0.6.7-beta.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-cRsYbe/PRLjiFjYV/6zT598zS/7MazoIOC0B8hkWsx+ke3Tm+Q8ybabaYgf4Wtert5AFAq+x0GuHDvGd4xqePg==","shasum":"fa92631d91a9148578d4c5316b47cab3e1fbf2c1","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.7-beta.0.tgz","fileCount":314,"unpackedSize":264405,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbmrFaCRA9TVsSAnZWagAAJZYP/0ihUhNyGZFl2pa7kjdO\nNMS1OcScECUm6+rg2BR4mJPSAlPZGmHd0Vo7o2Bm45Tv+cYbzu/JKYNjDZoM\nGHXw6+ikai3p3aQrkBt6Nl1A8/ucXMbD9oP51FvS8HdV8PlOMYGHJEMbYXy8\nJ8QrUFIQtXozZO5RViIu9kCdpbTA4lthRFUo5LZc5XctJSwjmbRI28qgYd5K\nV5zn+p2sSrC5IqpQzYR2cfRTGVtSB+oTBkQjxVLiOdAX1XYBQKG7mxgWhoD5\nN7tPM0/yqU2uwlD9NXHnSa8GR4kE8Bx1f5i/RHZL1hLS5g6NOTqpMXJSv0Ae\nxAu5sWdQrO03TseSrAbBDkBRI0HmEfmoJWlXb/OURoDPYPuk3AU+DmqGHc96\nfCt6YAjg+3oc8qVnIrhypoZpeh3hMgOzT/Dlw9a5vjLoZD8fY2VkMWA27zQ0\nTifWcFfKb4alWM0gY725YT4lQC3iEbwEhGRu1hf/IxopRKYeIkm0au8CLO2Z\nLJ6ZLug4vhsrp5QQa/cDtjjF5qmajHSlMm2zzyXtxsOwp2ihosHtoSrkbomB\n3ZZSIiuM7K1M7Q0KuFeZJh59pvZK5mUf+7g5UThLjXzFlZyEQ/5Oj80S1hQn\nhm+y6VSPvyQR47W8wvz81+ehfCqvchgA7q6ww69GyzQpyA6EKjO82Shbttoh\nxTQx\r\n=bNAi\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEThVIQhMHkZjfu1omdCzWlG+7KbRJFrbSrbLYY+tJFvAiBAVpEyNPfoV8/iRO8YwRT+CKxOyFRJeECcjIjqhjpRWg=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.7-beta.0_1536864601837_0.620842981718255"},"_hasShrinkwrap":false},"1.0.0-alpha.4":{"name":"sequelize-typescript","version":"1.0.0-alpha.4","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","build-tests":"tsc --project test","test":"npm run build && npm run build-tests && mocha","cover":"npm run build && npm run build-tests && nyc mocha","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.*","@types/node":"6.0.41","@types/sequelize":"4.27.24","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.0.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"4.35.2","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.0","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3 + v4).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"6226b75f92d75a07f421358bfdc78230785d2d78","_id":"sequelize-typescript@1.0.0-alpha.4","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-IxdX4AW3KpCmAx/BDcZZiXULESaPnRDjnCPitIiXSjnrKioJTcOJldkVVWLaIwLBDwp0H4mtSWNiold25k+8dw==","shasum":"418ff13b5966686922e72c1e806dbdb051e23303","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-alpha.4.tgz","fileCount":339,"unpackedSize":263179,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbn8ecCRA9TVsSAnZWagAAZvAP/Av8iGzZHOomuzRAsg9A\nKTujQSs0QpNl3EzJA5jupniQKD0Fttc95H1X515LtErXPCugbnsxpl4D8jDI\nxn4/FEGiJwusgnXJk0M0BtGYzsOys3HLHvpdQnwqdlB20Mb4oDmVrAsBihQC\nQ1gtFDOceHEaj8UtbWKTuKqoOplVH45Dw3u2rnyRm2E7rsHDyjNCeGNfxYH2\nrKwkNc0M86zp/cnGB6D9a/R7HnUkYt1mpxpalzGGuADSE98oiIoaRhekeBqi\nF0eorKaVdBLmsjtypmJCq+/MnGow3shg4k/3mw7QBaaKLO2FYv5zw8qrJrQ9\n4MV2IVBtMPsf/3ZwKiSxzzIp1uYc3w2dSV0Z4JlKGrXHqtuAa4oRlW99cOL8\nZl/ELxAr6ArYbFG6knvJdpGfQit8+/vA0sDONf5PGu8sCAqPLU6UjXRMJP3T\nUeG5j5jVuiCoLsZbN8/YesjJBCnd8mVCw5Bgo6knZjvXpd16c1ovTIufd0g2\n1lDmkOv4ZhCGZi3c1IiJTHkEVXkGgfXHNyjDMgPEdYQjw4ArfXlTeB/DeWcO\nV2tZ9wU//yaTBqwV6Zz8/6Ae47q5aNaYBlB+m1cUxkKBMmUP1J5eCndxYCiy\n8bb3Sre2RJBAqFFYBAkSLV1hAPw9c+RnV54AVUHm0D4Ll0Ixo14D+Q7aEREP\n7L+4\r\n=aSch\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAOmn8KQnqDcrhhWVt3nTpCzCRhQRazgGiph9lL1gmouAiARl/aMrZSizj0k3gnE5L/gJ3h3eHg3hQ5jdInClHk4tA=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-alpha.4_1537197979599_0.05798667971119276"},"_hasShrinkwrap":false},"1.0.0-alpha.5":{"name":"sequelize-typescript","version":"1.0.0-alpha.5","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","build-tests":"tsc --project test","test":"npm run build && npm run build-tests && mocha","cover":"npm run build && npm run build-tests && nyc mocha","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.*","@types/node":"6.0.41","@types/sequelize":"4.27.24","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.0.0","has-flag":"2.0.0","lodash":"4.17.4","mocha":"3.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"4.35.2","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.0","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3 + v4).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"886c444d6d065a0b1407b98f719d0a7ef09ae939","_id":"sequelize-typescript@1.0.0-alpha.5","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-AhxYlWPoOzAsK4JLfDUvD9iaBDiAn2K4FGkAdRP1iqRml6SfDX7oi/kV7PRL7MXnnEz6WtkhtFiMLESaVdN2hA==","shasum":"4d65784aa1c7e24f2ac83fefdb9d903b940c3f60","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-alpha.5.tgz","fileCount":341,"unpackedSize":263543,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb7DqRCRA9TVsSAnZWagAAgDwP/AzO4psas0ht2Es5G4HC\nMggZOz/AaHpL+aQc91+wHYMDvww5TgHJk0HvH6iBtsH+IRKzZQd7nLsBvxnK\nHfRXEdOSX4mENV/JXABGO1Y1/JDiJwf01cx0VYBGM9P/EGWJ3pK+ekPTBqBH\ny0TmKDTxjdGVK3+ahsyVYGFbbtZYEuz2eDadB6i6grHjpxqwPQAqqoHWMHR7\n1aFZLZBEinRHNU0qptfh9/7/cTAo9ln8rYip/X8DQF31SZqVUB1kiqIrWGk0\nyzalOcCa4Y44VLgHov0B3jOcFLp3305R8olwTmdrVp5+qnXBECcyDxNecm+T\npv5mO6p+39quQ4AOlLPUfQ+hutuzIu+kOLBSXa1kBFegPReXng+LYxqFwJtQ\nxEe1lVl9nwM4xDe1JV+0lMKtmgfX9D9Hwq3dg/zdfb6SA9CWlB6vW6C/00jg\nvp1rQKjzbrhwzqiDu60fAuUOs8v0puqakgFWnYubqZcV4kaXqGI8GDLsrd9w\n/xGB4a1XiSCBJKmeLNXpbeiJv67hrSX7zVYnMV5vLek+LayOWmtCJVQ2jB/6\nBhZ2fzR2Fju9ZNIxqIlnysuN6iMGnNayBmtae204qi+9up0B23JVSax30n6k\nywZiVA6t10D9aU1KVn8tndcc/JBKtlBRNnZsOjEx5ufkmPrgSdn2p+ILm1lY\n9DXP\r\n=COWG\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDzDlR1Y2XlRxsvu184+BBHk9EpWsDhgybxOLANLefJEAiEA8+hjaxjvTdGFZHgbrdsbNzQOkp0ahAwSJTyPtjTbB9E="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-alpha.5_1542208144150_0.807168295461522"},"_hasShrinkwrap":false},"0.6.7-beta.1":{"name":"sequelize-typescript","version":"0.6.7-beta.1","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/sequelize":"4.27.24","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"3.2.0","moment":"2.21.0","mysql":"2.16.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.2","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save // v4\nnpm install sequelize@3.30.4 --save // or v3\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n#### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"ee037349c2d83927d72c75c0d7c0fbe272f057f1","_id":"sequelize-typescript@0.6.7-beta.1","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-OjyPxcnPaM+gxfY1FeWRVEQrrd0r7k5z0Lt4l9Y8taCHTjom8o68+nV4sP4Uq/W84DO2ZlUXx8+WSpXZgXqNGQ==","shasum":"ff7e7aeb7547fadb3e464cd319ad2f09325b83ae","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.7-beta.1.tgz","fileCount":318,"unpackedSize":266347,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb7XI7CRA9TVsSAnZWagAAIAwP/jNfktLCN8LOaQFAM7ZU\nhNCCFHnyjxdIQYsEMaasSZDYam3SINVz55iwS//fdSa1sjJGSTGZUTMhvGwl\naNe3Mf4t19rRU1GdLJ6VDZWzfCHZ2ht3TGWVjn+8GtaQF4pAkQjNoAXonbVT\nzobuPrQW4ZZYbOFbA47cE6K6XYDja3Z0ce006IyrBYJyLm7ROHXZCqDpnBvW\nHSeD8sgAfUMfDJfaA/BSwRFWOfvIcSdb0xm6jUckJ5tb8JV6Yl7Cbp7rQnny\n1zLVij4KiwdFU2bHR+Bf/T+Y56O4HleiGA9m+UQqjgTLRQXZEpJM+uoszuXv\nakSBQYSDQ2DntIk/TNFTExGb1XxTYoeBQH2MGTcTFJZJcldrBYjJNUzHjakC\nwPw+beADXczZzMl/sNxoZ4qd1tLZAwx7Y5FZ/rpy5MzaOMUZ24WZc2Kf5nYL\nTZiv1OgM4PUAcavORSYGctPMHgL/smFyyTk+h42I9FaMHwS1dtYojvi0RflR\nLO4GruRhBHK27WgJe3Z83LxBTsWVZW+8/yZMbnD0GZJYiw4lEl/6bdX13SjQ\nUbe2UK0vg9VPD/wBX+KFCINUZo6r4mTN5LCBlhmPZNAxChWqc4WbIoSkE9uY\n5Vdy8/MhFLiMXOwPpo/+9zDCqdSMw2PHR/kqTxm6KtGEvwYiEF0vs2PWOe2x\njbfy\r\n=Cgtd\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFDleIX025RykhnAVdPxecFKKpn2yiblRhcyW/afJTzHAiBz8arS/uI/9PavctMVoMjvLsqpAYhteFOcpJzNoZBEBA=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.7-beta.1_1542287930460_0.8609052637695354"},"_hasShrinkwrap":false},"1.0.0-alpha.6":{"name":"sequelize-typescript","version":"1.0.0-alpha.6","description":"Decorators and some other features for sequelize","scripts":{"copyJsAndDeclarationFiles":"copyfiles -u 1 src/**/*.js src/**/*.d.ts dist","build":"tsc && npm run copyJsAndDeclarationFiles","test":"mocha","cover":"nyc mocha","lint":"tslint .","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"@types/bluebird":"3.*","@types/node":"6.0.41","@types/sequelize":"4.27.24","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","copyfiles":"2.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"13.1.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"4.35.2","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.4","ts-node":"7.0.1","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3 + v4).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Repository mode](#repository-mode)\n   - [How to enable repository mode?](#how-to-enable-repository-mode)\n   - [How to use repository mode?](#how-to-use-repository-mode)\n   - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n   - [Limitations of repository mode](#limitations-of-repository-mode)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Repository mode\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions. \nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\nEnable repository mode by setting `repositoryMode` flag:\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n### How to use repository mode?\nRetrieve repository to create instances or perform search operations:\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({name: 'Luke Skywalker'});\nconst luke = await userRepository.findOne({where: {name: 'luke'}});\n```\n### How to use associations with repository mode?\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({include: [addressRepository]});\nuserRepository.create({name: 'Bear'}, {include: [addressRepository]});\n```\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n```typescript\n@Scopes({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  }\n})\n@Table\nclass User extends Model<User> {}\n```\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n\n### One Sequelize instance per model (without repository mode)\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple \nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"20fe3c2947cff63d56ab7745995eef7cd933db60","_id":"sequelize-typescript@1.0.0-alpha.6","_npmVersion":"6.4.1","_nodeVersion":"10.15.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-kQCydtQ6jAF5HTePpYTZjqAGAlJ9q6KHBJZYkjksoktzwSI+WqBgVncfvd+ZPTQNLCdOrXhexJJLGIcHIBJ4Ew==","shasum":"4d0082fd4f8b6ecb18acd60667904cbb7b4ee0e8","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-alpha.6.tgz","fileCount":350,"unpackedSize":335329,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcKfzvCRA9TVsSAnZWagAACLEP/jQ7GhPpqCry33jkevCf\nXSgacYtqfdKB01L5rOdMr5vg1+T7IDCWFyhb2n/lOE2g+Yr3DdLZJDXddvgk\n9wrUqnLkdaKuKa/P3RjLn6At0Ji9D+JvzqZh9vaQjf7jB5gFPzrb+7CUSXNN\ntudQianYTtrAU2EFl4OF9XxHt9Kzj4NMRKGqX+qWeABnJzTahhQni08SLeaI\nq89bXuroeI73nIRu2CPWPi2pDGug9nn+xIyP0D7rWrhltlKomwXQqnxlwauh\nOHt98/+J3A+MvZLH/XPUuTTHxfPTcKIMgivnIVWqCu0U/jKfPJicW1uBfoGg\nKY45V8/lRmotVTo678vU4gUcXM/8wrRKtwGRTGriIxKIXIZDb88uQLyu2s/J\nNeeLkFpzapHSB1TZAOL5mofC1qRxgAPztfy+rbrxF1C7GABF+dTY2vIsGs2+\nNLzPORirDuj7VtsQhPiuiy6iVYMDd/xzRxyO4xzej9TW6DeN9Scs8dQd3eBD\nHrRgI8NEuVF4G0D76DoXo4EmhlOpyg8wlf2w8YuBOehi5cSqmxRlEnhQlwjz\nM/oe89Tfsb+dEFrMpmIC3ZaZ5ryWWdN9gmyxcsEneCJ0ZEfy9yVCC0cPrIY3\nUHLHre7Vsejme3PU+yq7NEN1DHesPNqM6ozTkIgSd7b0palR3NOf8MFnHVWI\n7sGA\r\n=Mj1z\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC73Qa0voonCc36BUFVrZw8Ls8jlci73MYLJHd72LfHPQIgJ6FWfW5OW73dfgeZPAmRhnasYoBTvUe9ZCZTrUiSEhk="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-alpha.6_1546255598828_0.4783508596510375"},"_hasShrinkwrap":false},"1.0.0-alpha.7":{"name":"sequelize-typescript","version":"1.0.0-alpha.7","description":"Decorators and some other features for sequelize","scripts":{"copyJsAndDeclarationFiles":"copyfiles -u 1 src/**/*.js src/**/*.d.ts dist","build":"tsc && npm run copyJsAndDeclarationFiles","test":"mocha","cover":"nyc mocha","lint":"tslint .","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"@types/bluebird":"3.*","@types/node":"6.0.41","@types/sequelize":"4.27.24","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","copyfiles":"2.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"13.1.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"4.35.2","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.4","ts-node":"7.0.1","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3 + v4).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Repository mode](#repository-mode)\n   - [How to enable repository mode?](#how-to-enable-repository-mode)\n   - [How to use repository mode?](#how-to-use-repository-mode)\n   - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n   - [Limitations of repository mode](#limitations-of-repository-mode)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Repository mode\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions. \nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\nEnable repository mode by setting `repositoryMode` flag:\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n### How to use repository mode?\nRetrieve repository to create instances or perform search operations:\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({name: 'Luke Skywalker'});\nconst luke = await userRepository.findOne({where: {name: 'luke'}});\n```\n### How to use associations with repository mode?\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({include: [addressRepository]});\nuserRepository.create({name: 'Bear'}, {include: [addressRepository]});\n```\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n```typescript\n@Scopes({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  }\n})\n@Table\nclass User extends Model<User> {}\n```\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n\n### One Sequelize instance per model (without repository mode)\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple \nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"423ce95511a6d28efa122875ce22fc9838fdf149","_id":"sequelize-typescript@1.0.0-alpha.7","_npmVersion":"6.4.1","_nodeVersion":"10.15.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-l2OVmjHHkuIQX8z9Yc7j6ezIZSWla219/9qbBZHp9P/7k7qNM3Rsl2k9wWd7sRj4LcQ/duuiV335EmVxHlOJ2g==","shasum":"8cff206d8a5f1af7af8f63f49fa5ffcaf6a3158a","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-alpha.7.tgz","fileCount":345,"unpackedSize":268070,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcKh1UCRA9TVsSAnZWagAArhgP/0cZh9Knt2wMV0ePnIxd\naf2DG5fYzg3nudTuqBqrW6AxfDogF3H4xq+t3V55T3jqbMr/UKHxDjqBf4Tz\nXTG4WteE8B2GQ6dMDP01z4hni2sFZEOVp11KvWV/CkLe0fgoVUWvmrZb8Mqp\n33vm1ayA9neUQT6F8iOV78Rfvw5vqa+0LNvo678Dd0+fHOV1Dgq/yxfq44yJ\nGx2PKX95IjJfhArtSpropesF0I5Nw2dtXRnajHMYnZdNhQsIvoWlM1ZkZ5Mi\nv9O/jxC2iGOxAuohePVGIULUgHYnF/rN2Rv1m5VfjicIrsHJ6eDsxRgQSbdk\n8j1PhW4V09g2hqQxBWrm29FyCostUO15mMNCfyz3DDjEe3t+VJw6uBKWqUYY\ndLbjOMSSRe/S3MTedXIImAgcyBo05+kFwCDOwdBafwkr670AUCA0TKKo4acp\nRjSQWcSN3bdDnhIPOAxsiif5RieaGWkmbMTn52YTLt6erlg2dcAB4CEPUC+e\nwNCnmT7avQ/Ts/ZlkWYBTOV7qfhIwf6yJlZZzs3qD2QXQEU5mBsnvQWJLtMs\nkX2uHUbzZvv4vLkNWVqORowjZ0vP+jqueEYySeoNG2Q3/51YwOyXd60jN14C\n86JrPyiWyQ+QFA/IHJOBlVGTFROnr0dmbVbHaqI6sotj7Tl0HdtnnG+Ke81n\naSlf\r\n=Cbkq\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCEa0qB/Nj0Kqpv14xQrdomgWzkpGRld48tP1HV+tipZgIgD0h5+IS+u4hkxlQGzS+fuaRlgVCLcMp9Ky+YSlP1bdY="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-alpha.7_1546263892034_0.16715020844982176"},"_hasShrinkwrap":false},"0.6.7":{"name":"sequelize-typescript","version":"0.6.7","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/sequelize":"4.27.24","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"3.2.0","moment":"2.21.0","mysql":"2.16.0","mysql2":"1.3.5","nyc":"11.0.2","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.2","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib/**/*.js"],"exclude":["test/**/*.js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"e74e149d4b852e13008dbc6f98a969c2cc02ab73","_id":"sequelize-typescript@0.6.7","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-ae21Gq9VOVXlIjnh2vLdL42Kev6r4LC82xOQ2fXo0lHzQvjFeH8/GaWUlpvYv57AOgc+ZnElbYFbSLKdT9ue0w==","shasum":"372be979cbae060c554fdbaf2c2d8c93a0283303","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.7.tgz","fileCount":318,"unpackedSize":266721,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcPhOHCRA9TVsSAnZWagAARqUP/Rd2vwKw/Wqeglzd75sn\n1cbc4yn2hP0CIZ3Wnp4Sb2itYEEGtx5MiJjUXl7KOhZru/v1mFcrwF8pyC97\nn7alZnvDrJzqLI9iOKwJ0MBlPdDv3i7pJVHIO2vPYEZqzGBB6ufrTdIvabYV\nyN68J5ac2QNoEJn13QVn/T0bVlu+591w+/1QUisLk8t8oW0qckjuRRU1mMB7\n9Q6Fq+IDLNleCxOPpt8dlm80/YKgfeR96eX+cjqZkRQ3oi/kWEp2atIq78/O\nKZ3FDgoD3wbMv2w6C9QZCVkEFxGI3xjfu7yZ37goIrQd+4dl0Pk3d1IR3V9g\nFYhfIegD19MbG8L17VaBA0tFnojQfxs9AwFNTViu3qRx13u1mHWfFCBu0+Gw\nL8EUouOD4OUk7XdU27491O9I9tmyblw3tciEM1jkTiMRxOlPPOIw49/t1i37\nLHq/YBDCOdwrA670uEyjUZm/8nKuv5Jxnk51qYV2vB5x+RBwlbs7aDvdXRMg\nt8R3eI6b28tOXC2HAowkDd0yczY27O7A/ut4+RyCsWNpVq8btNjRazMjnObS\ngntMb0TTN1LvDjIE5glyttg4Mkat7Lb5as47r9A2ElWjgCcTxSdcpjlTqMdx\nj0wfGm+1c6cH++7TrCQF4k6UAArmeUsWI4D11XzFxHgpLS3wY1MOleHfskY0\nvRj4\r\n=5RRA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCs2FVrVHJG5Rj1eBcqUVmyELIpaBpZ4DB0lp67nUudJAIhALlbxeGfyRkzKQMetdJMunSxCkZ9h8puZRIKLIQW86Ke"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.7_1547572103097_0.9125898174503921"},"_hasShrinkwrap":false},"0.6.8-beta.0":{"name":"sequelize-typescript","version":"0.6.8-beta.0","description":"Decorators and some other extras for sequelize (v3 + v4)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/sequelize":"4.27.34","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql":"2.16.0","mysql2":"1.3.5","nyc":"13.2.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.2","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib"],"exclude":["test"],"extension":[".js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save // v4\nnpm install sequelize@3.30.4 --save // or v3\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n#### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\nWhen including a model that has multiple relations you will need to use as property:\n```typescript\n  // In the class \"books\":\n  @DefaultScopes({\n    include: [\n      {\n        // note as with the @BelongsTo Column name\n        as: \"author\",\n        model: () => Person,\n      },\n    ]\n  })\n  \n  // In a controller or outside of the model\n  Book.findAll({ include: [ as: \"author\", model: Person ] })  \n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"ef8fd4309cf010b80408bb571fde1b0fa2cbcd05","_id":"sequelize-typescript@0.6.8-beta.0","_npmVersion":"6.5.0","_nodeVersion":"10.15.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-qLIr3x0ui1TFlcuG8mTnJl237qvjd0Zv46PGa4Nd/+wczfkCc0g4OxT2johB5muWMGJitKVBnbxfxagVnSf3fQ==","shasum":"e400e5b468e0f42ad8c82ba2ef124c7603384294","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.8-beta.0.tgz","fileCount":318,"unpackedSize":267238,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcUYVVCRA9TVsSAnZWagAAlocQAJOWloqzB72VKVtTkt/m\nQFck+EBDXDJRh5KKlf+zWZQPWpTxNPef1XT7sCGDv3p3KkS7IQGbPUI7LE1p\ncgvUiCDqSaYWk8MhF5q3YCran3kunwfPi9fk/vOqPSpfiEZpgoQ8K1r2Hmez\nXkDHDj8EOkbv0vFhbYAE8e5UaJNt2mbxSLf5wPdyv/COx+ch8lnqg99ZgbFb\nTxzGpweQ+7Zn6fE8nGeRDLueP6NZbtCan67Pqe0nItuKGrNstCLUrkti9+vY\n4c95l3p/ZGoyTsQP8DPPJhzxu6H8CYiZAdxOitUyi30WVqYS2+wyPiI5fnAP\nNSk5Ig5f7gglwjKFENEstFjnZRVNutuLp3I9/35AD0DjuVK9nnKHi8Hkxrvs\ntITqvWF0WhagiQ0H5hEvpLKJKPC41O24Fpvm/NvlhyZkC3hZH27GKpNs9gqz\nxnrKdftHESpfVNpoBsVTXSdDXswdiFlBMp90HDJNrTxDGKtIMe2XdijAJ38i\nEslJWFAJhdrD3Y3zKdXcR4rWG/8Tpa0E8r4xN4oW90RIKCt0jxlZ6ZIVf5k4\nQDsQHbOpvyyWqS3FX/nSpgEbVyZ0f9DNLeLT4Fu6ARJMP4ELHuAL8TLjlOMB\n8VBZRlbISFjhzzWfoqglZvwBSBd9S3vg9rgbK76n+7O0HAqvbprN5HCapb0L\n/pYI\r\n=SOPE\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQChk0eFz7hIh7roQAmxewOK1xfv9jYTk5vaItQ0PphKOQIgY4F3wLOkzyeMU8TlSpTXw+cMLkU6G6QsFeVrTsVtUx4="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.8-beta.0_1548846421051_0.4771754929585299"},"_hasShrinkwrap":false},"1.0.0-alpha.8":{"name":"sequelize-typescript","version":"1.0.0-alpha.8","description":"Decorators and some other features for sequelize","scripts":{"copyJsAndDeclarationFiles":"copyfiles -u 1 src/**/*.js src/**/*.d.ts dist","build":"tsc && npm run copyJsAndDeclarationFiles","test":"mocha","cover":"nyc mocha","lint":"tslint .","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"@types/node":"*","glob":"7.1.2"},"devDependencies":{"@types/bluebird":"3.5.25","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","copyfiles":"2.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"5.0.0-beta.16","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.4","ts-node":"7.0.1","tslint":"4.3.1","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":"*"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"2f17d05a83df240ca1ab5b0a982e3968dabd8440","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3 + v4).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Repository mode](#repository-mode)\n   - [How to enable repository mode?](#how-to-enable-repository-mode)\n   - [How to use repository mode?](#how-to-use-repository-mode)\n   - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n   - [Limitations of repository mode](#limitations-of-repository-mode)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Repository mode\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions. \nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\nEnable repository mode by setting `repositoryMode` flag:\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n### How to use repository mode?\nRetrieve repository to create instances or perform search operations:\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({name: 'Luke Skywalker'});\nconst luke = await userRepository.findOne({where: {name: 'luke'}});\n```\n### How to use associations with repository mode?\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({include: [addressRepository]});\nuserRepository.create({name: 'Bear'}, {include: [addressRepository]});\n```\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n```typescript\n@Scopes({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  }\n})\n@Table\nclass User extends Model<User> {}\n```\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n\n### One Sequelize instance per model (without repository mode)\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple \nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@1.0.0-alpha.8","_npmVersion":"6.5.0","_nodeVersion":"10.15.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-C/czfryKKJv8sDMcBNgexZwPYpmMGEx9mriTusNPtt3HwpvGcaf+k6Bn/Hiy4ssuyJUkHJMuTty5XrDHkUcKyA==","shasum":"25d2faed1807c028780adc180edb6d07fe5a1bcb","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-alpha.8.tgz","fileCount":282,"unpackedSize":174844,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcbY6eCRA9TVsSAnZWagAAdLkP/02kEyyM1vYXUarYYT/W\nzEtYTIwzernKmzCt9fN/WDuLtyRobtFqnk6a9WaziGq81E7NeTyYE2d5SLhE\nGtzeoRVxJMc/MLSjmZa6A/wjV27V0m9fKLBDnhl5KE5WF+7miMLN36v667ZH\nm0vIn06/vwkm14AOzbTPdnNKKsPw5g4CXSmvqlRuONCK4MIoPjjVb7X+jUcF\nUnEHypfcykGJEn1gcKggopI9t8WnlGvy4b1VfzvExLHjjrM2Eih466NZ5C7n\natLIbz7qfepvrrTeF5lS9fpUILjI1EacBEL6joK6eqk5HuvBs3wBmgk1Wsa7\nENbh/1kGjC+4iK3vHxsSAOu+0yHyy0uy5HMRcSJxHwH5c4rONnjUO/ICX5h2\nMWmQkVC4JByHgjlYdCbUgfyljsE2fXhyuW+kVCJx68xXGZfsyX1qs1wW42Np\nggzy1J3EF0Nl1I5vgfhOKenQ4umGUJ5IZUGXkWZQQnp4kpsh11gRPQVjw+eV\n3HPhFdWyfZPm2ScVoaUlXB7va5G/GGS5dCaMj4ETgDKAtlB1oVZ0T3Du5u7c\nwufoT6aghs3p5TAx90rI3ylhWqGzsGBgQ/Xsunc1ldvxChNfUTDDiOqjAkKp\n0lFTxQ5E0o5tZO1fEXO1cF5FNV6HwBd9lm5ce9hEBnMhamuzf4EtyJxcA+KC\nWZsJ\r\n=hLvM\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCRx1jwdfKfbH5yZrnJo2O+7j8Elke7+j+avoyFrrgwbwIhANok2xJM5s5lFitRxXRkuxrgt8nInVJi1Ye3gaB1fh25"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-alpha.8_1550683805373_0.16597797271607284"},"_hasShrinkwrap":false},"1.0.0-alpha.9":{"name":"sequelize-typescript","version":"1.0.0-alpha.9","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha","cover":"nyc mocha","lint":"tslint .","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"@types/node":"*","glob":"7.1.2"},"devDependencies":{"@types/bluebird":"3.5.25","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","copyfiles":"2.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"5.1.0","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.4","ts-node":"7.0.1","tslint":"4.3.1","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":"*"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"7aadfed7062a1b914f2ecea63945b6222a68c2e0","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Repository mode](#repository-mode)\n   - [How to enable repository mode?](#how-to-enable-repository-mode)\n   - [How to use repository mode?](#how-to-use-repository-mode)\n   - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n   - [Limitations of repository mode](#limitations-of-repository-mode)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n### Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n```\nnpm install sequelize --save\n```\nand [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install reflect-metadata --save\n```\n```\nnpm install sequelize-typescript --save \n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Repository mode\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions. \nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\nEnable repository mode by setting `repositoryMode` flag:\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n### How to use repository mode?\nRetrieve repository to create instances or perform search operations:\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({name: 'Luke Skywalker'});\nconst luke = await userRepository.findOne({where: {name: 'luke'}});\n```\n### How to use associations with repository mode?\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({include: [addressRepository]});\nuserRepository.create({name: 'Bear'}, {include: [addressRepository]});\n```\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n```typescript\n@Scopes({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  }\n})\n@Table\nclass User extends Model<User> {}\n```\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n\n### One Sequelize instance per model (without repository mode)\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple \nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@1.0.0-alpha.9","_npmVersion":"6.5.0","_nodeVersion":"10.15.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-YG2jClu1cILs/lZiYSpWwTzUKfC19aiZvzt1b9KIXoUX/ojwL2oXPMs+n2AGhdGLpIvoj6TBK7fNfeRvnHJnxA==","shasum":"133310f2e9b4b050a0b45faa05b0efe3cc221408","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-alpha.9.tgz","fileCount":282,"unpackedSize":175301,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcjjqWCRA9TVsSAnZWagAAkkIP/Rfwd5tGVa+YAcuxfiaM\nkqle4OgG62R2K3ecBXfEoQNpwOtEIh2A9b7dlsb5StDHNXGEVAp/YTzz1cUK\ndoERSj7xTOn75rWkem++1UrhSPSDnP5YlMfncnsU1r1FXolXYIR+hVBJSYWk\nnokhOGfRYDBO1T88QYzebcv8xgPl8HLzuTtC9rQXLuByOQQ9DvDBlmthjTOE\naN1nZgUGkdY7Hsx5Jwf39OUADak841Lp4fEVPrrZLZ7TabbTQhoxcZAjJf/T\n9eWzmWgfr7FLxeseYkJbDoM6jVUvMcLIJFFHneLx7+Msd4OTee6fseSdlCNb\nQKVQ7WHmRnbuVHH/aLyFzlTVgx5vge6KHOrjl/5kN+bAFNvBFkzKBZ2Hgd1k\nMuDYDLUPwF/Ip5Insimb7MIb/LOiIBmE3z77hRFgCckoUqjZ1auGmGEEblmu\nX8tast7U3KtAeXxvRdbKWPVM4COApdf7YomCqaBz9CdVtc3cFUIIPYDEapSG\ntiTT5+rLWlo1rql9PzjMFcN4UmY5WkT6EE39S6J8P027oD21WfZ3Llp6qcUx\n9LGnXOhIUceZcYWEjgUKwJzqBn3r6MQLjXBd5PjUU53TGOh0uNsst6A5UBM4\nMydBjiKqhQMvIEwLtaki7BiciO/nBzPQnbYdPmsdjwM7RAfitkdgP8pdj6Nz\nEpsc\r\n=sTnl\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFv0AbY6Jkg4obXtDSkw5mlKDaiiMlHIUi8jeHbNnfp3AiEAn6b1Ce++6v/ssQmeRtjNgZ32lyYRerLVBaDuOXYwRhQ="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-alpha.9_1552824982129_0.9704698954428128"},"_hasShrinkwrap":false},"0.6.8":{"name":"sequelize-typescript","version":"0.6.8","description":"Decorators and some other features for sequelize (v3, v4, v5)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.18","@types/node":"6.0.41","@types/sequelize":"4.27.34","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql":"2.16.0","mysql2":"1.3.5","nyc":"13.2.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.2","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib"],"exclude":["test"],"extension":[".js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"6056586f7a9c1a7c24f214eae09d1faab06b0698","_id":"sequelize-typescript@0.6.8","_npmVersion":"6.5.0","_nodeVersion":"10.15.0","_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"dist":{"integrity":"sha512-mJqXeXwEwpFtr66aTWiNccp1itlunVqafHNWMzkoLDMHQVZ3+gEIeMFe2Pv2m7FoEYa9G/5tnM7pSZ79iksldw==","shasum":"29c7ee4e14f0fdb1756f8d9915c30695975b7b8c","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.8.tgz","fileCount":318,"unpackedSize":268185,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcjlQXCRA9TVsSAnZWagAA754QAJ9iejp2uKwND2LAjvnZ\nBpaK8ROk7X06o6HbnZV6UGmix+7Qss0L//GvPR6gXSnJiMRGyNBAPdrS4hmL\nw09DhH5yZWK/fPiscbYFQABp+NjZgva9McpTQLtvN9W/2aJLdiir6Ic1EKw/\nkoQ9EJK3hoA5I9N8Yy0tgBDoT/WJbY8DoPS61FeCCeDRwFowsB2Xoafr7JEM\n6FsGYwtz5ViY0l4K7R8ETqhz+CP37qkDqHXOAbfvdwjsboMRlF6vm1hG0dR2\ngsFzjOQyA23L+7CwHPj/etj0cerIC1OXPVMbMghoewOXUdjLVw5jWI8S5PRB\n1Mwcby728FKxMh7oAaORxbM35dftPdPIgRuDZ6FZTOVFUIExHDy40fOpXaYt\nmqU5pNs9ShcqoRoAYqFXn9G3cywxRAIwlIDL/gAQ2kWBqrvgPNfdktt5I8OD\nsEO0itAqTrRTLfZykQojdLRccUOwg+sAUQcYWOZHFI0vUaK+FYOU1+i7kwK5\n2AGQjeJOx3791l+djQQ5KvJlYvY1vzKox4KizhybpMpeRjUp635cwCRGu9xc\nMCpA+GK0F8PZrPHhkpRDmG00fvLpnEla04oRhCOpGQ5+ocfyctk6MCxIze57\n7Mbau924NAe/NynNnOOAKZjLqER1GDClXEf+KVjVG+E3QpkP1YD89/LccNg+\n0eXq\r\n=MWXS\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIA3FtgUgivfXh/3x8jjmKW86c+V4p9R0M49cuAPtl4d4AiAKzBSXtf9+wsI4S4PPLxphLrqnEMT3hFBbuEvt3/k/wg=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.8_1552831510793_0.04299752194878059"},"_hasShrinkwrap":false},"0.6.9":{"name":"sequelize-typescript","version":"0.6.9","description":"Decorators and some other features for sequelize (v3, v4, v5)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.26","@types/node":"11.12.2","@types/sequelize":"4.27.46","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql":"2.16.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.2","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib"],"exclude":["test"],"extension":[".js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"9b0eb42700707ce6c4879de150a614325db4dae3","_id":"sequelize-typescript@0.6.9","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-8A5gi8BpKx4Gk9BjD3Dxrv7Ps/7PpZuYfoVkQXNMuL9a4M2d2fKZiBLurSA/5KmNgdVrLKKRkyJxghBpFR7tNg==","shasum":"89a35b7e8e0afd6be74e781df5cc06c2884ff8fc","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.9.tgz","fileCount":318,"unpackedSize":268591,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcoMHPCRA9TVsSAnZWagAArwcP/1QrXk2q/U+/1KmO9teW\nB5QjxevM9zxTXU8azAlDWNdewzPnxXbG+ahaM7FVa7ZtkB/33yVShxLFd2qs\nJo2k3o8J3+Ujqu5uks2TaDpghePDtZVwtS79CJru0s9Em63zrYW74oxFGjR6\nDwTUDsGGDUVV7slI05NZKvYFLlK0miCUT4VnsdQUuvP+F6fQapxyjxHpzFQd\nOmMYoSkDfzQRu99/juznB7GYjZutq7+r9pxrUrb4C67HORH8uTAKUl2wI7XX\n4pbetp1k8820Gf6seoufQa1NXi2KRsvZrmqzvF+ayaTyqHLlh1kLp2xUlMnY\naTZqfC/iCYLZiKKtom5Elz2WqD69SAuu9ge5r62BTaevaEF2NRtc7URYJuou\nmZ758kpmbN4QMxaES7pTrLDjRTUmg7LZoMytWHjC4BdLixjU84B6z5LOxWa7\nQKFdfTLb7+FfnU3uT3ct9ZetGSD/qbcYnqAq8+eougbbL5BKdgvRmlgXHwmv\ntTfxP0g/n/sr3jH45rkm9mKik2zChq5O7hevViNKsERypkXfmnFYXgYkvSLm\nn7C/8LUf8AepLLkyA2p2TdI38T+HTJruDmtl7LEEqjiybK3TNzpJ2I/0k6BH\nqHEtoAHIj6rWK0nJngZujlXPiY2TmX+fg+stZzacdu6uFgPpVu2PoeBnr0hl\ni5FX\r\n=IT8d\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIANeJu2btel/0ZwMVgqX4x8DKoQlAAauysB6CZYUIWSwAiEAw4/6QuR8WWrvQz1m6vnOlvfusMvo4N1ehgCj5tXckJc="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.9_1554039246085_0.49229253541252804"},"_hasShrinkwrap":false},"0.6.10":{"name":"sequelize-typescript","version":"0.6.10","description":"Decorators and some other features for sequelize (v3, v4, v5)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.26","@types/node":"11.12.2","@types/sequelize":"4.27.47","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql":"2.16.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.2","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib"],"exclude":["test"],"extension":[".js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"e7253bbb09e9315cc27d744b742a156644742507","_id":"sequelize-typescript@0.6.10","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-4RUC3A+sLJgoLDevEVMzM+LkAWRgQ3aUm30vxi2pbCxDYzKHfc1RmwVzmSUsr3+qR2ZAl+tWsrSYGnYhAcgkqQ==","shasum":"1f2f230223462685dbb2a0959dd2fdaf21e9c700","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.10.tgz","fileCount":321,"unpackedSize":271488,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcs3RUCRA9TVsSAnZWagAAtRwQAILrj+p3ViZGhHSeFNo0\nsYsF++qF/oVd4rOHoHtF6dNhGOffIKHqh1SviC9RvWORYSkRtsomXJf7WE41\nUQjlqkhN/eellwpwrYDl+Sp0vVDIGnVq/CTe0fuZKTQIKrfJzQHLAqpID0up\nsMwjWWaBaXEk8Occuc9uDMleX35Smx5TAiX16D7PtRd/OhCzGG1hVSODCYr3\npIq4A6jDigzH5lad4h2FRs1jQBx94r7hNAuGpQqRwloZSgMI1kAxuQFdtWyX\n0JPUR8bxDectOpP/BuSSKb1WLtepED+Nc/y8KIEBhF1nO5FyMnSih1M+hvwE\neyegnghir+hKs49dLA/OAcei7yreU2oQyBGs8XnHGeby0Qu8B2+ZIGY/JUVV\n9NVMRtSvvDlrN75eEslBt8ZEOy9vJTo5m5aAjvBO+oO1ViqGC1f6Ov4U1jix\nu7F+aji0HWjmI5F0YuiWz2yAtWRVBa/zdMuects7/nj9y22Z3IhTrihjzDZd\nyHb/+/Cax4HLlJHSSCfBv0gJ5zL4tPMxWRHebYWSAE8L6qKsX+LTSBzobNty\ngNoLKbZN9LOjfySAZ+JkiB0JpaJ6IDxjS0+ex9qpqnqh0o4kp4hpKYIE1WLS\nKm0fWDRc49RCj40okKDllE4szA11+hoDyUVoeumIi48dqieuJ3pWSzbYeDSQ\nscg2\r\n=zVcQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCjwPGOJEOm4XQrDYuNr5cAuODAbiP8Yf9Z8pqWS9tN8QIgM5DJ/zHZy1URmbiRfV+DyHpA3dJ3r7ObtGN4oW3DHz8="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.10_1555264594877_0.5817924582920513"},"_hasShrinkwrap":false},"1.0.0-beta.0":{"name":"sequelize-typescript","version":"1.0.0-beta.0","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha","cover":"nyc mocha","lint":"tslint -c tslint.json --project tsconfig.json","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"@types/node":"*","glob":"7.1.2"},"devDependencies":{"@types/bluebird":"3.5.25","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","copyfiles":"2.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"5.1.0","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.4","ts-node":"7.0.1","tslint":"5.14.0","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":"*","sequelize":"^5.1.0"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"a82212492769ca89c92a7376cbf8ea3937d2acd7","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v5).\n\n - [Installation](#installation)\n - [Upgrade to `sequelize-typescript@1`](#upgrade-to-sequelize-typescript1)\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Repository mode](#repository-mode)\n   - [How to enable repository mode?](#how-to-enable-repository-mode)\n   - [How to use repository mode?](#how-to-use-repository-mode)\n   - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n   - [Limitations of repository mode](#limitations-of-repository-mode)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize), additional typings as documented [here](http://docs.sequelizejs.com/manual/typescript.html) and [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install sequelize\nnpm install @types/bluebird @types/validator\nnpm install reflect-metadata\n```\n```\nnpm install sequelize-typescript@canary\n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Upgrade to `sequelize-typescript@1`\n`sequelize-typescript@1` only works with `sequelize@5`. \nFor `sequelize@4` & `sequelize@3` use `sequelize-typescript@0.6`.\n\n### Breaking Changes\nAll breaking changes of `sequelize@5` are also valid for `sequelize-typescript@1`. \nSee [Upgrade to v5](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md) for details.\n\n#### Official Sequelize Typings\nsequelize-typescript now uses the official typings bundled with sequelize \n(See [this](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md#typescript-support)).\nPlease note the following details:\n- Most of the sequelize-typescript interfaces of the previous version are replaced by the official ones\n- `@types/sequelize` is no longer used\n- `@types/bluebird` is no longer an explicit dependency\n- The official typings are less strict than the former sequelize-typescript ones\n\n#### Sequelize Options\n- `SequelizeConfig` renamed to `SequelizeOptions`\n- `modelPaths` property renamed to `models`\n\n### Repository Mode\nWith `sequelize-typescript@1` comes a repository mode. See [docs](#repository-mode) for details.\n\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models'], // or [Player, Team],\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work \n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type \nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Repository mode\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions. \nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\nEnable repository mode by setting `repositoryMode` flag:\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n### How to use repository mode?\nRetrieve repository to create instances or perform search operations:\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({name: 'Luke Skywalker'});\nconst luke = await userRepository.findOne({where: {name: 'luke'}});\n```\n### How to use associations with repository mode?\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({include: [addressRepository]});\nuserRepository.create({name: 'Bear'}, {include: [addressRepository]});\n```\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n```typescript\n@Scopes({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  }\n})\n@Table\nclass User extends Model<User> {}\n```\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. (⚠️ For scope functions, models are still referenced directly\n`full() { return {include: [Manufacturer] };}`)\n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n\n### One Sequelize instance per model (without repository mode)\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple \nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@1.0.0-beta.0","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-9yUlo+qpGWkNjQ/YkJp37ik9ddh8bbQQMPseHYK+VwBKhiGthndiG78+ALOh0STIrTB4KIsM79QiGriyAU4RjQ==","shasum":"7b0e8dec93399ebc85992684af0e592407faeb9c","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-beta.0.tgz","fileCount":287,"unpackedSize":179350,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcs3S4CRA9TVsSAnZWagAAdmEP/i5ODo4oXy6SxRCujla2\nSGSfOtCpLbzexhnn6X5Ad3TZWGf4ig4mTHePeRNhSP34HwaHAfFWTBeHAHW1\n7yaD9FYgNqlffIwnxaEPNQnQn1TLZHCTyvfv3rYAMLWvWWXWqaSX3wZVJcrS\nFAvasLRS5xiZV0IWaJHRp/OL8rP3BMfCdhX6PNIfHlumdGox/mirgmzKlCW5\npOUhXE191/BW2Bmr702/DWEPy1wyevMPOslsNsjPJQ1E8L75EL6AuU7/N+Uf\n+RZFOmZZVWCuJVeoqEF7CxE8AmH7VeFV8Jy5Kf2wWZ8uHwrmyUSzTEr9E880\nctEWBbg8oTnNh4yvJCDk4pDXeP5qSN/hqlHT4ukwlvuzDrde9F69lsTO5dvv\nYORfYVnYFYpnKZrSBWIYyfYhDMLR7N7V5CHErplhlVJhJob+/qXSZTBsMWwz\nF96i1Dho1A7WVyLv9J/QqZfX/9Q1JGinAS/Dk/sD0piTjdehmAVr9v9Z7Mh6\nhdItY5qrHlO1chFLfkpWQViqOypFcj1x2uVRHB/xcfUmB+Dt6AeFninzpAaW\njfI1YYRsCnnFRt3GD8mMOOM9qzih7TzDsC0yL3UjO5y405Co8Yb3imumCTOt\nhxY4nmsdxLDXGBubc1OGcIygN/QoZbqfAVP6S1V4ZxPNzvppE+6vBO8uvJ0A\nR7/w\r\n=r0mO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFnaZgchqTpUs+oTHBKyDwOLrnrhhHyN+kAFIyCEDKeHAiAz5dIpx73scuMD2JSVXi0LP7czP7FwZVJFQKtFuunrLw=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-beta.0_1555264695568_0.5036823211747117"},"_hasShrinkwrap":false},"1.0.0-beta.1":{"name":"sequelize-typescript","version":"1.0.0-beta.1","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha","cover":"nyc mocha","lint":"tslint -c tslint.json --project tsconfig.json","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"glob":"7.1.2"},"devDependencies":{"@types/bluebird":"3.5.25","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/node":"11.13.4","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","copyfiles":"2.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"5.1.0","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.4","ts-node":"7.0.1","tslint":"5.14.0","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"@types/bluebird":"*","@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":"^5.1.0"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"f92c81544ee19418c2cf57ff99ab910095b34cdd","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v5).\n\n - [Installation](#installation)\n - [Upgrade to `sequelize-typescript@1`](#upgrade-to-sequelize-typescript1)\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Repository mode](#repository-mode)\n   - [How to enable repository mode?](#how-to-enable-repository-mode)\n   - [How to use repository mode?](#how-to-use-repository-mode)\n   - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n   - [Limitations of repository mode](#limitations-of-repository-mode)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize), additional typings as documented [here](http://docs.sequelizejs.com/manual/typescript.html) and [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install sequelize\nnpm install @types/bluebird @types/node @types/validator\nnpm install reflect-metadata\n```\n```\nnpm install sequelize-typescript@canary\n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Upgrade to `sequelize-typescript@1`\n`sequelize-typescript@1` only works with `sequelize@5`. \nFor `sequelize@4` & `sequelize@3` use `sequelize-typescript@0.6`.\n\n### Breaking Changes\nAll breaking changes of `sequelize@5` are also valid for `sequelize-typescript@1`. \nSee [Upgrade to v5](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md) for details.\n\n#### Official Sequelize Typings\nsequelize-typescript now uses the official typings bundled with sequelize \n(See [this](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md#typescript-support)).\nPlease note the following details:\n- Most of the sequelize-typescript interfaces of the previous version are replaced by the official ones\n- `@types/sequelize` is no longer used\n- `@types/bluebird` is no longer an explicit dependency\n- The official typings are less strict than the former sequelize-typescript ones\n\n#### Sequelize Options\n- `SequelizeConfig` renamed to `SequelizeOptions`\n- `modelPaths` property renamed to `models`\n\n### Repository Mode\nWith `sequelize-typescript@1` comes a repository mode. See [docs](#repository-mode) for details.\n\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models'], // or [Player, Team],\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work \n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type \nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Repository mode\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions. \nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\nEnable repository mode by setting `repositoryMode` flag:\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n### How to use repository mode?\nRetrieve repository to create instances or perform search operations:\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({name: 'Luke Skywalker'});\nconst luke = await userRepository.findOne({where: {name: 'luke'}});\n```\n### How to use associations with repository mode?\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({include: [addressRepository]});\nuserRepository.create({name: 'Bear'}, {include: [addressRepository]});\n```\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n```typescript\n@Scopes({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  }\n})\n@Table\nclass User extends Model<User> {}\n```\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. (⚠️ For scope functions, models are still referenced directly\n`full() { return {include: [Manufacturer] };}`)\n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n\n### One Sequelize instance per model (without repository mode)\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple \nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@1.0.0-beta.1","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-xD28kqa1rIKujlmgA4hWQgtwFfRM6tLv1/mnZOrOFEZxvSWazUbTzqGB7OZydZDNj3iJnyrV1l6i6HOfvrpvEw==","shasum":"402279fec52669cbd78ecbf50e189638483a7360","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-beta.1.tgz","fileCount":287,"unpackedSize":179449,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcs3jxCRA9TVsSAnZWagAAOFoP+wcaFh3gc9j3pa9KXuFg\n8LqRJjfNWc05wDba/AIuYR6nydirXTDLp/8e4vXVym3rOPJJmFEc222ORk8x\neG8Cln+8cNy6YuUVtZUsI/UmSyoFTzlIxPHdLW+jrZ37abkTdzvvRcI5yPK3\nFy68vJDvaCVATepSkIfdKO343zD7wCMoiBv0Tg6vPvCRV6mesBhR718CT++V\nVDLZDBciwVrAlapyEwuF8d8NLJPes8Z9PxQS9HI1Qj2ZqH0EZYRQymNUf4p6\nIc9CurK2saAOKCAIJnSfeLA+glLrDGkO7yoPN/QD7bxbDnvuvDfM6GAz9Sxs\n/LJUG4sjlzJq8tam3RUt9CiJDhDo/8bYsDXVPX6qhWq7sBtZgzA/DPoLlsmB\n7+4DPo4gO4JsjK8BmhRqCBqTQEA/fZR+QqzVcOQb6a168qN47UW1OhamLTNw\nOsuhA19hTykdkBgPOjMFZbOkzsndb1Ah0adcdQU+zZFwJcMtjvId7h0Y+Qho\n1+x4VO7+flsDULwELZpJvGGES/NuTpBzSaHk52yNnLWUWQBXS/y+IdL2+XFh\n6d12EBXwOc16bXreQ8I+EHSSeImu8dhuruTcWwx/EucPQ6FnhG1CC47ujMKi\ne+g7UqLIlGE9I42PwrrddSt+Re0kpLGXHQKMjTR1xCZPw38th2HKPJL/r68A\nF2L1\r\n=9bsz\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQChhGLVOPO5o4aXaUOESENra7VFg94CFMbAIp+wyBr7gAIhAJCp/UWnI9F48b3xEHeN2BwT8AgoUgToZRx4Gly8Hexq"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-beta.1_1555265776384_0.5161364227552927"},"_hasShrinkwrap":false},"1.0.0-beta.2":{"name":"sequelize-typescript","version":"1.0.0-beta.2","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha","cover":"nyc mocha","lint":"tslint -c tslint.json --project tsconfig.json","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"glob":"7.1.2"},"devDependencies":{"@types/bluebird":"3.5.25","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/node":"11.13.4","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","copyfiles":"2.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"5.1.0","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.4","ts-node":"7.0.1","tslint":"5.14.0","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"@types/bluebird":"*","@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":"^5.1.0"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"bb17369c018f9c4576776e08f71b5fcb9a1d0631","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v5).\n\n - [Installation](#installation)\n - [Upgrade to `sequelize-typescript@1`](#upgrade-to-sequelize-typescript1)\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Repository mode](#repository-mode)\n   - [How to enable repository mode?](#how-to-enable-repository-mode)\n   - [How to use repository mode?](#how-to-use-repository-mode)\n   - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n   - [Limitations of repository mode](#limitations-of-repository-mode)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize), additional typings as documented [here](http://docs.sequelizejs.com/manual/typescript.html) and [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install sequelize\nnpm install @types/bluebird @types/node @types/validator\nnpm install reflect-metadata\n```\n```\nnpm install sequelize-typescript@next\n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Upgrade to `sequelize-typescript@1`\n`sequelize-typescript@1` only works with `sequelize@5`. \nFor `sequelize@4` & `sequelize@3` use `sequelize-typescript@0.6`.\n\n### Breaking Changes\nAll breaking changes of `sequelize@5` are also valid for `sequelize-typescript@1`. \nSee [Upgrade to v5](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md) for details.\n\n#### Official Sequelize Typings\nsequelize-typescript now uses the official typings bundled with sequelize \n(See [this](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md#typescript-support)).\nPlease note the following details:\n- Most of the sequelize-typescript interfaces of the previous version are replaced by the official ones\n- `@types/sequelize` is no longer used\n- `@types/bluebird` is no longer an explicit dependency\n- The official typings are less strict than the former sequelize-typescript ones\n\n#### Sequelize Options\n- `SequelizeConfig` renamed to `SequelizeOptions`\n- `modelPaths` property renamed to `models`\n\n#### Scopes Options\nThe `@Scopes` and `@DefaultScope` decorators now take lambda's as options\n```ts\n@DefaultScope(() => ({...}))\n@Scopes(() => ({...}))\n```\ninstead of deprecated way:\n```ts\n@DefaultScope({...})\n@Scopes({...}))\n```\n\n### Repository Mode\nWith `sequelize-typescript@1` comes a repository mode. See [docs](#repository-mode) for details.\n\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models'], // or [Player, Team],\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work \n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type \nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Repository mode\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions. \nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\nEnable repository mode by setting `repositoryMode` flag:\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n### How to use repository mode?\nRetrieve repository to create instances or perform search operations:\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({name: 'Luke Skywalker'});\nconst luke = await userRepository.findOne({where: {name: 'luke'}});\n```\n### How to use associations with repository mode?\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({include: [addressRepository]});\nuserRepository.create({name: 'Bear'}, {include: [addressRepository]});\n```\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n```typescript\n@Scopes(() => ({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  }\n}))\n@Table\nclass User extends Model<User> {}\n```\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are identical to native\nsequelize (See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope(() => ({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n}))\n@Scopes(() => ({\n  full: {\n    include: [Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n}))\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n\n### One Sequelize instance per model (without repository mode)\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple \nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@1.0.0-beta.2","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-Iu67kF/RunoeBQBsU5llViJkxAHBVmeS9DBP+eC63hkEwxeDGZgxOkodyW5v5k3h2DJ0MBO+clRURXoDb+/OHg==","shasum":"fd9ae47ecf8b159e32e19c1298426cc9773cebd8","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-beta.2.tgz","fileCount":297,"unpackedSize":186922,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcvdDqCRA9TVsSAnZWagAAE48P/3BpVqG71DPdN6WM4t/Q\n5nnRvJU9TKtribyNqBhS1C5K/QLwa3jWoN9PxrdCdpgp4HlU8lPlWz1ToQwR\nJX2A5CZSekq7oVyMAAKp9nBlsXSgittt1xmbtPRArqDagGMnnPlYaszZFeCj\nYF4eUouNzZ8zTTpvA3bPVqkGAOhJj0dcp7MUjEuo9WVo2hMZr/9YjqbfS0lY\ndNbn1J4XsObNad5RzBAToxIhSId9PdAxfSfqfN+8L06DaQp6jKJXpxgT7dmE\nD+dmSgGFCpimh8lmoxSZY5HC8CkxWvCrhdjBGvyay7o0c2LlBr4LmEKN/H7k\n1nRu+UIAjMA6lxkFsNKQPHS3rG4NZxSJ7GM1SyXvXPZ80neyHa7GY/6WUCes\nDCL26Pze4R+3xFYjvetApDF7+hTDR+VuXEBx2YDviRh9couRcDqIESfTOqSm\nCKr7TTnevLhqRq/aT6DfvQikfaSHyzQz1ODfvUtQiLZ4FJdljF5tJ/WWtP1U\nEDMVMvrrRvBs3619TM8BvrI9LlHTT2dtVF+XgqAd2NQ5MJDyo9SVUhiOERx4\nN1fCf413OocMgxU/aZPPESSwHLJMDmZ7cUFEtHuvdllBRsRpwxoP4xWRfuxZ\ntconQi0cqcHCKOgcRNx+MiCzQBVmlqYi97FGT3kmYeAVkhb/FybBgTBIbbC+\nj25a\r\n=6J53\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIB9JlzHlbDmPwStoccdGkKOKTKFiCHgnqXcoGIb+kC9uAiEA2/ev0cy+9OnUqIi48RTnzS1nY1e9OAe3clROJH58vOk="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-beta.2_1555943657744_0.02829626247493655"},"_hasShrinkwrap":false},"0.6.11-beta.0":{"name":"sequelize-typescript","version":"0.6.11-beta.0","description":"Decorators and some other features for sequelize (v3, v4, v5)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.26","@types/node":"11.12.2","@types/sequelize":"4.27.47","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql":"2.16.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.2","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib"],"exclude":["test"],"extension":[".js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n\n### Latest sequelize (v5)\n```sh\nnpm install sequelize --save\n```\n```\nnpm install sequelize-typescript@next --save \n```\n\n### Older versions (v4, v3)\n```sh\nnpm install sequelize@4 --save\nnpm install sequelize@3 --save\n```\n```\nnpm install sequelize-typescript --save \n```\n\n### `reflect-metadata`\n[reflect-metadata](https://www.npmjs.com/package/reflect-metadata) is also required\n```\nnpm install reflect-metadata --save\n```\n\n### TypeScript Config\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe javascript type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the `@Column` annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work \n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type \nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\nWhen including a model that has multiple relations you will need to use as property:\n```typescript\n  // In the class \"books\":\n  @DefaultScope({\n    include: [\n      {\n        // note as with the @BelongsTo Column name\n        as: \"author\",\n        model: () => Person,\n      },\n    ]\n  })\n  \n  // In a controller or outside of the model\n  Book.findAll({ include: [ as: \"author\", model: Person ] })  \n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. (⚠️ For scope functions, models are still referenced directly\n`full() { return {include: [Manufacturer] };}`)\n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to `@ForeignKey`. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"e6c41d0825cc94e1e9a3442d54bba564146490a9","_id":"sequelize-typescript@0.6.11-beta.0","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-NF2HIfM5FQSvKXqlLw2SpC5JIXYjQGEUaHK5ed28lwP812JnryIrDBxCj/A5zMbN7IlxmdGKy+HayL5nLM854w==","shasum":"871fd975261469d63e590694a8a7498719937ae3","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.11-beta.0.tgz","fileCount":321,"unpackedSize":271611,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcvdXfCRA9TVsSAnZWagAA5uMQAJ0viu7UkW+78322ukhw\ng3CXSKON10LxpJrboOfvI0RNAD9OpBZ6fwwJGvJxsgEucCyipd06DQa98xbp\nYie2DxkaqEHbSa7lROrmRqWj3nehiPijyvQxth1Gv8BXgCX/3UE3oze1cDFE\nEVstig/JabKcsYmEcsSZePUA5VEBxJi5QtMd0twlHzXDgVPfZ4ZJOV/iUft7\nSK4eOBFf2qKp2J9AZDfZDKtS5i3QiT/igNJwAlkJsM7T68FaHJdX0Q2xoWwt\n6kRFE9MVpKXndIArjCmj85hjoUP5NgiEzx+S9Z7gXVoJpYrah/E7eDLDC+Nt\nVPBo7i8Ay3KtOWS2O1We/NEOTsV+HTL/jMlfDUHKY9XQCnisio3SEbIsZ6RO\nEOLzbXEWuu7d1NMfRzn/sZ7e50TWLmXdBReh9b1fyu+trBwh5FVlXxEpM//k\nr0Ly5p5y/Gn99dltToLtjWZsrhl7dZyz1cHj/P8aCpI1lQoTEY6wwVQQVP3/\naFq6DZ56Km9s8kMDnh75xDYDUAPSe0pgJ/Jx4n58UgdAnHtXnagzknF1xO8T\naFe+Owf54z2uigIfVDJGwDrFUv0a6QBzfGJ4W4f7kCBXCnGbHTsrD0S7FjE8\n1gQcA6sulYr6DHztpFewGMi2D2y+Z19CFR2sdNO/riOlbYtNdASDeqE9w5cm\nRBFp\r\n=9Hpr\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDNoBhtjof5XN3bjkGcBUaoujzHMFTQF+rx2y/QZhmGHQIge5O8J6XubLTg/AZp/jioBRAKp88AKSIv5DqhrMc0p3M="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.11-beta.0_1555944926216_0.13299167181649274"},"_hasShrinkwrap":false},"0.6.11-beta.1":{"name":"sequelize-typescript","version":"0.6.11-beta.1","description":"Decorators and some other features for sequelize (v3, v4, v5)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.26","@types/node":"11.12.2","@types/sequelize":"4.27.48","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql":"2.16.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.2","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib"],"exclude":["test"],"extension":[".js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"4e095829b8777b21b16a9dc9a19be789a7ebd456","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n\n### Latest sequelize (v5)\n```sh\nnpm install sequelize --save\n```\n```\nnpm install sequelize-typescript@next --save \n```\n\n### Older versions (v4, v3)\n```sh\nnpm install sequelize@4 --save\nnpm install sequelize@3 --save\n```\n```\nnpm install sequelize-typescript --save \n```\n\n### `reflect-metadata`\n[reflect-metadata](https://www.npmjs.com/package/reflect-metadata) is also required\n```\nnpm install reflect-metadata --save\n```\n\n### TypeScript Config\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe javascript type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the `@Column` annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work \n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type \nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\nWhen including a model that has multiple relations you will need to use as property:\n```typescript\n  // In the class \"books\":\n  @DefaultScope({\n    include: [\n      {\n        // note as with the @BelongsTo Column name\n        as: \"author\",\n        model: () => Person,\n      },\n    ]\n  })\n  \n  // In a controller or outside of the model\n  Book.findAll({ include: [ as: \"author\", model: Person ] })  \n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. (⚠️ For scope functions, models are still referenced directly\n`full() { return {include: [Manufacturer] };}`)\n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to `@ForeignKey`. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@0.6.11-beta.1","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-F/ugSXWFftmRVLSGdkHWrm/oUQY4JGduUkB3q2pM/jbMIsZACSwOXPvrz68IP90J+ZRUZSAxXPucdirJUkT/Iw==","shasum":"83ce9a2861418de9113d8cd1c16b64487d72aef1","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.11-beta.1.tgz","fileCount":321,"unpackedSize":271717,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcyXHNCRA9TVsSAnZWagAASH0P/0VA8JI2PuJQTox9HhOg\nm9Q4o023NJDkCEyt3zlYTjRA07CoWL2uEcddKzCRyGkJ0EhsgBSuR4tgmTkI\nvBMU0rajHFco4N0Kda3M+TrL/HNAVou1JZry1XMGwYWaQ9Xm41WCNYFvy5Uk\nJ2WTSzN4QQSDRJWbCzex3lbEsYBn0+0F92DCpW2RxbYeS7Z4lrd6YblFpUj6\nSoR04t4sTx1EEwnDd+QntJW6oA/FnOlMIYs+vq91H9AvHO4nTBsKarWjddvy\nu0r/fuXirqowxz9wNB+zTdVBOhK7GpapBnOB2VB2Rw8Su1F/sX05EMrJIdAB\nZuYNmLMjO8sW58B0bR0yY0pdiyBVK+RDaFU72OVT+BImEzq54MCKoOjxJ31K\nningeiwLMUh3vCRFs8kgzJb0Tlm4dYDWZvFibZyfd5MGds4cXmb6E0VOmGHP\n5DRk0DGvf4IbWwCRWyf708gqDQWx27kcnyz8Y9WdpZlxjYI8crSRvILjO0wX\n3pk/bEjKdw4VIoZIaYl+yCRANBByiZyRXXj1XKX8AidEvf7YPTFLeBO9WmdU\neNHyRiiJqToOL2E5cvJ4yETrQZP19cc1wL2vi3QH01l4oLNGtiIOQ4r+YwVe\n76hw1+NPCrGjguKChDfV+3IwC874G4kxnwq8lJ29qnOdjZEc+Z7Ixe2UQkcm\nqXJB\r\n=rEX8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICi8D7+THmORBfqRhaoww6+fM4XAmRzxLz7QxcD2ymrxAiAGUoveXTTiRxE1Wy5LdIiejgmCimhDwDFDS3lc0746cw=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.11-beta.1_1556705740875_0.7040035881386129"},"_hasShrinkwrap":false},"1.0.0-beta.3":{"name":"sequelize-typescript","version":"1.0.0-beta.3","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha","cover":"nyc mocha","lint":"tslint -c tslint.json --project tsconfig.json","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"glob":"7.1.2"},"devDependencies":{"@types/bluebird":"3.5.25","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/node":"11.13.4","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","copyfiles":"2.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"5.1.0","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.4","ts-node":"7.0.1","tslint":"5.14.0","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"@types/bluebird":"*","@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":"^5.1.0"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v5).\n\n - [Installation](#installation)\n - [Upgrade to `sequelize-typescript@1`](#upgrade-to-sequelize-typescript1)\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Repository mode](#repository-mode)\n   - [How to enable repository mode?](#how-to-enable-repository-mode)\n   - [How to use repository mode?](#how-to-use-repository-mode)\n   - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n   - [Limitations of repository mode](#limitations-of-repository-mode)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize), additional typings as documented [here](http://docs.sequelizejs.com/manual/typescript.html) and [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install sequelize\nnpm install @types/bluebird @types/node @types/validator\nnpm install reflect-metadata\n```\n```\nnpm install sequelize-typescript@next\n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Upgrade to `sequelize-typescript@1`\n`sequelize-typescript@1` only works with `sequelize@5`. \nFor `sequelize@4` & `sequelize@3` use `sequelize-typescript@0.6`.\n\n### Breaking Changes\nAll breaking changes of `sequelize@5` are also valid for `sequelize-typescript@1`. \nSee [Upgrade to v5](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md) for details.\n\n#### Official Sequelize Typings\nsequelize-typescript now uses the official typings bundled with sequelize \n(See [this](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md#typescript-support)).\nPlease note the following details:\n- Most of the sequelize-typescript interfaces of the previous version are replaced by the official ones\n- `@types/sequelize` is no longer used\n- `@types/bluebird` is no longer an explicit dependency\n- The official typings are less strict than the former sequelize-typescript ones\n\n#### Sequelize Options\n- `SequelizeConfig` renamed to `SequelizeOptions`\n- `modelPaths` property renamed to `models`\n\n#### Scopes Options\nThe `@Scopes` and `@DefaultScope` decorators now take lambda's as options\n```ts\n@DefaultScope(() => ({...}))\n@Scopes(() => ({...}))\n```\ninstead of deprecated way:\n```ts\n@DefaultScope({...})\n@Scopes({...}))\n```\n\n### Repository Mode\nWith `sequelize-typescript@1` comes a repository mode. See [docs](#repository-mode) for details.\n\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models'], // or [Player, Team],\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work \n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type \nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Repository mode\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions. \nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\nEnable repository mode by setting `repositoryMode` flag:\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n### How to use repository mode?\nRetrieve repository to create instances or perform search operations:\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({name: 'Luke Skywalker'});\nconst luke = await userRepository.findOne({where: {name: 'luke'}});\n```\n### How to use associations with repository mode?\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({include: [addressRepository]});\nuserRepository.create({name: 'Bear'}, {include: [addressRepository]});\n```\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n```typescript\n@Scopes(() => ({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  }\n}))\n@Table\nclass User extends Model<User> {}\n```\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are identical to native\nsequelize (See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope(() => ({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n}))\n@Scopes(() => ({\n  full: {\n    include: [Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n}))\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n\n### One Sequelize instance per model (without repository mode)\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple \nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","gitHead":"ebd66fe478d89aeabb6eeed0d6b17dcab4b3180f","_id":"sequelize-typescript@1.0.0-beta.3","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-JICyUiRJSUqYIbGgzrWHJBfWSxhL6eTXqcPKuEB7aB9zKaAcyuOxVGWpiUa9rJHg2M2wWZGPfHdcFJM0KDRJGg==","shasum":"7f1060e62822d203776df3c25cd8ed70187a1a3c","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-beta.3.tgz","fileCount":297,"unpackedSize":187116,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcyYPRCRA9TVsSAnZWagAAe+QP/2rC/nsQfAoOGtgNUXmm\n5QcBxJmfOMpq+mPFUz2xXLZtRBGMhxLs8kJ7ZmIG5t+R2+BZOLveMdGKxB6C\nvn2+2lNRAOkdHETTA9eCTbgcZupMfxm29zZdy5XgZo/MiFPmVm7ag21nDMZN\ncGxz5rMQ94mJTQ9ZMw9xo575JsKwQWd+nBnNeEbVQlJGFtB8+ZslsEJTq49Y\nDUvYXYVaVB9NDKxIQHvX+8N+7YjCOSBpwebVUjbLt+7jAq873p7aokeePMZF\nituChOFb1MOLY0RRyjPnp0lH6x9MlY8e4jCF48PYtnyYmJrLXvC4kx/CjpF6\nQA9rHgKXy+lPIMYvV6dLbiTbSi4vFiaSY354mmpmE6kic/m8rzHURMg8Fz3S\n2Maxy1bXtoQfNbT1Mgrwte/wEel5B2x9kkQl6R8Fi01hrhKIH97FY6FiPqer\nTNjS2B4MYy/W7hGnMuyttFfqHuhPdMP0HITGcGPi0tRYY4hhXFqnVi6ZO25h\nxHujOQ1AoAoiElQ/YpADYbP7FyUXFWkyxpkWAYVQuAr/SC+NNme7iFW2/Qwr\n/RZe6cAou2EVgZ9XdCUgCNunNoNrZUQB3nizNbQ6qjag/e8B5alDuyOxcL3Z\nix0NY+CxAaO/lVeWFxdSlZibg599niIlYNTqOr2OeqFhIKKuBPUmVoInjSCv\n3t48\r\n=I9Cv\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHHHK2dxLn7HGdUFF+zotYBxeR9qKIlLGCUJbrtaV/YEAiEApdoVoUGyVVXaHCfT1csZCYydFryaVs+oaubzeJKjU3s="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-beta.3_1556710352831_0.5596274214083274"},"_hasShrinkwrap":false},"0.6.11":{"name":"sequelize-typescript","version":"0.6.11","description":"Decorators and some other features for sequelize (v3, v4, v5)","scripts":{"build":"tsc --project lib/models/v4 && tsc","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.26","@types/node":"11.12.2","@types/sequelize":"4.28.1","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql":"2.16.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.2","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib"],"exclude":["test"],"extension":[".js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"af7bb0f8a7890f876f339e00af1cda654c1fbbdb","_id":"sequelize-typescript@0.6.11","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-O9Rmb9F+3Wsn5dkN6dJWSFGh8XUiSIteZsF7e95OdJG73f7KMoc+OTYzvtl/wDHA2HhdFqF9b6OzkxFFdaKVhw==","shasum":"3ed957adbb14c95c1b05da1d2d0e669dbc8e1bf8","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.11.tgz","fileCount":321,"unpackedSize":271709,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc4DVfCRA9TVsSAnZWagAAM8cP/3ZP1DVtcbBgEG50eIop\nbuwHz7RbZ272t4/kK1tqR/QA+drQ3162I5ojy/2RCdrvszlbF9Y9EcEMGR5t\nhZIiM0B7nSrcKvhZMbwY/O/y7l+A755h/QBTk8CQdNP+l0oeGLuhg7MNEEnC\niT1gy9fPSGK8rpYwpOEFTp7jurFpoNeGOXXvhXlTs7WgpXW3ss+Hw/suD1pf\nDmD1m50I1qPOGm/nSfz4HmteWnIDC9czzFBcT9xYdfQz2H0tx7wzA2TSAwfR\nns0cDqInMVPNERYQ51d1398NbFHH9sAtMPSaNkaVh032updPHLfCewA8di3P\nqPtRLTDQPunEwB1nMP+fcZofw7lXQFhrZH/UmQLCf0pJu/NXLj269AbV7DSk\nLbFZEl7HL3WdVPOKaYAGLqX2GMztRyrLVkYEBWHP66EVcCiZ7lte02c7gvXs\ns37JO1g5vh+Kas1A1H/VdGlRc3FTF9yhuJWy8gQuWa7EGkFGlSZc+IG15I/j\ng7lsNXndKG8KayUd85w9VtyftjjczGQcM4RjjSv+kr0RzXENwtRpNhavL/QJ\nTGK4ckl4Nba99j2PkX4EKy2RspJ2z3MXnNAAE6WLqd2DdEXdaCyaw+/LZ4FC\nLbJr6ZDn038Be5XlfHveqyCvI8/6PtjG7bwgoVMoGhteBWYvB+WoHzBXEeEp\nvjnr\r\n=zuAD\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCrqyyfYgnhs9DjwPRZ7rlZ2ftKDWPpHI4odp//GEV46AIgQ/rEgq8cCXrJ84sSVkQ2Z0bwK4Ry3Tx9vPi6S6aTtqs="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.11_1558197598486_0.47102983875079163"},"_hasShrinkwrap":false},"0.6.12-beta.0":{"name":"sequelize-typescript","version":"0.6.12-beta.0","description":"Decorators and some other features for sequelize (v3, v4, v5)","scripts":{"generate-browser":"node generate-browser.js","build":"tsc --project lib/models/v4 && tsc && npm run generate-browser","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.26","@types/node":"11.12.2","@types/sequelize":"4.28.3","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"mkdirp-promise":"5.0.1","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql":"2.16.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","recursive-readdir":"2.2.2","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.2","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib"],"exclude":["test"],"extension":[".js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"browser":{"index.js":"browser/index.js","lib/annotations/AllowNull.js":"browser/lib/annotations/AllowNull.js","lib/annotations/AutoIncrement.js":"browser/lib/annotations/AutoIncrement.js","lib/annotations/Column.js":"browser/lib/annotations/Column.js","lib/annotations/Comment.js":"browser/lib/annotations/Comment.js","lib/annotations/CreatedAt.js":"browser/lib/annotations/CreatedAt.js","lib/annotations/Default.js":"browser/lib/annotations/Default.js","lib/annotations/DefaultScope.js":"browser/lib/annotations/DefaultScope.js","lib/annotations/DeletedAt.js":"browser/lib/annotations/DeletedAt.js","lib/annotations/ForeignKey.js":"browser/lib/annotations/ForeignKey.js","lib/annotations/PrimaryKey.js":"browser/lib/annotations/PrimaryKey.js","lib/annotations/Scopes.js":"browser/lib/annotations/Scopes.js","lib/annotations/Table.js":"browser/lib/annotations/Table.js","lib/annotations/Unique.js":"browser/lib/annotations/Unique.js","lib/annotations/UpdatedAt.js":"browser/lib/annotations/UpdatedAt.js","lib/annotations/association/BelongsTo.js":"browser/lib/annotations/association/BelongsTo.js","lib/annotations/association/BelongsToMany.js":"browser/lib/annotations/association/BelongsToMany.js","lib/annotations/association/HasMany.js":"browser/lib/annotations/association/HasMany.js","lib/annotations/association/HasOne.js":"browser/lib/annotations/association/HasOne.js","lib/annotations/hooks/AfterBulkCreate.js":"browser/lib/annotations/hooks/AfterBulkCreate.js","lib/annotations/hooks/AfterBulkDelete.js":"browser/lib/annotations/hooks/AfterBulkDelete.js","lib/annotations/hooks/AfterBulkDestroy.js":"browser/lib/annotations/hooks/AfterBulkDestroy.js","lib/annotations/hooks/AfterBulkRestore.js":"browser/lib/annotations/hooks/AfterBulkRestore.js","lib/annotations/hooks/AfterBulkSync.js":"browser/lib/annotations/hooks/AfterBulkSync.js","lib/annotations/hooks/AfterBulkUpdate.js":"browser/lib/annotations/hooks/AfterBulkUpdate.js","lib/annotations/hooks/AfterConnect.js":"browser/lib/annotations/hooks/AfterConnect.js","lib/annotations/hooks/AfterCreate.js":"browser/lib/annotations/hooks/AfterCreate.js","lib/annotations/hooks/AfterDefine.js":"browser/lib/annotations/hooks/AfterDefine.js","lib/annotations/hooks/AfterDelete.js":"browser/lib/annotations/hooks/AfterDelete.js","lib/annotations/hooks/AfterDestroy.js":"browser/lib/annotations/hooks/AfterDestroy.js","lib/annotations/hooks/AfterFind.js":"browser/lib/annotations/hooks/AfterFind.js","lib/annotations/hooks/AfterInit.js":"browser/lib/annotations/hooks/AfterInit.js","lib/annotations/hooks/AfterRestore.js":"browser/lib/annotations/hooks/AfterRestore.js","lib/annotations/hooks/AfterSave.js":"browser/lib/annotations/hooks/AfterSave.js","lib/annotations/hooks/AfterSync.js":"browser/lib/annotations/hooks/AfterSync.js","lib/annotations/hooks/AfterUpdate.js":"browser/lib/annotations/hooks/AfterUpdate.js","lib/annotations/hooks/AfterUpsert.js":"browser/lib/annotations/hooks/AfterUpsert.js","lib/annotations/hooks/AfterValidate.js":"browser/lib/annotations/hooks/AfterValidate.js","lib/annotations/hooks/BeforeBulkCreate.js":"browser/lib/annotations/hooks/BeforeBulkCreate.js","lib/annotations/hooks/BeforeBulkDelete.js":"browser/lib/annotations/hooks/BeforeBulkDelete.js","lib/annotations/hooks/BeforeBulkDestroy.js":"browser/lib/annotations/hooks/BeforeBulkDestroy.js","lib/annotations/hooks/BeforeBulkRestore.js":"browser/lib/annotations/hooks/BeforeBulkRestore.js","lib/annotations/hooks/BeforeBulkSync.js":"browser/lib/annotations/hooks/BeforeBulkSync.js","lib/annotations/hooks/BeforeBulkUpdate.js":"browser/lib/annotations/hooks/BeforeBulkUpdate.js","lib/annotations/hooks/BeforeConnect.js":"browser/lib/annotations/hooks/BeforeConnect.js","lib/annotations/hooks/BeforeCount.js":"browser/lib/annotations/hooks/BeforeCount.js","lib/annotations/hooks/BeforeCreate.js":"browser/lib/annotations/hooks/BeforeCreate.js","lib/annotations/hooks/BeforeDefine.js":"browser/lib/annotations/hooks/BeforeDefine.js","lib/annotations/hooks/BeforeDelete.js":"browser/lib/annotations/hooks/BeforeDelete.js","lib/annotations/hooks/BeforeDestroy.js":"browser/lib/annotations/hooks/BeforeDestroy.js","lib/annotations/hooks/BeforeFind.js":"browser/lib/annotations/hooks/BeforeFind.js","lib/annotations/hooks/BeforeFindAfterExpandIncludeAll.js":"browser/lib/annotations/hooks/BeforeFindAfterExpandIncludeAll.js","lib/annotations/hooks/BeforeFindAfterOptions.js":"browser/lib/annotations/hooks/BeforeFindAfterOptions.js","lib/annotations/hooks/BeforeInit.js":"browser/lib/annotations/hooks/BeforeInit.js","lib/annotations/hooks/BeforeRestore.js":"browser/lib/annotations/hooks/BeforeRestore.js","lib/annotations/hooks/BeforeSave.js":"browser/lib/annotations/hooks/BeforeSave.js","lib/annotations/hooks/BeforeSync.js":"browser/lib/annotations/hooks/BeforeSync.js","lib/annotations/hooks/BeforeUpdate.js":"browser/lib/annotations/hooks/BeforeUpdate.js","lib/annotations/hooks/BeforeUpsert.js":"browser/lib/annotations/hooks/BeforeUpsert.js","lib/annotations/hooks/BeforeValidate.js":"browser/lib/annotations/hooks/BeforeValidate.js","lib/annotations/hooks/ValidationFailed.js":"browser/lib/annotations/hooks/ValidationFailed.js","lib/annotations/validation/Contains.js":"browser/lib/annotations/validation/Contains.js","lib/annotations/validation/Equals.js":"browser/lib/annotations/validation/Equals.js","lib/annotations/validation/Is.js":"browser/lib/annotations/validation/Is.js","lib/annotations/validation/IsAfter.js":"browser/lib/annotations/validation/IsAfter.js","lib/annotations/validation/IsAlpha.js":"browser/lib/annotations/validation/IsAlpha.js","lib/annotations/validation/IsAlphanumeric.js":"browser/lib/annotations/validation/IsAlphanumeric.js","lib/annotations/validation/IsArray.js":"browser/lib/annotations/validation/IsArray.js","lib/annotations/validation/IsBefore.js":"browser/lib/annotations/validation/IsBefore.js","lib/annotations/validation/IsCreditCard.js":"browser/lib/annotations/validation/IsCreditCard.js","lib/annotations/validation/IsDate.js":"browser/lib/annotations/validation/IsDate.js","lib/annotations/validation/IsDecimal.js":"browser/lib/annotations/validation/IsDecimal.js","lib/annotations/validation/IsEmail.js":"browser/lib/annotations/validation/IsEmail.js","lib/annotations/validation/IsFloat.js":"browser/lib/annotations/validation/IsFloat.js","lib/annotations/validation/IsIP.js":"browser/lib/annotations/validation/IsIP.js","lib/annotations/validation/IsIPv4.js":"browser/lib/annotations/validation/IsIPv4.js","lib/annotations/validation/IsIPv6.js":"browser/lib/annotations/validation/IsIPv6.js","lib/annotations/validation/IsIn.js":"browser/lib/annotations/validation/IsIn.js","lib/annotations/validation/IsInt.js":"browser/lib/annotations/validation/IsInt.js","lib/annotations/validation/IsLowercase.js":"browser/lib/annotations/validation/IsLowercase.js","lib/annotations/validation/IsNull.js":"browser/lib/annotations/validation/IsNull.js","lib/annotations/validation/IsNumeric.js":"browser/lib/annotations/validation/IsNumeric.js","lib/annotations/validation/IsUUID.js":"browser/lib/annotations/validation/IsUUID.js","lib/annotations/validation/IsUppercase.js":"browser/lib/annotations/validation/IsUppercase.js","lib/annotations/validation/IsUrl.js":"browser/lib/annotations/validation/IsUrl.js","lib/annotations/validation/Length.js":"browser/lib/annotations/validation/Length.js","lib/annotations/validation/Max.js":"browser/lib/annotations/validation/Max.js","lib/annotations/validation/Min.js":"browser/lib/annotations/validation/Min.js","lib/annotations/validation/Not.js":"browser/lib/annotations/validation/Not.js","lib/annotations/validation/NotContains.js":"browser/lib/annotations/validation/NotContains.js","lib/annotations/validation/NotEmpty.js":"browser/lib/annotations/validation/NotEmpty.js","lib/annotations/validation/NotIn.js":"browser/lib/annotations/validation/NotIn.js","lib/annotations/validation/NotNull.js":"browser/lib/annotations/validation/NotNull.js","lib/annotations/validation/Validate.js":"browser/lib/annotations/validation/Validate.js","lib/annotations/validation/Validator.js":"browser/lib/annotations/validation/Validator.js","models/Model.js":"browser/models/Model.js"},"gitHead":"3f16e95fbfb74d439a4a6cfffd5d77517d8cdd12","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n\n### Latest sequelize (v5)\n```sh\nnpm install sequelize --save\n```\n```\nnpm install sequelize-typescript@next --save \n```\n\n### Older versions (v4, v3)\n```sh\nnpm install sequelize@4 --save\nnpm install sequelize@3 --save\n```\n```\nnpm install sequelize-typescript --save \n```\n\n### `reflect-metadata`\n[reflect-metadata](https://www.npmjs.com/package/reflect-metadata) is also required\n```\nnpm install reflect-metadata --save\n```\n\n### TypeScript Config\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe javascript type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the `@Column` annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work \n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type \nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\nWhen including a model that has multiple relations you will need to use as property:\n```typescript\n  // In the class \"books\":\n  @DefaultScope({\n    include: [\n      {\n        // note as with the @BelongsTo Column name\n        as: \"author\",\n        model: () => Person,\n      },\n    ]\n  })\n  \n  // In a controller or outside of the model\n  Book.findAll({ include: [ as: \"author\", model: Person ] })  \n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. (⚠️ For scope functions, models are still referenced directly\n`full() { return {include: [Manufacturer] };}`)\n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to `@ForeignKey`. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@0.6.12-beta.0","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-uzcWEekQhQr8HoKlYMNmocnJrvxk5x2bl5Le1uuWVCn2aZd0XtNXpPvD83u+swO+IWH3bV2vaxJ7P3c1rjH4cA==","shasum":"b35741c392ee30e56b429bc6e8f61d1d384303fd","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.12-beta.0.tgz","fileCount":419,"unpackedSize":297589,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc84vUCRA9TVsSAnZWagAAHPEQAJnxTm5lROCnJpJSUBNU\nXml9sg+MlKFMPrEHc2JR3mAQj29UUEap4tuc4KZTvT013Qm3aF/UOcEPWC2D\nsja4yTYO0n2Nh/0NCWRx7ZGxlfYvpMILJLZWXm0fq7zoCI+FM0qlNDB+JMTo\n5NE1L5m0sTQLxlwOWIDDwReS4so8UI9C4vTEtqUKPIQFpILu6DU591bFErU9\nP5wJaUte/I3RRZt50fK76BdkGCvwNFeN6wytM7FMAEpC6YrcQQgrwxd1bCaL\nwAD+1rsiR2OKSZ0/RgpKY039v2xfaFeySZUlNucT4tHwV5A16waveB9DmIEV\n8OcEe6YCH9v+JcAcDZFzS/249Azo8nXGHppkwE154VCC5rlDaltqCQyMP0iw\nBqnVViz7KihX9UNccfhpuDxP6XOqOxy3MPGC86GHBeemQ1LIpLRUqHWPHxc2\nQkZsbdEvXxy+8FWr2Z7mwDeqdw/mKuY4wvXXblxG38kajeajbah8d8DEVaMy\nFBu77nSf+EKXLX/tLWDAOUzNitYfdICeGm2JYtgrM9th6nVQZ/7JoyxgudJn\n4+4MpM1Q0lheYppG09VA6Ucmc5btzy/Sv9yWi3eJ9KaM/DB4nx42W9qXGgkm\nEWUznX48xlVza93uFx1Jg/CHFJLu+5dNH+leZg9UMMPuNH761PQtl16Xu98B\ndIt8\r\n=Mqim\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCeOx5B5VRXBD7CJ8wY8sRq1LuHTsNR6a9iRrjJo8lstQIhAJjyUsCnKGTZGJ/pz25JwAqs4BdrMTobX3C37DdJzev8"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.12-beta.0_1559464915474_0.20332578343188934"},"_hasShrinkwrap":false},"0.6.12-beta.1":{"name":"sequelize-typescript","version":"0.6.12-beta.1","description":"Decorators and some other features for sequelize (v3, v4, v5)","scripts":{"generate-browser":"node generate-browser.js","build":"tsc --project lib/models/v4 && tsc && npm run generate-browser","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.26","@types/node":"11.12.2","@types/sequelize":"4.28.3","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"mkdirp-promise":"5.0.1","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql":"2.16.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","recursive-readdir":"2.2.2","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.2","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib"],"exclude":["test"],"extension":[".js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"browser":{"index.js":"browser/index.js","lib/annotations/AllowNull.js":"browser/lib/annotations/AllowNull.js","lib/annotations/AutoIncrement.js":"browser/lib/annotations/AutoIncrement.js","lib/annotations/Column.js":"browser/lib/annotations/Column.js","lib/annotations/Comment.js":"browser/lib/annotations/Comment.js","lib/annotations/CreatedAt.js":"browser/lib/annotations/CreatedAt.js","lib/annotations/Default.js":"browser/lib/annotations/Default.js","lib/annotations/DefaultScope.js":"browser/lib/annotations/DefaultScope.js","lib/annotations/DeletedAt.js":"browser/lib/annotations/DeletedAt.js","lib/annotations/ForeignKey.js":"browser/lib/annotations/ForeignKey.js","lib/annotations/PrimaryKey.js":"browser/lib/annotations/PrimaryKey.js","lib/annotations/Scopes.js":"browser/lib/annotations/Scopes.js","lib/annotations/Table.js":"browser/lib/annotations/Table.js","lib/annotations/Unique.js":"browser/lib/annotations/Unique.js","lib/annotations/UpdatedAt.js":"browser/lib/annotations/UpdatedAt.js","lib/annotations/association/BelongsTo.js":"browser/lib/annotations/association/BelongsTo.js","lib/annotations/association/BelongsToMany.js":"browser/lib/annotations/association/BelongsToMany.js","lib/annotations/association/HasMany.js":"browser/lib/annotations/association/HasMany.js","lib/annotations/association/HasOne.js":"browser/lib/annotations/association/HasOne.js","lib/annotations/hooks/AfterBulkCreate.js":"browser/lib/annotations/hooks/AfterBulkCreate.js","lib/annotations/hooks/AfterBulkDelete.js":"browser/lib/annotations/hooks/AfterBulkDelete.js","lib/annotations/hooks/AfterBulkDestroy.js":"browser/lib/annotations/hooks/AfterBulkDestroy.js","lib/annotations/hooks/AfterBulkRestore.js":"browser/lib/annotations/hooks/AfterBulkRestore.js","lib/annotations/hooks/AfterBulkSync.js":"browser/lib/annotations/hooks/AfterBulkSync.js","lib/annotations/hooks/AfterBulkUpdate.js":"browser/lib/annotations/hooks/AfterBulkUpdate.js","lib/annotations/hooks/AfterConnect.js":"browser/lib/annotations/hooks/AfterConnect.js","lib/annotations/hooks/AfterCreate.js":"browser/lib/annotations/hooks/AfterCreate.js","lib/annotations/hooks/AfterDefine.js":"browser/lib/annotations/hooks/AfterDefine.js","lib/annotations/hooks/AfterDelete.js":"browser/lib/annotations/hooks/AfterDelete.js","lib/annotations/hooks/AfterDestroy.js":"browser/lib/annotations/hooks/AfterDestroy.js","lib/annotations/hooks/AfterFind.js":"browser/lib/annotations/hooks/AfterFind.js","lib/annotations/hooks/AfterInit.js":"browser/lib/annotations/hooks/AfterInit.js","lib/annotations/hooks/AfterRestore.js":"browser/lib/annotations/hooks/AfterRestore.js","lib/annotations/hooks/AfterSave.js":"browser/lib/annotations/hooks/AfterSave.js","lib/annotations/hooks/AfterSync.js":"browser/lib/annotations/hooks/AfterSync.js","lib/annotations/hooks/AfterUpdate.js":"browser/lib/annotations/hooks/AfterUpdate.js","lib/annotations/hooks/AfterUpsert.js":"browser/lib/annotations/hooks/AfterUpsert.js","lib/annotations/hooks/AfterValidate.js":"browser/lib/annotations/hooks/AfterValidate.js","lib/annotations/hooks/BeforeBulkCreate.js":"browser/lib/annotations/hooks/BeforeBulkCreate.js","lib/annotations/hooks/BeforeBulkDelete.js":"browser/lib/annotations/hooks/BeforeBulkDelete.js","lib/annotations/hooks/BeforeBulkDestroy.js":"browser/lib/annotations/hooks/BeforeBulkDestroy.js","lib/annotations/hooks/BeforeBulkRestore.js":"browser/lib/annotations/hooks/BeforeBulkRestore.js","lib/annotations/hooks/BeforeBulkSync.js":"browser/lib/annotations/hooks/BeforeBulkSync.js","lib/annotations/hooks/BeforeBulkUpdate.js":"browser/lib/annotations/hooks/BeforeBulkUpdate.js","lib/annotations/hooks/BeforeConnect.js":"browser/lib/annotations/hooks/BeforeConnect.js","lib/annotations/hooks/BeforeCount.js":"browser/lib/annotations/hooks/BeforeCount.js","lib/annotations/hooks/BeforeCreate.js":"browser/lib/annotations/hooks/BeforeCreate.js","lib/annotations/hooks/BeforeDefine.js":"browser/lib/annotations/hooks/BeforeDefine.js","lib/annotations/hooks/BeforeDelete.js":"browser/lib/annotations/hooks/BeforeDelete.js","lib/annotations/hooks/BeforeDestroy.js":"browser/lib/annotations/hooks/BeforeDestroy.js","lib/annotations/hooks/BeforeFind.js":"browser/lib/annotations/hooks/BeforeFind.js","lib/annotations/hooks/BeforeFindAfterExpandIncludeAll.js":"browser/lib/annotations/hooks/BeforeFindAfterExpandIncludeAll.js","lib/annotations/hooks/BeforeFindAfterOptions.js":"browser/lib/annotations/hooks/BeforeFindAfterOptions.js","lib/annotations/hooks/BeforeInit.js":"browser/lib/annotations/hooks/BeforeInit.js","lib/annotations/hooks/BeforeRestore.js":"browser/lib/annotations/hooks/BeforeRestore.js","lib/annotations/hooks/BeforeSave.js":"browser/lib/annotations/hooks/BeforeSave.js","lib/annotations/hooks/BeforeSync.js":"browser/lib/annotations/hooks/BeforeSync.js","lib/annotations/hooks/BeforeUpdate.js":"browser/lib/annotations/hooks/BeforeUpdate.js","lib/annotations/hooks/BeforeUpsert.js":"browser/lib/annotations/hooks/BeforeUpsert.js","lib/annotations/hooks/BeforeValidate.js":"browser/lib/annotations/hooks/BeforeValidate.js","lib/annotations/hooks/ValidationFailed.js":"browser/lib/annotations/hooks/ValidationFailed.js","lib/annotations/validation/Contains.js":"browser/lib/annotations/validation/Contains.js","lib/annotations/validation/Equals.js":"browser/lib/annotations/validation/Equals.js","lib/annotations/validation/Is.js":"browser/lib/annotations/validation/Is.js","lib/annotations/validation/IsAfter.js":"browser/lib/annotations/validation/IsAfter.js","lib/annotations/validation/IsAlpha.js":"browser/lib/annotations/validation/IsAlpha.js","lib/annotations/validation/IsAlphanumeric.js":"browser/lib/annotations/validation/IsAlphanumeric.js","lib/annotations/validation/IsArray.js":"browser/lib/annotations/validation/IsArray.js","lib/annotations/validation/IsBefore.js":"browser/lib/annotations/validation/IsBefore.js","lib/annotations/validation/IsCreditCard.js":"browser/lib/annotations/validation/IsCreditCard.js","lib/annotations/validation/IsDate.js":"browser/lib/annotations/validation/IsDate.js","lib/annotations/validation/IsDecimal.js":"browser/lib/annotations/validation/IsDecimal.js","lib/annotations/validation/IsEmail.js":"browser/lib/annotations/validation/IsEmail.js","lib/annotations/validation/IsFloat.js":"browser/lib/annotations/validation/IsFloat.js","lib/annotations/validation/IsIP.js":"browser/lib/annotations/validation/IsIP.js","lib/annotations/validation/IsIPv4.js":"browser/lib/annotations/validation/IsIPv4.js","lib/annotations/validation/IsIPv6.js":"browser/lib/annotations/validation/IsIPv6.js","lib/annotations/validation/IsIn.js":"browser/lib/annotations/validation/IsIn.js","lib/annotations/validation/IsInt.js":"browser/lib/annotations/validation/IsInt.js","lib/annotations/validation/IsLowercase.js":"browser/lib/annotations/validation/IsLowercase.js","lib/annotations/validation/IsNull.js":"browser/lib/annotations/validation/IsNull.js","lib/annotations/validation/IsNumeric.js":"browser/lib/annotations/validation/IsNumeric.js","lib/annotations/validation/IsUUID.js":"browser/lib/annotations/validation/IsUUID.js","lib/annotations/validation/IsUppercase.js":"browser/lib/annotations/validation/IsUppercase.js","lib/annotations/validation/IsUrl.js":"browser/lib/annotations/validation/IsUrl.js","lib/annotations/validation/Length.js":"browser/lib/annotations/validation/Length.js","lib/annotations/validation/Max.js":"browser/lib/annotations/validation/Max.js","lib/annotations/validation/Min.js":"browser/lib/annotations/validation/Min.js","lib/annotations/validation/Not.js":"browser/lib/annotations/validation/Not.js","lib/annotations/validation/NotContains.js":"browser/lib/annotations/validation/NotContains.js","lib/annotations/validation/NotEmpty.js":"browser/lib/annotations/validation/NotEmpty.js","lib/annotations/validation/NotIn.js":"browser/lib/annotations/validation/NotIn.js","lib/annotations/validation/NotNull.js":"browser/lib/annotations/validation/NotNull.js","lib/annotations/validation/Validate.js":"browser/lib/annotations/validation/Validate.js","lib/annotations/validation/Validator.js":"browser/lib/annotations/validation/Validator.js","models/Model.js":"browser/models/Model.js"},"gitHead":"660238156be00596d550f95c9d5a65bb6880e700","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n\n### Latest sequelize (v5)\n```sh\nnpm install sequelize --save\n```\n```\nnpm install sequelize-typescript@next --save \n```\n\n### Older versions (v4, v3)\n```sh\nnpm install sequelize@4 --save\nnpm install sequelize@3 --save\n```\n```\nnpm install sequelize-typescript --save \n```\n\n### `reflect-metadata`\n[reflect-metadata](https://www.npmjs.com/package/reflect-metadata) is also required\n```\nnpm install reflect-metadata --save\n```\n\n### TypeScript Config\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe javascript type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the `@Column` annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work \n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type \nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\nWhen including a model that has multiple relations you will need to use as property:\n```typescript\n  // In the class \"books\":\n  @DefaultScope({\n    include: [\n      {\n        // note as with the @BelongsTo Column name\n        as: \"author\",\n        model: () => Person,\n      },\n    ]\n  })\n  \n  // In a controller or outside of the model\n  Book.findAll({ include: [ as: \"author\", model: Person ] })  \n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. (⚠️ For scope functions, models are still referenced directly\n`full() { return {include: [Manufacturer] };}`)\n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to `@ForeignKey`. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@0.6.12-beta.1","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-wOzDdBXVA92QJ2BTmoebd14vN2KMp4dJkX8cZJBtxeUTUZ04tVA1GA/0AkhnTOkztcwbzNaqsa4/QtTa0CmGTA==","shasum":"cd95019d359ba07ac10b4b5272b518e8975af98f","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.12-beta.1.tgz","fileCount":514,"unpackedSize":311969,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc85/XCRA9TVsSAnZWagAAZPIP/j804Gq6kBCqlO68lgYG\nFMddt6oQdP/y23nC2v/eNLtWdzCguagoGKCxl5Ic4TwoHEVNWDbF8VrPCh52\n8mEV4jYuCRG+8Oozp40k0gmWB4Nt9VcGJbOSrGm0IdgWruqokTIXfeyNbUMg\nMGGzLhjKbc/asA/DIfvjYgcSO2Bj0OXLd+Pt5S5WiHSyUegbFzmhz1AUw/xz\nPyj/wVOAna/G7qAvvgZ+yIa1jcAQ8M6Jo/pDnxcqRwugwzzS70OF+K4kRjhO\nv/qIMbKbXMyn2PvRa01bW9Mn6u2ACfHbly1zcUvCBhR0Xt0FyRx4wh+2kXnD\npAjl9dFD4aompcjV/KfTjPWbdelVYgR4BqQU7ts92kNX83+GWftDbsOieuF5\ndKH5BAQFqN7NZ90mTgOkTyqB2PqhyS/m0rhsQPm0O0dyB7rXMh7+OxRxS/h4\n7fUXz+KjYjciIAqy7mN1e6SP77vYa0pBCjoHD4L2AX3lmqDdkYo+SRSqngKn\nsE+YAliAVMV7gFZZ2yOwHhFXdBGvP1vE/JK8A/bppNdT9eCdNRviwEqtNqq8\n/Vo2NRaSTcCZlaP4sKA4xoPOIy1C5zYW7jPWi0RnS8Ihm/EYDe/Cc073qLrC\n0F8Y2xblgvkakAxcI+gYHU4PXi2s0EeE2dJ+5Q/z8wA2lUmOgA0Tq256Ndh+\n2lYo\r\n=E2IR\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDjfXbtfBzizF66czhiWTwIH7zo7MpJMvOkk5wTPG3G/QIhALl8RV2bSDD0CARqWzSP3icwcw5GoMhAjBxveX7SmHSy"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.12-beta.1_1559470038376_0.23106045385771323"},"_hasShrinkwrap":false},"0.6.12-beta.2":{"name":"sequelize-typescript","version":"0.6.12-beta.2","description":"Decorators and some other features for sequelize (v3, v4, v5)","scripts":{"generate-browser":"node generate-browser.js","build":"tsc --project lib/models/v4 && tsc && npm run generate-browser","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.26","@types/node":"11.12.2","@types/sequelize":"4.28.3","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"mkdirp-promise":"5.0.1","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql":"2.16.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","recursive-readdir":"2.2.2","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.2","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib"],"exclude":["test"],"extension":[".js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"browser":{"index.js":"browser/index.js","lib/annotations/AllowNull.js":"./browser/lib/annotations/AllowNull.js","lib/annotations/AutoIncrement.js":"./browser/lib/annotations/AutoIncrement.js","lib/annotations/Column.js":"./browser/lib/annotations/Column.js","lib/annotations/Comment.js":"./browser/lib/annotations/Comment.js","lib/annotations/CreatedAt.js":"./browser/lib/annotations/CreatedAt.js","lib/annotations/Default.js":"./browser/lib/annotations/Default.js","lib/annotations/DefaultScope.js":"./browser/lib/annotations/DefaultScope.js","lib/annotations/DeletedAt.js":"./browser/lib/annotations/DeletedAt.js","lib/annotations/ForeignKey.js":"./browser/lib/annotations/ForeignKey.js","lib/annotations/PrimaryKey.js":"./browser/lib/annotations/PrimaryKey.js","lib/annotations/Scopes.js":"./browser/lib/annotations/Scopes.js","lib/annotations/Table.js":"./browser/lib/annotations/Table.js","lib/annotations/Unique.js":"./browser/lib/annotations/Unique.js","lib/annotations/UpdatedAt.js":"./browser/lib/annotations/UpdatedAt.js","lib/annotations/association/BelongsTo.js":"./browser/lib/annotations/association/BelongsTo.js","lib/annotations/association/BelongsToMany.js":"./browser/lib/annotations/association/BelongsToMany.js","lib/annotations/association/HasMany.js":"./browser/lib/annotations/association/HasMany.js","lib/annotations/association/HasOne.js":"./browser/lib/annotations/association/HasOne.js","lib/annotations/hooks/AfterBulkCreate.js":"./browser/lib/annotations/hooks/AfterBulkCreate.js","lib/annotations/hooks/AfterBulkDelete.js":"./browser/lib/annotations/hooks/AfterBulkDelete.js","lib/annotations/hooks/AfterBulkDestroy.js":"./browser/lib/annotations/hooks/AfterBulkDestroy.js","lib/annotations/hooks/AfterBulkRestore.js":"./browser/lib/annotations/hooks/AfterBulkRestore.js","lib/annotations/hooks/AfterBulkSync.js":"./browser/lib/annotations/hooks/AfterBulkSync.js","lib/annotations/hooks/AfterBulkUpdate.js":"./browser/lib/annotations/hooks/AfterBulkUpdate.js","lib/annotations/hooks/AfterConnect.js":"./browser/lib/annotations/hooks/AfterConnect.js","lib/annotations/hooks/AfterCreate.js":"./browser/lib/annotations/hooks/AfterCreate.js","lib/annotations/hooks/AfterDefine.js":"./browser/lib/annotations/hooks/AfterDefine.js","lib/annotations/hooks/AfterDelete.js":"./browser/lib/annotations/hooks/AfterDelete.js","lib/annotations/hooks/AfterDestroy.js":"./browser/lib/annotations/hooks/AfterDestroy.js","lib/annotations/hooks/AfterFind.js":"./browser/lib/annotations/hooks/AfterFind.js","lib/annotations/hooks/AfterInit.js":"./browser/lib/annotations/hooks/AfterInit.js","lib/annotations/hooks/AfterRestore.js":"./browser/lib/annotations/hooks/AfterRestore.js","lib/annotations/hooks/AfterSave.js":"./browser/lib/annotations/hooks/AfterSave.js","lib/annotations/hooks/AfterSync.js":"./browser/lib/annotations/hooks/AfterSync.js","lib/annotations/hooks/AfterUpdate.js":"./browser/lib/annotations/hooks/AfterUpdate.js","lib/annotations/hooks/AfterUpsert.js":"./browser/lib/annotations/hooks/AfterUpsert.js","lib/annotations/hooks/AfterValidate.js":"./browser/lib/annotations/hooks/AfterValidate.js","lib/annotations/hooks/BeforeBulkCreate.js":"./browser/lib/annotations/hooks/BeforeBulkCreate.js","lib/annotations/hooks/BeforeBulkDelete.js":"./browser/lib/annotations/hooks/BeforeBulkDelete.js","lib/annotations/hooks/BeforeBulkDestroy.js":"./browser/lib/annotations/hooks/BeforeBulkDestroy.js","lib/annotations/hooks/BeforeBulkRestore.js":"./browser/lib/annotations/hooks/BeforeBulkRestore.js","lib/annotations/hooks/BeforeBulkSync.js":"./browser/lib/annotations/hooks/BeforeBulkSync.js","lib/annotations/hooks/BeforeBulkUpdate.js":"./browser/lib/annotations/hooks/BeforeBulkUpdate.js","lib/annotations/hooks/BeforeConnect.js":"./browser/lib/annotations/hooks/BeforeConnect.js","lib/annotations/hooks/BeforeCount.js":"./browser/lib/annotations/hooks/BeforeCount.js","lib/annotations/hooks/BeforeCreate.js":"./browser/lib/annotations/hooks/BeforeCreate.js","lib/annotations/hooks/BeforeDefine.js":"./browser/lib/annotations/hooks/BeforeDefine.js","lib/annotations/hooks/BeforeDelete.js":"./browser/lib/annotations/hooks/BeforeDelete.js","lib/annotations/hooks/BeforeDestroy.js":"./browser/lib/annotations/hooks/BeforeDestroy.js","lib/annotations/hooks/BeforeFind.js":"./browser/lib/annotations/hooks/BeforeFind.js","lib/annotations/hooks/BeforeFindAfterExpandIncludeAll.js":"./browser/lib/annotations/hooks/BeforeFindAfterExpandIncludeAll.js","lib/annotations/hooks/BeforeFindAfterOptions.js":"./browser/lib/annotations/hooks/BeforeFindAfterOptions.js","lib/annotations/hooks/BeforeInit.js":"./browser/lib/annotations/hooks/BeforeInit.js","lib/annotations/hooks/BeforeRestore.js":"./browser/lib/annotations/hooks/BeforeRestore.js","lib/annotations/hooks/BeforeSave.js":"./browser/lib/annotations/hooks/BeforeSave.js","lib/annotations/hooks/BeforeSync.js":"./browser/lib/annotations/hooks/BeforeSync.js","lib/annotations/hooks/BeforeUpdate.js":"./browser/lib/annotations/hooks/BeforeUpdate.js","lib/annotations/hooks/BeforeUpsert.js":"./browser/lib/annotations/hooks/BeforeUpsert.js","lib/annotations/hooks/BeforeValidate.js":"./browser/lib/annotations/hooks/BeforeValidate.js","lib/annotations/hooks/ValidationFailed.js":"./browser/lib/annotations/hooks/ValidationFailed.js","lib/annotations/validation/Contains.js":"./browser/lib/annotations/validation/Contains.js","lib/annotations/validation/Equals.js":"./browser/lib/annotations/validation/Equals.js","lib/annotations/validation/Is.js":"./browser/lib/annotations/validation/Is.js","lib/annotations/validation/IsAfter.js":"./browser/lib/annotations/validation/IsAfter.js","lib/annotations/validation/IsAlpha.js":"./browser/lib/annotations/validation/IsAlpha.js","lib/annotations/validation/IsAlphanumeric.js":"./browser/lib/annotations/validation/IsAlphanumeric.js","lib/annotations/validation/IsArray.js":"./browser/lib/annotations/validation/IsArray.js","lib/annotations/validation/IsBefore.js":"./browser/lib/annotations/validation/IsBefore.js","lib/annotations/validation/IsCreditCard.js":"./browser/lib/annotations/validation/IsCreditCard.js","lib/annotations/validation/IsDate.js":"./browser/lib/annotations/validation/IsDate.js","lib/annotations/validation/IsDecimal.js":"./browser/lib/annotations/validation/IsDecimal.js","lib/annotations/validation/IsEmail.js":"./browser/lib/annotations/validation/IsEmail.js","lib/annotations/validation/IsFloat.js":"./browser/lib/annotations/validation/IsFloat.js","lib/annotations/validation/IsIP.js":"./browser/lib/annotations/validation/IsIP.js","lib/annotations/validation/IsIPv4.js":"./browser/lib/annotations/validation/IsIPv4.js","lib/annotations/validation/IsIPv6.js":"./browser/lib/annotations/validation/IsIPv6.js","lib/annotations/validation/IsIn.js":"./browser/lib/annotations/validation/IsIn.js","lib/annotations/validation/IsInt.js":"./browser/lib/annotations/validation/IsInt.js","lib/annotations/validation/IsLowercase.js":"./browser/lib/annotations/validation/IsLowercase.js","lib/annotations/validation/IsNull.js":"./browser/lib/annotations/validation/IsNull.js","lib/annotations/validation/IsNumeric.js":"./browser/lib/annotations/validation/IsNumeric.js","lib/annotations/validation/IsUUID.js":"./browser/lib/annotations/validation/IsUUID.js","lib/annotations/validation/IsUppercase.js":"./browser/lib/annotations/validation/IsUppercase.js","lib/annotations/validation/IsUrl.js":"./browser/lib/annotations/validation/IsUrl.js","lib/annotations/validation/Length.js":"./browser/lib/annotations/validation/Length.js","lib/annotations/validation/Max.js":"./browser/lib/annotations/validation/Max.js","lib/annotations/validation/Min.js":"./browser/lib/annotations/validation/Min.js","lib/annotations/validation/Not.js":"./browser/lib/annotations/validation/Not.js","lib/annotations/validation/NotContains.js":"./browser/lib/annotations/validation/NotContains.js","lib/annotations/validation/NotEmpty.js":"./browser/lib/annotations/validation/NotEmpty.js","lib/annotations/validation/NotIn.js":"./browser/lib/annotations/validation/NotIn.js","lib/annotations/validation/NotNull.js":"./browser/lib/annotations/validation/NotNull.js","lib/annotations/validation/Validate.js":"./browser/lib/annotations/validation/Validate.js","lib/annotations/validation/Validator.js":"./browser/lib/annotations/validation/Validator.js","models/Model.js":"./browser/models/Model.js"},"gitHead":"55d8143ef5793c006b6e15883b5ff071303c7547","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n\n### Latest sequelize (v5)\n```sh\nnpm install sequelize --save\n```\n```\nnpm install sequelize-typescript@next --save \n```\n\n### Older versions (v4, v3)\n```sh\nnpm install sequelize@4 --save\nnpm install sequelize@3 --save\n```\n```\nnpm install sequelize-typescript --save \n```\n\n### `reflect-metadata`\n[reflect-metadata](https://www.npmjs.com/package/reflect-metadata) is also required\n```\nnpm install reflect-metadata --save\n```\n\n### TypeScript Config\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe javascript type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the `@Column` annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work \n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type \nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\nWhen including a model that has multiple relations you will need to use as property:\n```typescript\n  // In the class \"books\":\n  @DefaultScope({\n    include: [\n      {\n        // note as with the @BelongsTo Column name\n        as: \"author\",\n        model: () => Person,\n      },\n    ]\n  })\n  \n  // In a controller or outside of the model\n  Book.findAll({ include: [ as: \"author\", model: Person ] })  \n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. (⚠️ For scope functions, models are still referenced directly\n`full() { return {include: [Manufacturer] };}`)\n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to `@ForeignKey`. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@0.6.12-beta.2","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-L6KpAdwaU0vD9KLnBDE0LePXECiOZ3Q5y38AmuqQDKAfwegyVQ4A2wJtNmR5hrKtmYiGS9UqZ+NblL+jIMDmFg==","shasum":"0926ab5d0821169015ae51fc49b201611f838f16","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.12-beta.2.tgz","fileCount":514,"unpackedSize":311838,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc876iCRA9TVsSAnZWagAAExgQAJHsCihePL3B0uMW5Bcp\nrP/D5w/UskKr4TCZwwnzij4zkrNnKEVXCX4o4mfhkSEdqCPuxBxhuoRWYlOU\ncViQho7lsFRkvAZZ7zr3lyLun9Snc2Ty7/VqfHRG/lBN3brshVfi2NTkdfGj\nkpgBim6i4Tt9GDpKUYF2PVrSQxVpMXnDwQJc+vdxihDwuQHCZIXab9mrRzgG\n0/GQSDlddGRkrunc7PA1K7pwnvyquySJTE3smTYWdIKFxvY3vKHs/ydrXxRW\nw8DyUcUM9qq+Zripg/lCjvUcl/sK7AJtGH72ZHfxiEXp/ZHhd9t+JsxXje83\nQ/XbcRLrVZ10x9GvmlpRpUbtOIJsVwJEDNfZuCxoJytdtsvCaFnb5z/bUX20\n/AbAcp++9kGb7m90ucTez2gzCEn5z+xdfZOPmurfD/2Jmp4M0yC8+7n9cTzq\nI6CEyUKu1rQtbvGmVJ7oYNrN9U0svVjAB27p2uaEHPywEO+WA6L3X6hglgWV\nqWwroDSksT98JuQXNKeijGD2QCxpSKoKeLhZ0vRBRKmm4Kn5TLqmb8y7fFPQ\nZSgEHeaZpg9GHD5oVnToW26em636CQEsddzPfI1Mm1he9XkFT19pKDGiLQjL\nWOxk+I3cY3ZyV8qH7oKiJ7flvC0tpONSunVj8PSazhmIdqI0WSta3BqEZqtH\ndRb/\r\n=j7TT\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFKMdQOmf6/bf+gcB6eyxHbPUL6vDccdM/BN3WI0SeocAiBvC/M4N6gzWElNrspdOeDYgZyIpwDifAvxMGoZpConjw=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.12-beta.2_1559477921264_0.8819977821760645"},"_hasShrinkwrap":false},"0.6.12-beta.3":{"name":"sequelize-typescript","version":"0.6.12-beta.3","description":"Decorators and some other features for sequelize (v3, v4, v5)","scripts":{"generate-browser":"node generate-browser.js","build":"tsc --project lib/models/v4 && tsc && npm run generate-browser","build-tests-es5":"tsc --project test --target es5","build-tests-es6":"tsc --project test --target es6 && tsc","prepare-test-v3":"npm install sequelize@^3 --no-save && npm run build-tests-es5","prepare-test-v4":"npm install sequelize@^4 --no-save && npm run build-tests-es6","test-v3":"npm run prepare-test-v3 && npm run exec-tests","test-v4":"npm run prepare-test-v4 && npm run exec-tests","cover-v3":"npm run prepare-test-v3 && nyc --exclude lib/models/v4/**/*.js mocha","cover-v4":"npm run prepare-test-v4 && nyc --exclude lib/models/v3/**/*.js mocha","exec-tests":"mocha","test":"npm run test-v4 && npm run test-v3","cover":"npm run cover-v4 && npm run cover-v3","lint":"tslint .","prepare":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"index.js","types":"index.d.ts","dependencies":{"@types/bluebird":"3.5.26","@types/node":"11.12.2","@types/sequelize":"4.28.3","es6-shim":"0.35.3","glob":"7.1.2"},"devDependencies":{"mkdirp-promise":"5.0.1","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql":"2.16.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","recursive-readdir":"2.2.2","reflect-metadata":"0.1.9","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.2","ts-node":"3.0.4","tslint":"4.3.1","typescript":"2.9.1","uuid-validate":"0.0.2"},"peerDependencies":{"reflect-metadata":">=0.1.9"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["lib"],"exclude":["test"],"extension":[".js"],"reporter":["lcov","text-summary"],"cache":false,"all":true,"check-coverage":true,"report-dir":"./coverage"},"browser":{"index.js":"./browser/index.js","lib/annotations/AllowNull.js":"./browser/lib/annotations/AllowNull.js","lib/annotations/AutoIncrement.js":"./browser/lib/annotations/AutoIncrement.js","lib/annotations/Column.js":"./browser/lib/annotations/Column.js","lib/annotations/Comment.js":"./browser/lib/annotations/Comment.js","lib/annotations/CreatedAt.js":"./browser/lib/annotations/CreatedAt.js","lib/annotations/Default.js":"./browser/lib/annotations/Default.js","lib/annotations/DefaultScope.js":"./browser/lib/annotations/DefaultScope.js","lib/annotations/DeletedAt.js":"./browser/lib/annotations/DeletedAt.js","lib/annotations/ForeignKey.js":"./browser/lib/annotations/ForeignKey.js","lib/annotations/PrimaryKey.js":"./browser/lib/annotations/PrimaryKey.js","lib/annotations/Scopes.js":"./browser/lib/annotations/Scopes.js","lib/annotations/Table.js":"./browser/lib/annotations/Table.js","lib/annotations/Unique.js":"./browser/lib/annotations/Unique.js","lib/annotations/UpdatedAt.js":"./browser/lib/annotations/UpdatedAt.js","lib/annotations/association/BelongsTo.js":"./browser/lib/annotations/association/BelongsTo.js","lib/annotations/association/BelongsToMany.js":"./browser/lib/annotations/association/BelongsToMany.js","lib/annotations/association/HasMany.js":"./browser/lib/annotations/association/HasMany.js","lib/annotations/association/HasOne.js":"./browser/lib/annotations/association/HasOne.js","lib/annotations/hooks/AfterBulkCreate.js":"./browser/lib/annotations/hooks/AfterBulkCreate.js","lib/annotations/hooks/AfterBulkDelete.js":"./browser/lib/annotations/hooks/AfterBulkDelete.js","lib/annotations/hooks/AfterBulkDestroy.js":"./browser/lib/annotations/hooks/AfterBulkDestroy.js","lib/annotations/hooks/AfterBulkRestore.js":"./browser/lib/annotations/hooks/AfterBulkRestore.js","lib/annotations/hooks/AfterBulkSync.js":"./browser/lib/annotations/hooks/AfterBulkSync.js","lib/annotations/hooks/AfterBulkUpdate.js":"./browser/lib/annotations/hooks/AfterBulkUpdate.js","lib/annotations/hooks/AfterConnect.js":"./browser/lib/annotations/hooks/AfterConnect.js","lib/annotations/hooks/AfterCreate.js":"./browser/lib/annotations/hooks/AfterCreate.js","lib/annotations/hooks/AfterDefine.js":"./browser/lib/annotations/hooks/AfterDefine.js","lib/annotations/hooks/AfterDelete.js":"./browser/lib/annotations/hooks/AfterDelete.js","lib/annotations/hooks/AfterDestroy.js":"./browser/lib/annotations/hooks/AfterDestroy.js","lib/annotations/hooks/AfterFind.js":"./browser/lib/annotations/hooks/AfterFind.js","lib/annotations/hooks/AfterInit.js":"./browser/lib/annotations/hooks/AfterInit.js","lib/annotations/hooks/AfterRestore.js":"./browser/lib/annotations/hooks/AfterRestore.js","lib/annotations/hooks/AfterSave.js":"./browser/lib/annotations/hooks/AfterSave.js","lib/annotations/hooks/AfterSync.js":"./browser/lib/annotations/hooks/AfterSync.js","lib/annotations/hooks/AfterUpdate.js":"./browser/lib/annotations/hooks/AfterUpdate.js","lib/annotations/hooks/AfterUpsert.js":"./browser/lib/annotations/hooks/AfterUpsert.js","lib/annotations/hooks/AfterValidate.js":"./browser/lib/annotations/hooks/AfterValidate.js","lib/annotations/hooks/BeforeBulkCreate.js":"./browser/lib/annotations/hooks/BeforeBulkCreate.js","lib/annotations/hooks/BeforeBulkDelete.js":"./browser/lib/annotations/hooks/BeforeBulkDelete.js","lib/annotations/hooks/BeforeBulkDestroy.js":"./browser/lib/annotations/hooks/BeforeBulkDestroy.js","lib/annotations/hooks/BeforeBulkRestore.js":"./browser/lib/annotations/hooks/BeforeBulkRestore.js","lib/annotations/hooks/BeforeBulkSync.js":"./browser/lib/annotations/hooks/BeforeBulkSync.js","lib/annotations/hooks/BeforeBulkUpdate.js":"./browser/lib/annotations/hooks/BeforeBulkUpdate.js","lib/annotations/hooks/BeforeConnect.js":"./browser/lib/annotations/hooks/BeforeConnect.js","lib/annotations/hooks/BeforeCount.js":"./browser/lib/annotations/hooks/BeforeCount.js","lib/annotations/hooks/BeforeCreate.js":"./browser/lib/annotations/hooks/BeforeCreate.js","lib/annotations/hooks/BeforeDefine.js":"./browser/lib/annotations/hooks/BeforeDefine.js","lib/annotations/hooks/BeforeDelete.js":"./browser/lib/annotations/hooks/BeforeDelete.js","lib/annotations/hooks/BeforeDestroy.js":"./browser/lib/annotations/hooks/BeforeDestroy.js","lib/annotations/hooks/BeforeFind.js":"./browser/lib/annotations/hooks/BeforeFind.js","lib/annotations/hooks/BeforeFindAfterExpandIncludeAll.js":"./browser/lib/annotations/hooks/BeforeFindAfterExpandIncludeAll.js","lib/annotations/hooks/BeforeFindAfterOptions.js":"./browser/lib/annotations/hooks/BeforeFindAfterOptions.js","lib/annotations/hooks/BeforeInit.js":"./browser/lib/annotations/hooks/BeforeInit.js","lib/annotations/hooks/BeforeRestore.js":"./browser/lib/annotations/hooks/BeforeRestore.js","lib/annotations/hooks/BeforeSave.js":"./browser/lib/annotations/hooks/BeforeSave.js","lib/annotations/hooks/BeforeSync.js":"./browser/lib/annotations/hooks/BeforeSync.js","lib/annotations/hooks/BeforeUpdate.js":"./browser/lib/annotations/hooks/BeforeUpdate.js","lib/annotations/hooks/BeforeUpsert.js":"./browser/lib/annotations/hooks/BeforeUpsert.js","lib/annotations/hooks/BeforeValidate.js":"./browser/lib/annotations/hooks/BeforeValidate.js","lib/annotations/hooks/ValidationFailed.js":"./browser/lib/annotations/hooks/ValidationFailed.js","lib/annotations/validation/Contains.js":"./browser/lib/annotations/validation/Contains.js","lib/annotations/validation/Equals.js":"./browser/lib/annotations/validation/Equals.js","lib/annotations/validation/Is.js":"./browser/lib/annotations/validation/Is.js","lib/annotations/validation/IsAfter.js":"./browser/lib/annotations/validation/IsAfter.js","lib/annotations/validation/IsAlpha.js":"./browser/lib/annotations/validation/IsAlpha.js","lib/annotations/validation/IsAlphanumeric.js":"./browser/lib/annotations/validation/IsAlphanumeric.js","lib/annotations/validation/IsArray.js":"./browser/lib/annotations/validation/IsArray.js","lib/annotations/validation/IsBefore.js":"./browser/lib/annotations/validation/IsBefore.js","lib/annotations/validation/IsCreditCard.js":"./browser/lib/annotations/validation/IsCreditCard.js","lib/annotations/validation/IsDate.js":"./browser/lib/annotations/validation/IsDate.js","lib/annotations/validation/IsDecimal.js":"./browser/lib/annotations/validation/IsDecimal.js","lib/annotations/validation/IsEmail.js":"./browser/lib/annotations/validation/IsEmail.js","lib/annotations/validation/IsFloat.js":"./browser/lib/annotations/validation/IsFloat.js","lib/annotations/validation/IsIP.js":"./browser/lib/annotations/validation/IsIP.js","lib/annotations/validation/IsIPv4.js":"./browser/lib/annotations/validation/IsIPv4.js","lib/annotations/validation/IsIPv6.js":"./browser/lib/annotations/validation/IsIPv6.js","lib/annotations/validation/IsIn.js":"./browser/lib/annotations/validation/IsIn.js","lib/annotations/validation/IsInt.js":"./browser/lib/annotations/validation/IsInt.js","lib/annotations/validation/IsLowercase.js":"./browser/lib/annotations/validation/IsLowercase.js","lib/annotations/validation/IsNull.js":"./browser/lib/annotations/validation/IsNull.js","lib/annotations/validation/IsNumeric.js":"./browser/lib/annotations/validation/IsNumeric.js","lib/annotations/validation/IsUUID.js":"./browser/lib/annotations/validation/IsUUID.js","lib/annotations/validation/IsUppercase.js":"./browser/lib/annotations/validation/IsUppercase.js","lib/annotations/validation/IsUrl.js":"./browser/lib/annotations/validation/IsUrl.js","lib/annotations/validation/Length.js":"./browser/lib/annotations/validation/Length.js","lib/annotations/validation/Max.js":"./browser/lib/annotations/validation/Max.js","lib/annotations/validation/Min.js":"./browser/lib/annotations/validation/Min.js","lib/annotations/validation/Not.js":"./browser/lib/annotations/validation/Not.js","lib/annotations/validation/NotContains.js":"./browser/lib/annotations/validation/NotContains.js","lib/annotations/validation/NotEmpty.js":"./browser/lib/annotations/validation/NotEmpty.js","lib/annotations/validation/NotIn.js":"./browser/lib/annotations/validation/NotIn.js","lib/annotations/validation/NotNull.js":"./browser/lib/annotations/validation/NotNull.js","lib/annotations/validation/Validate.js":"./browser/lib/annotations/validation/Validate.js","lib/annotations/validation/Validator.js":"./browser/lib/annotations/validation/Validator.js","models/Model.js":"./browser/models/Model.js"},"gitHead":"3942015127ff8ee6432da3485d0ed3b7557567f5","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v3, v4, v5).\n\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize)\n\n### Latest sequelize (v5)\n```sh\nnpm install sequelize --save\n```\n```\nnpm install sequelize-typescript@next --save \n```\n\n### Older versions (v4, v3)\n```sh\nnpm install sequelize@4 --save\nnpm install sequelize@3 --save\n```\n```\nnpm install sequelize-typescript --save \n```\n\n### `reflect-metadata`\n[reflect-metadata](https://www.npmjs.com/package/reflect-metadata) is also required\n```\nnpm install reflect-metadata --save\n```\n\n### TypeScript Config\nYour `tsconfig.json` needs the following flags:\n```json\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n### Beta releases\nUse `next` tag for installing beta releases.\n```\nnpm install sequelize-typescript@next --save \n```\n\n#### Upcoming major release 🎉\nUse `canary` tag to install an alpha version of the upcoming `1.0.0`\n```\nnpm install sequelize-typescript@canary --save \n```\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `timestamps=false`\nPlease notice that the `timestamps` option is `false` by default. When setting `paranoid: true`,\nremember to also reactivate the timestamps.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe javascript type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the `@Column` annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        modelPaths: [__dirname + '/models']\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `modelPaths` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        modelPaths: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  modelPaths: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work \n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type \nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\nWhen including a model that has multiple relations you will need to use as property:\n```typescript\n  // In the class \"books\":\n  @DefaultScope({\n    include: [\n      {\n        // note as with the @BelongsTo Column name\n        as: \"author\",\n        model: () => Person,\n      },\n    ]\n  })\n  \n  // In a controller or outside of the model\n  Book.findAll({ include: [ as: \"author\", model: Person ] })  \n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are mostly identical to native\nsequelize except for the way model classes are referenced. So instead of referencing them directly a getter\nfunction `() => Model` is used instead. (⚠️ For scope functions, models are still referenced directly\n`full() { return {include: [Manufacturer] };}`)\n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n})\n@Scopes({\n  full: {\n    include: [() => Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n})\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to `@ForeignKey`. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n### One Sequelize instance per model \nYou cannot add one and the same model to multiple Sequelize instances with\ndifferently configured connections. So that one model will only work for one connection.\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@0.6.12-beta.3","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-JSx+pzbMYn4cQilhLw9+Q8R5Sy6/sglqlvoXziuKMOhwSGoRdV6wSrkRaE6bLOoPq0wUR7nMCY7jC2u1ElcJAA==","shasum":"aa2cfb901efe2def0dbd5b93208730781a8bcc20","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-0.6.12-beta.3.tgz","fileCount":514,"unpackedSize":311859,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc+tLYCRA9TVsSAnZWagAAfkwP/jlFZLmP/Swox6iyJi0+\nQx7FWQbWKGyu5myaRmVXJQC3UKfKoJnt2/wdZcSm1hycrhQHnqeVk6ouM+OD\nIAqDt6fnu2RUEQF0CsoE0ZXjg/etysaDdWjb3Yog6awRqF9O9acVgaxwsIY7\nyPblbiSWER25syPcKWZqb9+L59R0LXmvDawxicK5Kx4FY9WvFey7PX0gVQO+\nzRUGFRU/2ydt30/x+67H7qrLj+avTBS5flwSYLkMdQgLk/AUL3MbDLER2bSk\nB/x8jJ2ONwOqbvxAohnsK8ojN1U8VIVDynrQOYVNrBiH42zN/EJ1w+BOXpwj\nfFZWsfgMFqbLnuZvDSJazVcWq9tPzvRaSx58O6g31qIaMQ0xpxaGztdN4jck\nfBOKmMqwU29VPCeAT0GwS/uqwW2CgZp/m7Tey9ltfqPl1I1sXBhM4Y4+G3EQ\ndCVmqLdmDI0Od62V6VoUne1Nix1EtJY37n/Rc7ka3DWWqM04xP5oMTXOv9EJ\nO/yXJ0qAw65BN2SZrMpLnjFjjd6it8vuAAg6UB1p3smUPv0xmmxol2FnM8eU\nxR8mgr82WC82Pd/GQNiuaCj86VOIgkR6DP0ODVO8ZvoWhluJp2K1bh3L3XM/\njmM1ib4qJAiZ2fTgODH0z/8A4bdpHkfTKdNviiSAbfVvl0zS/vJnDxioWUh7\nacjY\r\n=PBUg\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDVPw80yqfBRSpD004SPNeE83WGW6sV4pMeNAyS6b4WIAIgboX3QJ8lnO8/EFHFMDtYTA+5uyg0f5NfKEMT6O3tJPM="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_0.6.12-beta.3_1559941847639_0.05480949664034873"},"_hasShrinkwrap":false},"1.0.0-beta.4":{"name":"sequelize-typescript","version":"1.0.0-beta.4","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha","cover":"nyc mocha","lint":"tslint -c tslint.json --project tsconfig.json","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"glob":"7.1.2"},"devDependencies":{"@types/bluebird":"3.5.25","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/node":"11.13.4","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","copyfiles":"2.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"5.13.1","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.4","ts-node":"7.0.1","tslint":"5.14.0","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"@types/bluebird":"*","@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":"^5.1.0"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"3c18952649b5243c46082abef98a8cacf5b1e72b","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v5).\n\n - [Installation](#installation)\n - [Upgrade to `sequelize-typescript@1`](#upgrade-to-sequelize-typescript1)\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Repository mode](#repository-mode)\n   - [How to enable repository mode?](#how-to-enable-repository-mode)\n   - [How to use repository mode?](#how-to-use-repository-mode)\n   - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n   - [Limitations of repository mode](#limitations-of-repository-mode)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize), additional typings as documented [here](http://docs.sequelizejs.com/manual/typescript.html) and [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install sequelize\nnpm install @types/bluebird @types/node @types/validator\nnpm install reflect-metadata\n```\n```\nnpm install sequelize-typescript@next\n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n## Upgrade to `sequelize-typescript@1`\n`sequelize-typescript@1` only works with `sequelize@5`. \nFor `sequelize@4` & `sequelize@3` use `sequelize-typescript@0.6`.\n\n### Breaking Changes\nAll breaking changes of `sequelize@5` are also valid for `sequelize-typescript@1`. \nSee [Upgrade to v5](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md) for details.\n\n#### Official Sequelize Typings\nsequelize-typescript now uses the official typings bundled with sequelize \n(See [this](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md#typescript-support)).\nPlease note the following details:\n- Most of the sequelize-typescript interfaces of the previous version are replaced by the official ones\n- `@types/sequelize` is no longer used\n- `@types/bluebird` is no longer an explicit dependency\n- The official typings are less strict than the former sequelize-typescript ones\n\n#### Sequelize Options\n- `SequelizeConfig` renamed to `SequelizeOptions`\n- `modelPaths` property renamed to `models`\n\n#### Scopes Options\nThe `@Scopes` and `@DefaultScope` decorators now take lambda's as options\n```ts\n@DefaultScope(() => ({...}))\n@Scopes(() => ({...}))\n```\ninstead of deprecated way:\n```ts\n@DefaultScope({...})\n@Scopes({...}))\n```\n\n### Repository Mode\nWith `sequelize-typescript@1` comes a repository mode. See [docs](#repository-mode) for details.\n\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models'], // or [Player, Team],\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  models: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work \n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type \nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Repository mode\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions. \nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\nEnable repository mode by setting `repositoryMode` flag:\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n### How to use repository mode?\nRetrieve repository to create instances or perform search operations:\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({name: 'Luke Skywalker'});\nconst luke = await userRepository.findOne({where: {name: 'luke'}});\n```\n### How to use associations with repository mode?\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({include: [addressRepository]});\nuserRepository.create({name: 'Bear'}, {include: [addressRepository]});\n```\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n```typescript\n@Scopes(() => ({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  }\n}))\n@Table\nclass User extends Model<User> {}\n```\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are identical to native\nsequelize (See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope(() => ({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n}))\n@Scopes(() => ({\n  full: {\n    include: [Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n}))\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n\n### One Sequelize instance per model (without repository mode)\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple \nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@1.0.0-beta.4","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-aCtLX2Y453r+DEGMSgfyXrAibyCT1JYNOdNZ3g+banGgH0SqLHlBX4ZnFci5MC/2kxPMqXEAmlVdhecXG2szSQ==","shasum":"7cd0800b5b0d48254299d7f845232e56bcaf6bcd","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0-beta.4.tgz","fileCount":297,"unpackedSize":187255,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdUFA+CRA9TVsSAnZWagAASFoP/RZRORDosHZfIac8EqU3\nrIPGtb4a588g7qyFgFxjXBFY4tiVO5CsTbtFYK9/HUrwz5UHjAorNzMZr6ZQ\nnBsDt/dhK0SI1LUGty+bmk1+ZghZt6w082//QTkMO96iUZW0cwuRMlPBXaAS\nFJ33tFlS3r7ShHa0Ma7cC2nB1PoruPpXgeyEkwYMoSzsNtS8dBJG79vV0OJk\nSvZnba/zQ17/SzXkO9+elHgucJpx9THqTC8fhVEgLUSYH1unsLr2KoYvGcYA\ncjH96ecPau2z+vQXxWNXxvUa07VjGO/exZceXBlbF9DaM5xLMNTrWhd8SFjg\nA2OdcMe0hD3SCnnPudUADxG9APtdseH6ZlEh1ScKpaGabxx89J7tnlOIkrE6\nvw6MDVleazf/U5bKs11/8Q4NzLa6fK/n2eZlArH95Ginlc896KYGpkm/+g8s\nKFe+c8UrHQ/BtSoKak/nqsqxxpWJcQSOJgkl/T5Q2KRmMoHTUp+St6bS0zsq\nFOVjxK54KRuVfpaL4kpG8qMd0BtkjBoB3VvOYi8//6CQvzbY5wdQqeQNsIHD\nVT3uNn9g6NtEPR8DIZoSrzVKsXwrviWnfKbt8kFBejTn2u9Oodt1XsI3AvL8\npmUUfeIg47a6882h+OLYRxHzOtuzIsyF0t+iQ4aozQpAQRM53hSBUOwXlLCA\nj8jo\r\n=WcXo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDQcnfe5E6+DUsmalGjgLeSRdAbP/kRikWya+z8NljBwQIhAK0dW5RBTrbz/xHgo4CuPx7cEbKPNMXbqN65MzzhsQTu"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0-beta.4_1565544509743_0.9388411507220105"},"_hasShrinkwrap":false},"1.0.0":{"name":"sequelize-typescript","version":"1.0.0","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha","cover":"nyc mocha","lint":"tslint -c tslint.json --project tsconfig.json","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"glob":"7.1.2"},"devDependencies":{"@types/bluebird":"3.5.25","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/node":"11.13.4","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","copyfiles":"2.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"5.13.1","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.4","ts-node":"7.0.1","tslint":"5.14.0","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"@types/bluebird":"*","@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":"^5.1.0"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"bbe49dc51e1a1b36d9d37a219a612c181b7d505a","_id":"sequelize-typescript@1.0.0","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-oXyvHRTOyI8sJettpISL5LO30GaMMrLqzxiLCy6MjUmBJdaQDpdjn7ofge4J87MSdw+YPzkjrJLogMc9ONY2Tg==","shasum":"0301059cfcef117a5bf249cc2ea85233de2d3ee5","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.0.0.tgz","fileCount":297,"unpackedSize":187472,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdXZz1CRA9TVsSAnZWagAAIbAP/icKTxn8+BSqK6Vl6az6\nlwvskDeP1RvJVoGv8rGR2AtA36ExCnxStRcnQMFAr+EZi1t4dte/moWZPKZH\nefGNQ4RhW85s1Xh71A06BVz/ronhWfo+IVEGg/r9eol+IpkwLZWnUV01W6lT\neT7sUQUse6kjEGKscC9NG/rT86qE3FaNjcleRJkMhNMj6CJWXTA4E0mK0ye7\nJE7a6vec0421xSAmsf1rII3w1FZ/reV2edwjJYJbBeN06Ugn7ZPJa6cv1Cyk\noTTJ6QFYj6M9OLdvIh4l21bu5VeFyo/DOuw/uGF9SSmvpXt9Wt/VECMy83At\nXf6jfb13A59AZ98GWWaYzgyLrRWySubl9sMZsk/nHZwcMIMxs1grHmzw68yC\nkY3KHLlCJAtJXieVVLzG4F2n0J7wGHsg+Ycj84iuwdQttptIDRXFmf5HO6eT\nFJRb653ZyE7/L0Jppp/xpacC5ucQ/jTcifoNKNkrDgxRq6/ylgUjSB/lO87o\niFgANLl7sBFbRzlpb2e08Go8WUN+Iex61ymhl0Ipe4m6zamrIWf13rxYuLTH\ngIYPRA3q4DHYF9gV0JKohVYgbef67iTPfox38uOGlxa2YZO5ittjXspnFLaG\nq70G4tVeucqBtoZbwK6VzvrUzmrZlBf+ToAGsobGEU1wd5TDUcbxm7DxmqgS\nfM34\r\n=sgSn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICnIGGkWSgU+1rKLctkRsIWcJnNTIyw/Ahc7DMpvQqlyAiEAhLZ8Qrw41kDgNzJ+MSsk18X6w0N/PMJW5uUdonlhkqg="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.0.0_1566416116980_0.8049194541910596"},"_hasShrinkwrap":false},"1.1.0-beta.0":{"name":"sequelize-typescript","version":"1.1.0-beta.0","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha","cover":"nyc mocha","lint":"tslint -c tslint.json --project tsconfig.json","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","browser":"dist/browser/index.js","dependencies":{"glob":"7.1.2"},"devDependencies":{"@types/bluebird":"3.5.25","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/node":"11.13.4","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","copyfiles":"2.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"5.13.1","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.4","ts-node":"7.0.1","tslint":"5.14.0","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"@types/bluebird":"*","@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":"^5.1.0"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"397a77bd7ef1ea88766811801a08fd589de3ad88","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v5).\n\n - [Installation](#installation)\n - [Upgrade to `sequelize-typescript@1`](#upgrade-to-sequelize-typescript1)\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Repository mode](#repository-mode)\n   - [How to enable repository mode?](#how-to-enable-repository-mode)\n   - [How to use repository mode?](#how-to-use-repository-mode)\n   - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n   - [Limitations of repository mode](#limitations-of-repository-mode)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize), additional typings as documented [here](http://docs.sequelizejs.com/manual/typescript.html) and [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install sequelize\nnpm install @types/bluebird @types/node @types/validator\nnpm install reflect-metadata\n```\n```\nnpm install sequelize-typescript\n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n### ⚠️ sequelize@4\n`sequelize@4` requires `sequelize-typescript@0.6`. See \n[documentation](https://github.com/RobinBuschmann/sequelize-typescript/tree/0.6.X) for version `0.6`.\n```\nnpm install sequelize-typescript@0.6\n```\n\n## Upgrade to `sequelize-typescript@1`\n`sequelize-typescript@1` only works with `sequelize@5>=`. \nFor `sequelize@4` & `sequelize@3` use `sequelize-typescript@0.6`.\n\n### Breaking Changes\nAll breaking changes of `sequelize@5` are also valid for `sequelize-typescript@1`. \nSee [Upgrade to v5](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md) for details.\n\n#### Official Sequelize Typings\nsequelize-typescript now uses the official typings bundled with sequelize \n(See [this](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md#typescript-support)).\nPlease note the following details:\n- Most of the sequelize-typescript interfaces of the previous version are replaced by the official ones\n- `@types/sequelize` is no longer used\n- `@types/bluebird` is no longer an explicit dependency\n- The official typings are less strict than the former sequelize-typescript ones\n\n#### Sequelize Options\n- `SequelizeConfig` renamed to `SequelizeOptions`\n- `modelPaths` property renamed to `models`\n\n#### Scopes Options\nThe `@Scopes` and `@DefaultScope` decorators now take lambda's as options\n```ts\n@DefaultScope(() => ({...}))\n@Scopes(() => ({...}))\n```\ninstead of deprecated way:\n```ts\n@DefaultScope({...})\n@Scopes({...}))\n```\n\n### Repository Mode\nWith `sequelize-typescript@1` comes a repository mode. See [docs](#repository-mode) for details.\n\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models'], // or [Player, Team],\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  models: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work \n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type \nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Repository mode\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions. \nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\nEnable repository mode by setting `repositoryMode` flag:\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n### How to use repository mode?\nRetrieve repository to create instances or perform search operations:\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({name: 'Luke Skywalker'});\nconst luke = await userRepository.findOne({where: {name: 'luke'}});\n```\n### How to use associations with repository mode?\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({include: [addressRepository]});\nuserRepository.create({name: 'Bear'}, {include: [addressRepository]});\n```\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n```typescript\n@Scopes(() => ({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  }\n}))\n@Table\nclass User extends Model<User> {}\n```\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are identical to native\nsequelize (See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope(() => ({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n}))\n@Scopes(() => ({\n  full: {\n    include: [Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n}))\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n\n### One Sequelize instance per model (without repository mode)\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple \nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@1.1.0-beta.0","_nodeVersion":"10.15.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-WBfnPmmo2YnlBkYZ/WQVAmg0ylts+c/uyg4uPnHOAdgihs2NYk+YkXYRarW3ud53hg+mmdO7ywlm+zzLQsGD1w==","shasum":"56b06b1ebec0b8a2a4ae1ced39f8782ea1f07f43","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.1.0-beta.0.tgz","fileCount":299,"unpackedSize":194775,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdkKqsCRA9TVsSAnZWagAA56cP/0tg3grtZxR1h0X+PtFa\ntPd8wZ+bIb56w+oPQppgJSHTIttG4DiN246ERs4zbLxAne73NgyVQqlouUIW\n0vJ62QADr9uzaRnR/WAxkLrZ4w9P1m66TZwzPXHAVTYBmEVyWkOuw2Log4rN\nRn3aAMlkIESZy7VfOfvlE9HhtHwKPV1ExaSKtntPGnU+zqw6PGoojXt93YGr\ngN9WO2cZRZ0GiqrQnygxbZVabOxZusktCzOGGsiI+Obvg41E2RKA6uAyk/bA\nWpDlc5Mtp++fQyVmlAOa5LixSOsCuxCtjXq6W08lNIv76N4VAZVd2jdyuiYR\nkpko3ygURW152qYryILwdmvq+a8YUVx7RyufzTXt1ZCn0II410lD4xHIfvQv\nGPW/u+ewwf+kFQIPM6kKlF+jANUrWFp8PxNeShLC2k1C3HawNT+6ohS1GIr7\ngpgisJkchAF/nkuWbBYDEPqioFW/lB+iOGSewFW98wf8VmfH4BeFlrdOVojx\niUnsbYGD8/FyYhTYl2MGMgoJh/crx2fFEU0mz+L/LiL8XFj+vtH9l1BlViRH\nPNt2kdHGAQak+sU/EIeF8eXbqKmRVffek53YrN37My5BEQ5OSaNOWVuLDcNb\nzIRT55pGmB6AtsLaSQGLnGxPOqO0kvJzMup5ZPXChh4SF+r0t8a6i4FovENk\nlpit\r\n=xZsf\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGZBZ7lf4evcNIDRe3+SSz1H2/SFO1nVSFAfAB5P2ygaAiA9EKlSupev4pBpROMCZl/ZqYVigsbMnWTWM2LgQLMqzQ=="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.1.0-beta.0_1569761964039_0.06782606092156795"},"_hasShrinkwrap":false},"1.1.0-beta.1":{"name":"sequelize-typescript","version":"1.1.0-beta.1","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha","cover":"nyc mocha","lint":"tslint -c tslint.json --project tsconfig.json","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","browser":"dist/browser/index.js","dependencies":{"glob":"7.1.2"},"devDependencies":{"@types/bluebird":"3.5.25","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/node":"11.13.4","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","copyfiles":"2.1.0","has-flag":"2.0.0","lodash":"4.17.11","mocha":"5.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"5.15.1","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.4","ts-node":"7.0.1","tslint":"5.14.0","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"@types/bluebird":"*","@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":"^5.1.0"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"07febc3a8558d4acf4aae53674c140f0b569b896","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v5).\n\n - [Installation](#installation)\n - [Upgrade to `sequelize-typescript@1`](#upgrade-to-sequelize-typescript1)\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Repository mode](#repository-mode)\n   - [How to enable repository mode?](#how-to-enable-repository-mode)\n   - [How to use repository mode?](#how-to-use-repository-mode)\n   - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n   - [Limitations of repository mode](#limitations-of-repository-mode)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize), additional typings as documented [here](http://docs.sequelizejs.com/manual/typescript.html) and [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install sequelize\nnpm install @types/bluebird @types/node @types/validator\nnpm install reflect-metadata\n```\n```\nnpm install sequelize-typescript\n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n### ⚠️ sequelize@4\n`sequelize@4` requires `sequelize-typescript@0.6`. See \n[documentation](https://github.com/RobinBuschmann/sequelize-typescript/tree/0.6.X) for version `0.6`.\n```\nnpm install sequelize-typescript@0.6\n```\n\n## Upgrade to `sequelize-typescript@1`\n`sequelize-typescript@1` only works with `sequelize@5>=`. \nFor `sequelize@4` & `sequelize@3` use `sequelize-typescript@0.6`.\n\n### Breaking Changes\nAll breaking changes of `sequelize@5` are also valid for `sequelize-typescript@1`. \nSee [Upgrade to v5](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md) for details.\n\n#### Official Sequelize Typings\nsequelize-typescript now uses the official typings bundled with sequelize \n(See [this](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md#typescript-support)).\nPlease note the following details:\n- Most of the sequelize-typescript interfaces of the previous version are replaced by the official ones\n- `@types/sequelize` is no longer used\n- `@types/bluebird` is no longer an explicit dependency\n- The official typings are less strict than the former sequelize-typescript ones\n\n#### Sequelize Options\n- `SequelizeConfig` renamed to `SequelizeOptions`\n- `modelPaths` property renamed to `models`\n\n#### Scopes Options\nThe `@Scopes` and `@DefaultScope` decorators now take lambda's as options\n```ts\n@DefaultScope(() => ({...}))\n@Scopes(() => ({...}))\n```\ninstead of deprecated way:\n```ts\n@DefaultScope({...})\n@Scopes({...}))\n```\n\n### Repository Mode\nWith `sequelize-typescript@1` comes a repository mode. See [docs](#repository-mode) for details.\n\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n \n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options) \n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has \n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another \nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n  \n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal \n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) \nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be \nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n \n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n  \n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n \n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize. \n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!). \n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models'], // or [Player, Team],\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the \nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or \n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  models: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work \n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize \n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n     \n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n     \n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n  \n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n  \n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n     \n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> { \n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type \nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and \n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class \n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class \n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value \n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options \n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n \n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> { \n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n  \n  @BelongsTo(() => Person)\n  author: Person; \n  \n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n  \n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person; \n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person; \n  \n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*. \nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or \n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add` \nfunctions. \n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Repository mode\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions. \nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\nEnable repository mode by setting `repositoryMode` flag:\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n### How to use repository mode?\nRetrieve repository to create instances or perform search operations:\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({name: 'Luke Skywalker'});\nconst luke = await userRepository.findOne({where: {name: 'luke'}});\n```\n### How to use associations with repository mode?\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({include: [addressRepository]});\nuserRepository.create({name: 'Bear'}, {include: [addressRepository]});\n```\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n```typescript\n@Scopes(() => ({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  }\n}))\n@Table\nclass User extends Model<User> {}\n```\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for \nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')` \nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter. \n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations) \nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n                                 \n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are identical to native\nsequelize (See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope(() => ({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n}))\n@Scopes(() => ({\n  full: {\n    include: [Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n}))\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations \n\n### One Sequelize instance per model (without repository mode)\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple \nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata` \ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName` \nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`. \nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo, \naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@1.1.0-beta.1","_nodeVersion":"10.17.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-b4Jj3U2DIBV7UQZnz0GigC6UsDHTX5Lz+tS42tQQVXR+R6bURH4XkGFWQCTwu2rd9phpEnVqzYDc7PAJg9so7w==","shasum":"82518ca99bc13f1de0a917f5b5face55fc109af1","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.1.0-beta.1.tgz","fileCount":299,"unpackedSize":194885,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdwdk6CRA9TVsSAnZWagAAW5sP/0CWYJn1702dbfVh67RQ\nh157DP4KsuAFcoGlQ1f4nyiec4tRMAkcs/ST/ZgyAygS1d8LwJS0iLxnvrFi\nffhzS7DOVEs0WT8X+/1rFHCbI9x7slwMWAt/ElV/jdUks1/RaEA7JbRm4tn+\nBnradq9fOFCh9p9/lAwH6It+GHGTl2zi4mc1wHLOvhvbc502rKa0jGQ4ECAA\nUMUKcvyUMIHEUp4zIjE7LRbu/tXMjPJtvrC1vXVIJbNzLyJRFxhszRsInm/n\n0+xrHfeibtq9fobZG0YD6GG1O8XjLGBQmzqt4RxMVOfu2iiFkdp9lFCh3P/c\nZPOaWsrsE46YMJffF9v3Rf4d9zQfmkmnQKZR+2p+sFLqNSuVynGmDIBsGb38\nDwOYuGh6KpmQupKyttfu+Kei24huvCv61nvu1PnhsCMphm2IJ+qm0PVuqINy\n3zSdGSSvj891UcJ7yrB26rJ64rpx+ZgcxuSS6X5HZpvaGw0+bRCS7sYL38/j\nS1LSertYPdnziuc9nikrms8xr3VjEdV47QhABa68WVBcADWZedMh6K4NuM/h\nhuj+cBudED9cacinKpFT1uh/EyLowPmOVJK1Ki5EOgfJZCnmFzMyk6YPwju2\nrZ/z6VyZ/BhaP0XW0K62N8KXbtYWwVkTveTFERqMY2+R25QCOsGyAhjvz1PA\n+w3L\r\n=PR+J\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDn9vcw1FnFBklEJ+QHvpZKI5Z4QyOhk6FMASpn+WhiOwIhAI3O0n1TjvrTPNcuu10dgkDM+xmiUjiQu3HOWe+cUgXA"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.1.0-beta.1_1572985146409_0.5781845337984708"},"_hasShrinkwrap":false},"1.1.0-beta.2":{"name":"sequelize-typescript","version":"1.1.0-beta.2","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha","cover":"nyc mocha","lint":"tslint -c tslint.json --project tsconfig.json","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","browser":"dist/browser/index.js","dependencies":{"glob":"7.1.2"},"devDependencies":{"@types/bluebird":"3.5.25","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/node":"11.13.4","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","copyfiles":"2.1.0","has-flag":"2.0.0","lodash":"4.17.13","mocha":"5.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"5.15.1","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.4","ts-node":"7.0.1","tslint":"5.14.0","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"@types/bluebird":"*","@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":"^5.1.0"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"928bd26fafe09b792e6dc25dc7eee1f6026637f1","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v5).\n\n - [Installation](#installation)\n - [Upgrade to `sequelize-typescript@1`](#upgrade-to-sequelize-typescript1)\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Indexes](#indexes)\n   - [`@Index` API](#index)\n   - [`createIndexDecorator()` API](#createindexdecorator)\n - [Repository mode](#repository-mode)\n   - [How to enable repository mode?](#how-to-enable-repository-mode)\n   - [How to use repository mode?](#how-to-use-repository-mode)\n   - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n   - [Limitations of repository mode](#limitations-of-repository-mode)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize), additional typings as documented [here](http://docs.sequelizejs.com/manual/typescript.html) and [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install sequelize\nnpm install @types/bluebird @types/node @types/validator\nnpm install reflect-metadata\n```\n```\nnpm install sequelize-typescript\n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n### ⚠️ sequelize@4\n`sequelize@4` requires `sequelize-typescript@0.6`. See\n[documentation](https://github.com/RobinBuschmann/sequelize-typescript/tree/0.6.X) for version `0.6`.\n```\nnpm install sequelize-typescript@0.6\n```\n\n## Upgrade to `sequelize-typescript@1`\n`sequelize-typescript@1` only works with `sequelize@5>=`.\nFor `sequelize@4` & `sequelize@3` use `sequelize-typescript@0.6`.\n\n### Breaking Changes\nAll breaking changes of `sequelize@5` are also valid for `sequelize-typescript@1`.\nSee [Upgrade to v5](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md) for details.\n\n#### Official Sequelize Typings\nsequelize-typescript now uses the official typings bundled with sequelize\n(See [this](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md#typescript-support)).\nPlease note the following details:\n- Most of the sequelize-typescript interfaces of the previous version are replaced by the official ones\n- `@types/sequelize` is no longer used\n- `@types/bluebird` is no longer an explicit dependency\n- The official typings are less strict than the former sequelize-typescript ones\n\n#### Sequelize Options\n- `SequelizeConfig` renamed to `SequelizeOptions`\n- `modelPaths` property renamed to `models`\n\n#### Scopes Options\nThe `@Scopes` and `@DefaultScope` decorators now take lambda's as options\n```ts\n@DefaultScope(() => ({...}))\n@Scopes(() => ({...}))\n```\ninstead of deprecated way:\n```ts\n@DefaultScope({...})\n@Scopes({...}))\n```\n\n### Repository Mode\nWith `sequelize-typescript@1` comes a repository mode. See [docs](#repository-mode) for details.\n\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n\n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options)\n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has\n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another\nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n\n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal\n(all [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) from js type\n `@Column(dataType: DateType)`        | sets [dataType](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be\nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n\n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n\n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n\n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize.\n(See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!).\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models'], // or [Player, Team],\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the\nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or\n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  models: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work\n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize\n[docs](http://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n\n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n\n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n\n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n\n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n\n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> {\n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type\nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and\n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class\n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class\n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n\n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> {\n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n\n  @BelongsTo(() => Person)\n  author: Person;\n\n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n\n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person;\n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person;\n\n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*.\nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or\n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add`\nfunctions.\n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Indexes\n\n### `@Index`\nThe `@Index` annotation can be used without passing any parameters.\n```typescript\n@Table\nclass Person extends Model<Person> {\n  @Index // Define an index with default name\n  @Column\n  name: string;\n\n  @Index // Define another index\n  @Column\n  birthday: Date;\n}\n```\n\nTo specify index and index field options, use\nan object literal (see [indexes define option](https://sequelize.org/v5/manual/models-definition.html#indexes)):\n```typescript\n@Table\nclass Person extends Model<Person> {\n  @Index('my-index') // Define a multi-field index on name and birthday\n  @Column\n  name: string;\n\n  @Index('my-index') // Add birthday as the second field to my-index\n  @Column\n  birthday: Date;\n\n  @Index({\n    // index options\n    name: 'job-index',\n    parser: 'my-parser',\n    type: 'UNIQUE',\n    unique: true,\n    where: { isEmployee: true },\n    concurrently: true,\n    using: 'BTREE',\n    operator: 'text_pattern_ops',\n    prefix: 'test-',\n    // index field options\n    length: 10,\n    order: 'ASC',\n    collate: 'NOCASE',\n  })\n  @Column\n  jobTitle: string;\n\n  @Column\n  isEmployee: boolean;\n}\n```\n\n#### Index API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@Index`                                 | adds new index on decorated field to `options.indexes`\n `@Index(name: string)`                   | adds new index or adds the field to an existing index with specified name\n `@Table(options: IndexDecoratorOptions)` | sets both index and index field [options](https://sequelize.org/v5/manual/models-definition.html#indexes)\n\n### `createIndexDecorator()`\nThe `createIndexDecorator()` function can be used to create a decorator for an index with options specified with an object literal supplied as the argument. Fields are added to the index by decorating properties.\n```typescript\nconst SomeIndex = createIndexDecorator();\nconst JobIndex = createIndexDecorator({\n  // index options\n  name: 'job-index',\n  parser: 'my-parser',\n  type: 'UNIQUE',\n  unique: true,\n  where: { isEmployee: true },\n  concurrently: true,\n  using: 'BTREE',\n  operator: 'text_pattern_ops',\n  prefix: 'test-',\n});\n\n@Table\nclass Person extends Model<Person> {\n  @SomeIndex // Add name to SomeIndex\n  @Column\n  name: string;\n\n  @SomeIndex // Add birthday to SomeIndex\n  @Column\n  birthday: Date;\n\n  @JobIndex({\n    // index field options\n    length: 10,\n    order: 'ASC',\n    collate: 'NOCASE',\n  })\n  @Column\n  jobTitle: string;\n\n  @Column\n  isEmployee: boolean;\n}\n```\n\n## Repository mode\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions.\nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\nEnable repository mode by setting `repositoryMode` flag:\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n### How to use repository mode?\nRetrieve repository to create instances or perform search operations:\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({name: 'Luke Skywalker'});\nconst luke = await userRepository.findOne({where: {name: 'luke'}});\n```\n### How to use associations with repository mode?\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({include: [addressRepository]});\nuserRepository.create({name: 'Bear'}, {include: [addressRepository]});\n```\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n```typescript\n@Scopes(() => ({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  }\n}))\n@Table\nclass User extends Model<User> {}\n```\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for\nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')`\nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter.\n\nSee sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/models-definition.html#validations)\nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n\n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are identical to native\nsequelize (See sequelize [docs](http://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope(() => ({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n}))\n@Scopes(() => ({\n  full: {\n    include: [Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n}))\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations\n\n### One Sequelize instance per model (without repository mode)\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple\nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata`\ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName`\nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`.\nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo,\naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@1.1.0-beta.2","_nodeVersion":"10.17.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-6DTypdf9Kscd/T6tpwoSIfsTRy3gcJHgPDJy6wEprkEJBJc7SRWFRT5ill9vz4RZSJRzx0MhhPU95tYbFW9w8g==","shasum":"2d629571eb31857329df41425a97cbbfc9d3ce40","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.1.0-beta.2.tgz","fileCount":305,"unpackedSize":203997,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd7Q+cCRA9TVsSAnZWagAAQA4QAJtob4LLz9B88sAcBmMK\nAoAzYCK6HfS8pSs5L7Q/ai4AkqvwWcXmlYCNfpjPjycNOJHql1eJY9unV7jS\nqlJdusMQi071+lVbIDSgB4j5QfbWLb6u6V1dX3hkW5EqAzQEoNwBVWDfd+Mx\nzED0mSWxKAoh0IHn+AXM0mvMpo5vaNxd6a00MEGLnIcWJ0hqITJlkQRNQqdN\npBUKIzDKNCWSaITCjoHzn1zjBQP3M4Zh38d29lfGRQyjzibSn9e5mKr1ZXHZ\nE+6VqGh3QKfavZaxO94hXGjf4uAO6X54vf6JZZvZ5OahsWrAV7iXcguRs/Pn\nygDuoKr4Bts9kFHoT66EWSdyUf2f0LVVY2cUv2RwjfId32AYou24fJALzmPY\nBfOBbARHxzjE3s0ZhNVqgdEIrkgmjME+VNESYIU09Ff8PEySCCO8hj1CehRX\nMS0oVxAc0oPt5QRlgW4VsidWwkjY9qcQHAiXdSSei7a6SBf82RkQtK3fRSbk\nnxuO2td6n6+lqSbdf3iXbqGcUPhzgKMwlgQ7NxgVQ1SLeFD0PFP7sX4fEAms\nZ+Z0mjsjN0ApN4ecGUDbAJ8OQxSanBNi9rW9sL3rlG0aMOLijfR4isme3QO5\nt2CvHg1sS/RfdXmFnE4ozmBLr18uc4hYQAbr32sKtD789nLNjmgQWB9aNQXJ\nSnmb\r\n=TZee\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICMoNOsEg9LbUMc3dFIXaKthkTtyCbT9mWl5uP0JJDzFAiEAs9hZl/1CtNC54M49eTbiojHA0IpRlZegIvDh7HrmjIg="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.1.0-beta.2_1575817116180_0.4013087888568294"},"_hasShrinkwrap":false},"1.1.0":{"name":"sequelize-typescript","version":"1.1.0","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha","cover":"nyc mocha","lint":"tslint -c tslint.json --project tsconfig.json","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","browser":"dist/browser/index.js","dependencies":{"glob":"7.1.2"},"devDependencies":{"@types/bluebird":"3.5.25","@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/node":"11.13.4","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.1.0","copyfiles":"2.1.0","has-flag":"2.0.0","lodash":"4.17.13","mocha":"5.2.0","moment":"2.21.0","mysql2":"1.3.5","nyc":"13.3.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"5.15.1","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"4.0.4","ts-node":"7.0.1","tslint":"5.14.0","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"@types/bluebird":"*","@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":"^5.1.0"},"engines":{"node":">=0.8.15"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"3afde3a8c200b3e7d06ee49cf1f91b2803f0626d","_id":"sequelize-typescript@1.1.0","_nodeVersion":"10.17.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-FAPEQPeAhIaFQNLAcf9Q2IWcqWhNcvn5OZZ7BzGB0CJMtImIsGg4E/EAb7huMmPaPwDArxJUWGqk1KurphTNRA==","shasum":"d5c2945e7fbfe55a934917b27d84589858d79123","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-1.1.0.tgz","fileCount":305,"unpackedSize":203990,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd7RClCRA9TVsSAnZWagAAFFkQAIFyjFMElOvDO72IFC1R\nGXqO8ShQUn4F1fk7PglCip4gIhyCZiG4Chkf6I4NEdqJeA//zQJ9SsFLMjgN\ndcjkS0toiMJ+zqhzcPIVl9s4WwbPu7Zs1YLqbivp3+hMZ7Wut6NS6yndtWIZ\npXzy4uWprHEB+DAgozIJZ728Uk3qKMuL4uA9yZ4jCTJQ3fGGnPhddK/+E3D3\nloeUFGor5KLALcKvigSlM6yKr6gOIIEMXzYI16ayxIEyVPUfA8Dq7gzeF6UV\nxvc0Omhn6kCaco+D6jbg5ih4278ymkBpdHNaZCzmPmV1q+PQaUq2nccgmm1t\n4RC30725ncphPIerjoIDxUvilDyGMlaEcRW1zRKRM2beHN6f/e1dxor8/8ac\nUDbiDIB3TG5st6dn0bfQoDAG22XGVY3WKw4wcavoCCHmDEYoJ6UDuNFMH8qi\nffwEVkGZUYS97cWG21WuMPrBk9p9sz/IMM6X6emGqdxe2pKne/bIg2HprEpG\nw/7vUUusyCUdKdaA15mAWIZZaCMVg4qGzdvnaQIOwzFZzeifL7XGwlAw2YQx\nWmJ1C23TcaLBKkDlxpoemZz/88CBwsstVygyV2i8psavc3178ifU+iWLWhFC\nEtSi6HYYoPf3jIFxo71s8NIy60aIdi9zbuEJU/peQgYC6CTkfQT5tBtRW1UG\n1GNy\r\n=mLWp\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCEjInA+sByl4LQKNhrt9Jra23+LGcE/swCoKFWBvcWYAIhAIVkApMBR8zGT687QSJ5QO4WdkxdpgjqLYjgOdRScjY4"}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_1.1.0_1575817380413_0.19230051559803707"},"_hasShrinkwrap":false},"2.0.0-beta.0":{"name":"sequelize-typescript","version":"2.0.0-beta.0","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha test/**/*.spec.ts","cover":"nyc mocha test/**/*.spec.ts","lint":"tslint -c tslint.json --project tsconfig.json","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","browser":"dist/browser/index.js","dependencies":{"glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/node":"11.13.4","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.6.5","copyfiles":"2.3.0","has-flag":"2.0.0","lodash":"4.17.19","mocha":"8.0.1","moment":"2.21.0","mysql2":"1.3.5","nyc":"15.1.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"6.1.1","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"5.0.0","ts-node":"7.0.1","tslint":"5.14.0","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"@types/bluebird":"*","@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":"^6.0.0"},"engines":{"node":">=10.0.0"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"4684da7c108f8ccb7fc91701a87e0a50e6f22422","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v5).\n\n - [Installation](#installation)\n - [Upgrade to `sequelize-typescript@1`](#upgrade-to-sequelize-typescript1)\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Indexes](#indexes)\n   - [`@Index` API](#index)\n   - [`createIndexDecorator()` API](#createindexdecorator)\n - [Repository mode](#repository-mode)\n   - [How to enable repository mode?](#how-to-enable-repository-mode)\n   - [How to use repository mode?](#how-to-use-repository-mode)\n   - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n   - [Limitations of repository mode](#limitations-of-repository-mode)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize), additional typings as documented [here](https://docs.sequelizejs.com/manual/typescript.html) and [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install sequelize\nnpm install @types/bluebird @types/node @types/validator\nnpm install reflect-metadata\n```\n```\nnpm install sequelize-typescript\n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n### ⚠️ sequelize@4\n`sequelize@4` requires `sequelize-typescript@0.6`. See\n[documentation](https://github.com/RobinBuschmann/sequelize-typescript/tree/0.6.X) for version `0.6`.\n```\nnpm install sequelize-typescript@0.6\n```\n\n## Upgrade to `sequelize-typescript@1`\n`sequelize-typescript@1` only works with `sequelize@5>=`.\nFor `sequelize@4` & `sequelize@3` use `sequelize-typescript@0.6`.\n\n### Breaking Changes\nAll breaking changes of `sequelize@5` are also valid for `sequelize-typescript@1`.\nSee [Upgrade to v5](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md) for details.\n\n#### Official Sequelize Typings\nsequelize-typescript now uses the official typings bundled with sequelize\n(See [this](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md#typescript-support)).\nPlease note the following details:\n- Most of the sequelize-typescript interfaces of the previous version are replaced by the official ones\n- `@types/sequelize` is no longer used\n- `@types/bluebird` is no longer an explicit dependency\n- The official typings are less strict than the former sequelize-typescript ones\n\n#### Sequelize Options\n- `SequelizeConfig` renamed to `SequelizeOptions`\n- `modelPaths` property renamed to `models`\n\n#### Scopes Options\nThe `@Scopes` and `@DefaultScope` decorators now take lambda's as options\n```ts\n@DefaultScope(() => ({...}))\n@Scopes(() => ({...}))\n```\ninstead of deprecated way:\n```ts\n@DefaultScope({...})\n@Scopes({...}))\n```\n\n### Repository Mode\nWith `sequelize-typescript@1` comes a repository mode. See [docs](#repository-mode) for details.\n\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n\n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](https://sequelize.org/v5/manual/models-definition.html#configuration)\nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model<Person> {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](https://sequelize.org/v5/manual/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options)\n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has\n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another\nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n\n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal\n(all [attribute options](https://sequelize.org/v5/manual/models-definition.html#configuration)\nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](https://sequelize.org/v5/manual/models-definition.html#data-types) from js type\n `@Column(dataType: DataType)`        | sets [dataType](https://sequelize.org/v5/manual/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](https://sequelize.org/v5/manual/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be\nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n\n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model<Person> {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n\n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n\n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize.\n(See sequelize [docs](https://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!).\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models'], // or [Player, Team],\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the\nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or\n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model<User> {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  models: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model<User> {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model<User> {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work\n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize\n[docs](https://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n\n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n\n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model<Player> {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n\n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n\n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model<Team> {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n\n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model<Book> {\n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model<Author> {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model<BookAuthor> {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type\nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and\n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class\n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class\n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n\n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model<Book> {\n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n\n  @BelongsTo(() => Person)\n  author: Person;\n\n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n\n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model<Person> {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person;\n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person;\n\n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*.\nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or\n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add`\nfunctions.\n```typescript\n@Table\nclass ModelA extends Model<ModelA> {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model<ModelB> {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Indexes\n\n### `@Index`\nThe `@Index` annotation can be used without passing any parameters.\n```typescript\n@Table\nclass Person extends Model<Person> {\n  @Index // Define an index with default name\n  @Column\n  name: string;\n\n  @Index // Define another index\n  @Column\n  birthday: Date;\n}\n```\n\nTo specify index and index field options, use\nan object literal (see [indexes define option](https://sequelize.org/v5/manual/models-definition.html#indexes)):\n```typescript\n@Table\nclass Person extends Model<Person> {\n  @Index('my-index') // Define a multi-field index on name and birthday\n  @Column\n  name: string;\n\n  @Index('my-index') // Add birthday as the second field to my-index\n  @Column\n  birthday: Date;\n\n  @Index({\n    // index options\n    name: 'job-index',\n    parser: 'my-parser',\n    type: 'UNIQUE',\n    unique: true,\n    where: { isEmployee: true },\n    concurrently: true,\n    using: 'BTREE',\n    operator: 'text_pattern_ops',\n    prefix: 'test-',\n    // index field options\n    length: 10,\n    order: 'ASC',\n    collate: 'NOCASE',\n  })\n  @Column\n  jobTitle: string;\n\n  @Column\n  isEmployee: boolean;\n}\n```\n\n#### Index API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@Index`                                 | adds new index on decorated field to `options.indexes`\n `@Index(name: string)`                   | adds new index or adds the field to an existing index with specified name\n `@Table(options: IndexDecoratorOptions)` | sets both index and index field [options](https://sequelize.org/v5/manual/models-definition.html#indexes)\n\n### `createIndexDecorator()`\nThe `createIndexDecorator()` function can be used to create a decorator for an index with options specified with an object literal supplied as the argument. Fields are added to the index by decorating properties.\n```typescript\nconst SomeIndex = createIndexDecorator();\nconst JobIndex = createIndexDecorator({\n  // index options\n  name: 'job-index',\n  parser: 'my-parser',\n  type: 'UNIQUE',\n  unique: true,\n  where: { isEmployee: true },\n  concurrently: true,\n  using: 'BTREE',\n  operator: 'text_pattern_ops',\n  prefix: 'test-',\n});\n\n@Table\nclass Person extends Model<Person> {\n  @SomeIndex // Add name to SomeIndex\n  @Column\n  name: string;\n\n  @SomeIndex // Add birthday to SomeIndex\n  @Column\n  birthday: Date;\n\n  @JobIndex({\n    // index field options\n    length: 10,\n    order: 'ASC',\n    collate: 'NOCASE',\n  })\n  @Column\n  jobTitle: string;\n\n  @Column\n  isEmployee: boolean;\n}\n```\n\n## Repository mode\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions.\nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\nEnable repository mode by setting `repositoryMode` flag:\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n### How to use repository mode?\nRetrieve repository to create instances or perform search operations:\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({name: 'Luke Skywalker'});\nconst luke = await userRepository.findOne({where: {name: 'luke'}});\n```\n### How to use associations with repository mode?\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({include: [addressRepository]});\nuserRepository.create({name: 'Bear'}, {include: [addressRepository]});\n```\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n```typescript\n@Scopes(() => ({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  }\n}))\n@Table\nclass User extends Model<User> {}\n```\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for\nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')`\nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter.\n\nSee sequelize [docs](https://sequelize.org/v5/manual/models-definition.html#validations)\nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n\n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model<Shoe> {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are identical to native\nsequelize (See sequelize [docs](https://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope(() => ({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n}))\n@Scopes(() => ({\n  full: {\n    include: [Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n}))\n@Table\nexport class ShoeWithScopes extends Model<ShoeWithScopes> {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model<Person> {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations\n\n### One Sequelize instance per model (without repository mode)\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple\nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata`\ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName`\nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`.\nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo,\naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@2.0.0-beta.0","_nodeVersion":"10.17.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-xsKz2XdTzwcxcmk3CifrLcJoSuUzASqzOKCt1tKTg2OGZd+Hzasr6Rdl5Jhkx3hW9hZ3ScQQWpJkkXItlOhp5g==","shasum":"3e3740d411654a2f0d2fccdf7b708751dc4521bf","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-2.0.0-beta.0.tgz","fileCount":306,"unpackedSize":204187,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfDMZbCRA9TVsSAnZWagAAxhoP/j7zfu5NdchlvAL4Ivyh\nHGwTbJYSIdrlwPtqOZcitkYUf4XsPxU1Q0fdWDg4vOVaMT/jOb60yBJCsVSK\nMQ2jFfs6roAkHRT7wFTYMdmPczxb488qtweHHuS8/12LECDBt7Fn3qIxxk03\n0DotPCFiCGu+7K4sko5I/oejlzqlnQpG0JDo7fRgHVGPLXPtseMVkqQHADtX\nhY/EwtXYozUxkWyv7C2kGmQK4uMrLBeQmm4YT29QwnAd0Yn+JP6NEG7P7Qz4\n+1QxHzXTwQAtzEhUBtV4bCFsy2jIq2W4esoC7/rFWTP9s604lcdVZuMnPReY\n0ELEs/Fo6CdlqnjIwR1nE887WZdhkxHNNNUjlPongj2+us3oXlyVb7nWD7Rr\npmyUiyp54AXEQV187CfPqwJ6j2PkgYo7+CBy5q+0oxmbK8SPK+k6yA4ujC01\n+WjY+BzqiBOW55YDKz4NrYgfrsHWnE6nl/Y6NvMXVKj1jvHT7kQnE+pbYl4Z\nLp567UkW3qibZ8hv9YJemWQNB/1Gwb9ALpU5yEKJwwF7rMkai0tGEjzQtRVS\nZTjOuBJWgzwSfNX8jJ9X49GtNron/CQ40xKlrdx9nQq0oMWdswy3WLPry8vP\nLgSjMs36+rLQqGnxnFaFl7QYTIlGDz5ju+WEZbkZZK8gFjlt0Dv5b/hquRre\nrY3d\r\n=tJCV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC8eQpoPOQGluZpXKKfDaPFhuiq/Fi+NRrNSNyAUhIJWAIgfV+7CeACb8VOeQjDQIEJ9cgiMcEy5krtKQKckvcb+mY="}]},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_2.0.0-beta.0_1594672730844_0.6473264740386366"},"_hasShrinkwrap":false},"2.0.0-beta.1":{"name":"sequelize-typescript","version":"2.0.0-beta.1","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha test/**/*.spec.ts","cover":"nyc mocha test/**/*.spec.ts","lint":"tslint -c tslint.json --project tsconfig.json","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","browser":"dist/browser/index.js","dependencies":{"glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/node":"11.13.4","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.6.5","copyfiles":"2.3.0","has-flag":"2.0.0","lodash":"4.17.19","mocha":"8.0.1","moment":"2.21.0","mysql2":"1.3.5","nyc":"15.1.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"6.3.5","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"5.0.0","ts-node":"7.0.1","tslint":"5.14.0","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"@types/bluebird":"*","@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":"^6.0.0"},"engines":{"node":">=10.0.0"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"71d55cd7ae0dad15c33ebde948be73bdae260c96","readme":"[![Build Status](https://travis-ci.org/RobinBuschmann/sequelize-typescript.svg?branch=master)](https://travis-ci.org/RobinBuschmann/sequelize-typescript)\n[![codecov](https://codecov.io/gh/RobinBuschmann/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/RobinBuschmann/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n[![Dependency Status](https://img.shields.io/david/RobinBuschmann/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\n# sequelize-typescript\nDecorators and some other features for sequelize (v5).\n\n - [Installation](#installation)\n - [Upgrade to `sequelize-typescript@1`](#upgrade-to-sequelize-typescript1)\n - [Model Definition](#model-definition)\n   - [`@Table` API](#table-api)\n   - [`@Column` API](#column-api)\n - [Usage](#usage)\n   - [Configuration](#configuration)\n   - [globs](#globs)\n   - [Model-path resolving](#model-path-resolving)\n - [Model association](#model-association)\n   - [One-to-many](#one-to-many)\n   - [Many-to-many](#many-to-many)\n   - [One-to-one](#one-to-one)\n   - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n   - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n   - [Multiple relations of same models](#multiple-relations-of-same-models)\n - [Indexes](#indexes)\n   - [`@Index` API](#index)\n   - [`createIndexDecorator()` API](#createindexdecorator)\n - [Repository mode](#repository-mode)\n   - [How to enable repository mode?](#how-to-enable-repository-mode)\n   - [How to use repository mode?](#how-to-use-repository-mode)\n   - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n   - [Limitations of repository mode](#limitations-of-repository-mode)\n - [Model validation](#model-validation)\n - [Scopes](#scopes)\n - [Hooks](#hooks)\n - [Why `() => Model`?](#user-content-why---model)\n - [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n*sequelize-typescript* requires [sequelize](https://github.com/sequelize/sequelize), additional typings as documented [here](https://docs.sequelizejs.com/manual/typescript.html) and [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n```\nnpm install sequelize\nnpm install @types/bluebird @types/node @types/validator\nnpm install reflect-metadata\n```\n```\nnpm install sequelize-typescript\n```\nYour `tsconfig.json` needs the following flags:\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n### ⚠️ sequelize@4\n`sequelize@4` requires `sequelize-typescript@0.6`. See\n[documentation](https://github.com/RobinBuschmann/sequelize-typescript/tree/0.6.X) for version `0.6`.\n```\nnpm install sequelize-typescript@0.6\n```\n\n## Upgrade to `sequelize-typescript@1`\n`sequelize-typescript@1` only works with `sequelize@5>=`.\nFor `sequelize@4` & `sequelize@3` use `sequelize-typescript@0.6`.\n\n### Breaking Changes\nAll breaking changes of `sequelize@5` are also valid for `sequelize-typescript@1`.\nSee [Upgrade to v5](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md) for details.\n\n#### Official Sequelize Typings\nsequelize-typescript now uses the official typings bundled with sequelize\n(See [this](https://github.com/sequelize/sequelize/blob/master/docs/upgrade-to-v5.md#typescript-support)).\nPlease note the following details:\n- Most of the sequelize-typescript interfaces of the previous version are replaced by the official ones\n- `@types/sequelize` is no longer used\n- `@types/bluebird` is no longer an explicit dependency\n- The official typings are less strict than the former sequelize-typescript ones\n\n#### Sequelize Options\n- `SequelizeConfig` renamed to `SequelizeOptions`\n- `modelPaths` property renamed to `models`\n\n#### Scopes Options\nThe `@Scopes` and `@DefaultScope` decorators now take lambda's as options\n```ts\n@DefaultScope(() => ({...}))\n@Scopes(() => ({...}))\n```\ninstead of deprecated way:\n```ts\n@DefaultScope({...})\n@Scopes({...}))\n```\n\n### Repository Mode\nWith `sequelize-typescript@1` comes a repository mode. See [docs](#repository-mode) for details.\n\n\n## Model definition\n```typescript\nimport {Table, Column, Model, HasMany} from 'sequelize-typescript';\n\n@Table\nclass Person extends Model {\n\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n\n### `@Table`\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](https://sequelize.org/v5/manual/models-definition.html#configuration)\nfrom sequelize are valid):\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model {}\n```\n#### Table API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Table`                             | sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` automatically\n `@Table(options: DefineOptions)`     | sets [define options](https://sequelize.org/v5/manual/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and  `options.modelName=<CLASS_NAME>` if not already defined by define options)\n\n#### Primary key\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has\n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another\nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n\n  @DeletedAt\n  deletionDate: Date;\n```\n\nDecorator          | Description\n-------------------|---------------------\n `@CreatedAt`      | sets `timestamps=true` and `createdAt='creationDate'`\n `@UpdatedAt`      | sets `timestamps=true` and `updatedAt='updatedOn'`\n `@DeletedAt`      | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'`\n\n### `@Column`\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n```typescript\n  @Column\n  name: string;\n```\nIf the type cannot or should not be inferred, use:\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\nOr for a more detailed column description, use an object literal\n(all [attribute options](https://sequelize.org/v5/manual/models-definition.html#configuration)\nfrom sequelize are valid):\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n#### Column API\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@Column`                            | tries to infer [dataType](https://sequelize.org/v5/manual/models-definition.html#data-types) from js type\n `@Column(dataType: DataType)`        | sets [dataType](https://sequelize.org/v5/manual/models-definition.html#data-types) explicitly\n `@Column(options: AttributeOptions)` | sets [attribute options](https://sequelize.org/v5/manual/models-definition.html#configuration)\n\n#### *Shortcuts*\nIf you're in love with decorators: *sequelize-typescript* provides some more of them. The following decorators can be\nused together with the @Column annotation to make some attribute options easier available:\n\nDecorator                             | Description\n--------------------------------------|---------------------\n `@AllowNull(allowNull?: boolean)`    | sets `attribute.allowNull` (default is `true`)\n `@AutoIncrement`                     | sets `attribute.autoIncrement=true`\n `@Unique`                            | sets `attribute.unique=true`\n `@Default(value: any)`               | sets `attribute.defaultValue` to specified value\n `@PrimaryKey`                        | sets `attribute.primaryKey=true`\n `@Comment(value: string)`            | sets `attribute.comment` to specified string\n Validate annotations                 | see [Model validation](#model-validation)\n\n### Type inference\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\nDesign type      | Sequelize data type\n-----------------|---------------------\n `string`        | `STRING`\n `boolean`       | `BOOLEAN`\n `number`        | `INTEGER`\n `Date`          | `DATE`\n `Buffer`        | `BLOB`\n\n### Accessors\nGet/set accessors do work as well\n```typescript\n@Table\nclass Person extends Model {\n\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n\n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n\n## Usage\nExcept for minor variations *sequelize-typescript* will work like pure sequelize.\n(See sequelize [docs](https://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n### Configuration\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!).\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        database: 'some_db',\n        dialect: 'sqlite',\n        username: 'root',\n        password: '',\n        storage: ':memory:',\n        models: [__dirname + '/models'], // or [Player, Team],\n});\n```\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the\nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or\n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n### globs\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\nA model is matched to a file by its filename. E.g.\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model {}\n```\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  models: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n```\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work\n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\nInstantiation and inserts can be achieved in the good old sequelize way\n```typescript\nconst person = Person.build({name: 'bob', age: 99});\nperson.save();\n\nPerson.create({name: 'bob', age: 99});\n```\nbut *sequelize-typescript* also makes it possible to create instances with `new`:\n```typescript\nconst person = new Person({name: 'bob', age: 99});\nperson.save();\n```\n\n### Find and update\nFinding and updating entries does also work like using native sequelize. So see sequelize\n[docs](https://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n```typescript\nPerson\n .findOne()\n .then(person => {\n\n     person.age = 100;\n     return person.save();\n });\n\nPerson\n .update({\n   name: 'bobby'\n }, {where: {id: 1}})\n .then(() => {\n\n });\n```\n\n## Model association\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n```typescript\n@Table\nclass Player extends Model {\n\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n\n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n\n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model {\n\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\nThat's all, *sequelize-typescript* does everything else for you. So when retrieving a team by `find`\n```typescript\n\nTeam\n .findOne({include: [Player]})\n .then(team => {\n\n     team.players.forEach(player => console.log(`Player ${player.name}`));\n })\n```\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n```typescript\n@Table\nclass Book extends Model {\n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model {\n\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model {\n\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n#### Type safe *through*-table instance access\nTo access the *through*-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type\nneed to be set up manually. For `Author` model it can be achieved like so:\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and\n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@ForeignKey(relatedModelGetter: () => typeof Model)` | marks property as `foreignKey` for related class\n `@BelongsTo(relatedModelGetter: () => typeof Model)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class\n `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)` | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasMany(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)` | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@HasOne(relatedModelGetter: () => typeof Model)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class\n `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value\n `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)` | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)`| sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values\n `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)` | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n\n### Multiple relations of same models\n*sequelize-typescript* resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n```typescript\n@Table\nclass Book extends Model {\n\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n\n  @BelongsTo(() => Person)\n  author: Person;\n\n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n\n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model {\n\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n*sequelize-typescript* cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person;\n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person;\n\n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with *sequelize-typescript*.\nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or\n`addModelB`. To make TypeScript happy, the `Model.prototype` of *sequelize-typescript* has `$set`, `$get`, `$add`\nfunctions.\n```typescript\n@Table\nclass ModelA extends Model {\n\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model {\n\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\nTo use them, pass the property key of the respective relation as the first parameter:\n```typescript\nconst modelA = new ModelA();\n\nmodelA.$set('bs', [ /* instance */]).then( /* ... */);\nmodelA.$add('b', /* instance */).then( /* ... */);\nmodelA.$get('bs').then( /* ... */);\nmodelA.$count('bs').then( /* ... */);\nmodelA.$has('bs').then( /* ... */);\nmodelA.$remove('bs', /* instance */ ).then( /* ... */);\nmodelA.$create('bs', /* value */ ).then( /* ... */);\n```\n\n## Indexes\n\n### `@Index`\nThe `@Index` annotation can be used without passing any parameters.\n```typescript\n@Table\nclass Person extends Model {\n  @Index // Define an index with default name\n  @Column\n  name: string;\n\n  @Index // Define another index\n  @Column\n  birthday: Date;\n}\n```\n\nTo specify index and index field options, use\nan object literal (see [indexes define option](https://sequelize.org/v5/manual/models-definition.html#indexes)):\n```typescript\n@Table\nclass Person extends Model {\n  @Index('my-index') // Define a multi-field index on name and birthday\n  @Column\n  name: string;\n\n  @Index('my-index') // Add birthday as the second field to my-index\n  @Column\n  birthday: Date;\n\n  @Index({\n    // index options\n    name: 'job-index',\n    parser: 'my-parser',\n    type: 'UNIQUE',\n    unique: true,\n    where: { isEmployee: true },\n    concurrently: true,\n    using: 'BTREE',\n    operator: 'text_pattern_ops',\n    prefix: 'test-',\n    // index field options\n    length: 10,\n    order: 'ASC',\n    collate: 'NOCASE',\n  })\n  @Column\n  jobTitle: string;\n\n  @Column\n  isEmployee: boolean;\n}\n```\n\n#### Index API\n\nDecorator                                 | Description\n------------------------------------------|---------------------\n `@Index`                                 | adds new index on decorated field to `options.indexes`\n `@Index(name: string)`                   | adds new index or adds the field to an existing index with specified name\n `@Table(options: IndexDecoratorOptions)` | sets both index and index field [options](https://sequelize.org/v5/manual/models-definition.html#indexes)\n\n### `createIndexDecorator()`\nThe `createIndexDecorator()` function can be used to create a decorator for an index with options specified with an object literal supplied as the argument. Fields are added to the index by decorating properties.\n```typescript\nconst SomeIndex = createIndexDecorator();\nconst JobIndex = createIndexDecorator({\n  // index options\n  name: 'job-index',\n  parser: 'my-parser',\n  type: 'UNIQUE',\n  unique: true,\n  where: { isEmployee: true },\n  concurrently: true,\n  using: 'BTREE',\n  operator: 'text_pattern_ops',\n  prefix: 'test-',\n});\n\n@Table\nclass Person extends Model {\n  @SomeIndex // Add name to SomeIndex\n  @Column\n  name: string;\n\n  @SomeIndex // Add birthday to SomeIndex\n  @Column\n  birthday: Date;\n\n  @JobIndex({\n    // index field options\n    length: 10,\n    order: 'ASC',\n    collate: 'NOCASE',\n  })\n  @Column\n  jobTitle: string;\n\n  @Column\n  isEmployee: boolean;\n}\n```\n\n## Repository mode\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions.\nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\nEnable repository mode by setting `repositoryMode` flag:\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n### How to use repository mode?\nRetrieve repository to create instances or perform search operations:\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({name: 'Luke Skywalker'});\nconst luke = await userRepository.findOne({where: {name: 'luke'}});\n```\n### How to use associations with repository mode?\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({include: [addressRepository]});\nuserRepository.create({name: 'Bear'}, {include: [addressRepository]});\n```\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n```typescript\n@Scopes(() => ({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  }\n}))\n@Table\nclass User extends Model {}\n```\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for\nvalidation instead, you can do so by simply adding the validate options *as* decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')`\nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter.\n\nSee sequelize [docs](https://sequelize.org/v5/manual/models-definition.html#validations)\nfor all validators.\n\n### Exceptions\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\nValidator                        | Annotation\n---------------------------------|--------------------------------------------------------\n `validate.len=[number, number]` | `@Length({max?: number, min?: number})`\n `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})`\n\n### Example\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model {\n\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({min: 3, max: 15})\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\nScopes can be defined with annotations as well. The scope options are identical to native\nsequelize (See sequelize [docs](https://docs.sequelizejs.com/manual/tutorial/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n```typescript\n@DefaultScope(() => ({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt']\n}))\n@Scopes(() => ({\n  full: {\n    include: [Manufacturer]\n  },\n  yellow: {\n    where: {primaryColor: 'yellow'}\n  }\n}))\n@Table\nexport class ShoeWithScopes extends Model {\n\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations\n\n### One Sequelize instance per model (without repository mode)\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple\nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata`\ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\nIf you need to minify your code, you need to set `tableName` and `modelName`\nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`.\nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n\n# Contributing\n\nTo contribute you can:\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo,\naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","readmeFilename":"README.md","_id":"sequelize-typescript@2.0.0-beta.1","_nodeVersion":"10.17.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-GHlNfh8vPIJKzXtk4A8MTndK3Uu87HO75fFFX4PM+35P/SW3fFCiw/KeHeQ6DjLz7zeI+fop2HFWVeuZarnJwQ==","shasum":"08c52c35e7fb4f940b9919cbc77752776bcc800a","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-2.0.0-beta.1.tgz","fileCount":306,"unpackedSize":204219,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfzl7gCRA9TVsSAnZWagAAcycP/RrusaUYwqWunOLOG4pv\n8+LmBjd5bI6x96Ci2CePnO32uoqFAApDAGTDrGZG9QmjMoTaex25BvukVwIX\nkknAQ/V9SA/XlPQbwTp7JAnI6gOg2zlqdjeMkdiiUaOKWlgr50m+fC+KF+ux\n6abcUhRiJskQq2T6UgsZBX5IR40PIemZNXpTokwbvPCdVXoHelMACeAu0DQi\nhre74Ww8ScEyuWRcrHVgZF55Loold2QuF6+wrqhfHcf4/EOtd9SYqryKaTlc\nvRtj0v8jfWlqvWlDKkb/d0iA5V4hG/hRAaHDxbLoV4kEsM7RDIZsq/3k9iFp\nco4PMeeRyhp+IGko5y7E+IZBfZkgQql7p/HtyqdAuHgTR4DvKwu/l2zjylfk\nfzkKFRgrbavkuw9T01zvst4BgSbVT/TqI4PxUi8cQfND9s4j5WmmiM2BWVa+\nhm86BlP9/B2wCKSG7VFHnKK+b7FH9N2QJzL27XgDKG3aXFCU+aQ4IGmcjJT2\noUxMw+K0ZNYMr/82TIUfkaqwjl59rDtK5GQ9+vXAHeQp6Ch3JWQ2pVbDhgOU\nXgy9T73pdqeCQvnf3pVaDpaxtarAGpAfIFtQ9F7tI8Ar4fNWzDC7VF602dci\nIRGwU8FIKIET0jCpWyR0aRMwmgPtVX9+Sz88Ru8zPpy3Daywmxh/pMdvtaaE\nWywD\r\n=gxiw\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIApNg859iO4mvLqdt8TZ55/B/YC49RuGSJEcEoIQVNhjAiEAgOsp8oMFBWtPjNIENHL6Y5mSrKwo/rPH0ZK16D89Y80="}]},"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_2.0.0-beta.1_1607360223975_0.15955797348226208"},"_hasShrinkwrap":false},"2.0.0":{"name":"sequelize-typescript","version":"2.0.0","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha test/**/*.spec.ts","cover":"nyc mocha test/**/*.spec.ts","lint":"tslint -c tslint.json --project tsconfig.json","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","browser":"dist/browser/index.js","dependencies":{"glob":"7.1.2"},"devDependencies":{"@types/chai":"3.4.35","@types/chai-as-promised":"0.0.29","@types/chai-datetime":"0.0.30","@types/lodash":"4.14.109","@types/mocha":"2.2.39","@types/node":"11.13.4","@types/prettyjson":"0.0.28","@types/sinon":"1.16.35","@types/sinon-chai":"2.7.27","chai":"3.5.0","chai-as-promised":"6.0.0","chai-datetime":"1.4.1","codecov":"3.6.5","copyfiles":"2.3.0","has-flag":"2.0.0","lodash":"4.17.19","mocha":"8.0.1","moment":"2.21.0","mysql2":"1.3.5","nyc":"15.1.0","prettyjson":"1.2.1","reflect-metadata":"0.1.9","sequelize":"6.3.5","sinon":"1.17.7","sinon-chai":"2.8.0","source-map-support":"0.4.14","sqlite3":"5.0.0","ts-node":"7.0.1","tslint":"5.14.0","typescript":"3.3.3","uuid-validate":"0.0.2"},"peerDependencies":{"@types/bluebird":"*","@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":"^6.0.0"},"engines":{"node":">=10.0.0"},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"gitHead":"e2b7570e0537834dfbc0b49f34b229439808e691","_id":"sequelize-typescript@2.0.0","_nodeVersion":"10.17.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-4nCX18iNAkuRCgxsFOOH9FsUyeqsqLuj7VIZPOWgdRT8ZeQkQl3SgU5MXlji5o2NVekaV9QQzSE0D/6xtUKCmQ==","shasum":"2961767c6560b7f930d6f1076289ebd34eda7b28","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-2.0.0.tgz","fileCount":306,"unpackedSize":206128,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgBFhjCRA9TVsSAnZWagAAEvgQAJJl9aBaw+FIQhDzGWI0\np6pGhgYGMIIs1NHD/CifIp3HpzGtwb3f7WT6g+316anjXCcdlNA7XI9OFcwH\nclgkFpiinappGSqVe1rAM1UoktvAHBH1zS3HpfSwm5GBKVpGADQkN+7evbUF\np9wHSvnjxUmEz9Btmh6kRXCcR7N+qOlggur3tJX9hwk93ncpKddzzRX7z11W\nlHaPUFUzP5QhmKe42MuFPFykMoz9ryRocnCmqpRxp+ECT0mPZ10aI7bHBOtg\nLlaH0qsZh3xPcvvhdn2tsdILIbczyMCSGv32fcFI4aSGkdH/wl58v0QT0qBy\nzCpgWJhnO1UMjDcRsz/lIeZfa2Jb3lRF3uXoM3Ws6IgG4FwGNuzclQBtci5G\nx4KizwZlyVuEmosgWTBFhalbCS64ZTcC1xf9jETBNkHmZnx/j+9N5Nr3gW/Y\n0JpYqmmQ/oPA/opj9Kzrk2coHWJxXt1DEDT4RGWwqXa02yZ7+guGhnCwTYKx\nxiBHr8oQa5RN9hr7LYtEDmCDfMyqEtKXOtOeA2/eZr2ATEFnj+vrlgGpifRc\n6hKJIqnzc/FGjML3+VZbhYXuiyf89akp06HxckgEVDfSpHoP2KY7lqS/O6ys\nK+NZueG2YPtx18wwdzuSkrTfyRsN+PGJ3ON2zDLMi/lh4soTh1tazusL76kE\n7l5k\r\n=j1fm\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDcIXliIAplRCsetKk7BVRLzXJ8jjuHcDajUXRzRDML+wIgI3w/VwYdeSuiK8InJUFp7rg2/Ywdo/k8y/SJOtaZiWE="}]},"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_2.0.0_1610897507237_0.5657439290966937"},"_hasShrinkwrap":false},"2.1.0":{"name":"sequelize-typescript","version":"2.1.0","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha test/**/*.spec.ts","cover":"nyc mocha test/**/*.spec.ts","lint":"tslint -c tslint.json --project tsconfig.json","markdownlint":"markdownlint '**/*.md' --ignore node_modules","release":"release-it","_postinstall":"husky install","prepublishOnly":"pinst --disable && npm run build","postpublish":"pinst --enable"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","browser":"dist/browser/index.js","engines":{"node":">=10.0.0"},"release-it":{"git":{"commit":false,"push":false,"tag":false},"github":{"release":false},"npm":{"publish":false},"hooks":{"before:init":["npm run lint","npm run markdownlint","npm run build","npm run test"]},"plugins":{"@release-it/conventional-changelog":{"preset":"angular","infile":"CHANGELOG.md"}}},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"dependencies":{"glob":"7.1.6"},"devDependencies":{"@commitlint/cli":"11.0.0","@commitlint/config-conventional":"11.0.0","@release-it/conventional-changelog":"2.0.0","@types/chai":"4.2.15","@types/chai-as-promised":"7.1.3","@types/chai-datetime":"0.0.36","@types/lodash":"4.14.168","@types/mocha":"8.2.0","@types/node":"14.14.28","@types/prettyjson":"0.0.29","@types/sinon":"9.0.10","@types/sinon-chai":"3.2.5","chai":"4.3.0","chai-as-promised":"7.1.1","chai-datetime":"1.8.0","codecov":"3.8.1","copyfiles":"2.4.1","has-flag":"4.0.0","husky":"5.0.9","lodash":"4.17.20","markdownlint-cli":"0.26.0","mocha":"8.3.0","moment":"2.29.1","mysql2":"2.2.5","nyc":"15.1.0","pinst":"2.1.4","prettyjson":"1.2.1","reflect-metadata":"0.1.13","release-it":"14.4.0","sequelize":"6.5.0","sinon":"9.2.4","sinon-chai":"3.5.0","source-map-support":"0.5.19","sqlite3":"5.0.0","ts-node":"9.1.1","tslint":"6.1.3","typescript":"4.1.5","uuid-validate":"0.0.3"},"peerDependencies":{"@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":">=6.2.0"},"gitHead":"f3ee651d19285751b50ebed7122bb8e0bc27c755","_id":"sequelize-typescript@2.1.0","_nodeVersion":"14.15.4","_npmVersion":"6.14.10","dist":{"integrity":"sha512-wwPxydBQ/wIZ92pFxDQEAhW8uRHqwFZGm6JkPmpsCjrODWrH8TANZiOCjwGouygFMgBwCNK91RNwLe5TYoy5pg==","shasum":"7d42dac368f32829a736acc4f0c9f3b79fc089bb","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-2.1.0.tgz","fileCount":287,"unpackedSize":209914,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgKm1XCRA9TVsSAnZWagAA4bUP/2muAcK0V6GTCEfcB/t4\nuffg0g2DDscV1V9PMOlEmftdSyjceTqnza8QN1BGQCS8sr7SytdgZQR5koSa\nCQanU7ApLzDONKweu9W5yHCZkpob4Zbjpsg0pPqpppTSgG9/aowtllHRORTZ\nz9Iu7jU5ru+WBFS3N+nZKTdhJrh4St13S5h5rXCoc8/OHYF4qhGwJ/Ju4lRq\nQR/c/4Rd+72jPC7yupd16DvH3Q07LuywV+hcq1nVZ6k61qtq+WPTN7YSyDgP\njBhRQ4FZQdQMvYBJCHZb3yzg3VgYZPrTiZl5UpohTSPbG3u6/W5M339GNJNK\nU1Oorhz5x4CjH6bGtgUbZwFP0HFgHgbyJWFGylqnM27B7SNo9gtV/+bXg1HA\nyjO7GRtJXyxjgvCtdCZsiph/B00d3Siy8LV0z56BvoRpkOpfyfuZOsFVuZ2W\n9CwLq/sJa7q6D/SEiNnO8AyjXJwsgwb/WH2Hf8OFdj/Xnri0sLgQKAbAxYGA\nOuhwE+4nlMZuy80QgjZ1AxSWPImBVgGCG7H4omxjZgBPKpTqrDYDSZffKVJW\npnq7GL4w9QiE2z4/ten2mRaIweGXDlo8gEfCnDg6hh92y18ALRiuLdX54WGD\nadKZknDCPFvxzlADSZn9H34U2qOyKXvzLn+vB6Ng4lDV+DWlbV6PYfU3pGq5\n4mJ3\r\n=I+yl\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIH26VaBMvUzcztvdmx+6cISiYvhOTcUWJqbBJkowUy+EAiEAgegsKdxU3xuwcOauAXj+Ld5UWRNx1mV2Y4ZfU498DdA="}]},"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_2.1.0_1613393238945_0.6321234236386055"},"_hasShrinkwrap":false},"2.1.1":{"name":"sequelize-typescript","version":"2.1.1","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha test/**/*.spec.ts","cover":"nyc mocha test/**/*.spec.ts","lint":"eslint --ext .ts src/ test/","lint:fix":"npm run lint -- --fix","markdownlint":"markdownlint '**/*.md' --ignore node_modules","release":"release-it","_postinstall":"husky install","prepublishOnly":"pinst --disable && npm run build","postpublish":"pinst --enable"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","browser":"dist/browser/index.js","engines":{"node":">=10.0.0"},"release-it":{"git":{"commit":false,"push":false,"tag":false},"github":{"release":false},"npm":{"publish":false},"hooks":{"before:init":["npm run lint","npm run markdownlint","npm run build","npm run test"]},"plugins":{"@release-it/conventional-changelog":{"preset":"angular","infile":"CHANGELOG.md"}}},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"dependencies":{"glob":"7.2.0"},"devDependencies":{"@commitlint/cli":"13.2.1","@commitlint/config-conventional":"13.2.0","@release-it/conventional-changelog":"3.3.0","@types/chai":"4.2.22","@types/chai-as-promised":"7.1.4","@types/chai-datetime":"0.0.37","@types/lodash":"4.14.175","@types/mocha":"9.0.0","@types/node":"16.10.3","@types/prettyjson":"0.0.30","@types/sinon":"10.0.4","@types/sinon-chai":"3.2.5","@typescript-eslint/eslint-plugin":"4.33.0","@typescript-eslint/parser":"4.33.0","chai":"4.3.4","chai-as-promised":"7.1.1","chai-datetime":"1.8.0","codecov":"3.8.3","copyfiles":"2.4.1","eslint":"7.32.0","eslint-config-prettier":"8.3.0","eslint-plugin-prettier":"4.0.0","has-flag":"5.0.1","husky":"7.0.2","lodash":"4.17.21","markdownlint-cli":"0.29.0","mocha":"9.1.2","moment":"2.29.1","mysql2":"2.3.0","nyc":"15.1.0","pinst":"2.1.6","prettier":"2.4.1","prettyjson":"1.2.1","reflect-metadata":"0.1.13","release-it":"14.11.6","sequelize":"6.6.5","sinon":"11.1.2","sinon-chai":"3.7.0","source-map-support":"0.5.20","sqlite3":"5.0.2","ts-node":"10.2.1","typescript":"4.4.3","uuid-validate":"0.0.3"},"peerDependencies":{"@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":">=6.6.5"},"gitHead":"ea006fc5f9335ea021a0ccfd414774d7088bc1fa","_id":"sequelize-typescript@2.1.1","_nodeVersion":"14.18.0","_npmVersion":"6.14.15","dist":{"integrity":"sha512-4am/5O6dlAvtR/akH2KizcECm4rRAjWr+oc5mo9vFVMez8hrbOhQlDNzk0H6VMOQASCN7yBF+qOnSEN60V6/vA==","shasum":"92445632062db868b760cd20215406403da737a2","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-2.1.1.tgz","fileCount":288,"unpackedSize":211124,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDRBFX/38os2yf1n41ZOgTufPMRRF/gM+PmhWf9zpiUpQIgVRJtO7QAiORYedBNz12P2c1OBalwp9k9GyMeq8eqSdY="}]},"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_2.1.1_1633891138421_0.09894095322506313"},"_hasShrinkwrap":false},"2.1.2":{"name":"sequelize-typescript","version":"2.1.2","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha test/**/*.spec.ts","cover":"nyc mocha test/**/*.spec.ts","lint":"eslint --ext .ts src/ test/","lint:fix":"npm run lint -- --fix","markdownlint":"markdownlint '**/*.md' --ignore node_modules","release":"release-it","_postinstall":"husky install","prepublishOnly":"pinst --disable && npm run build","postpublish":"pinst --enable"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","browser":"dist/browser/index.js","engines":{"node":">=10.0.0"},"release-it":{"git":{"commit":false,"push":false,"tag":false},"github":{"release":false},"npm":{"publish":false},"hooks":{"before:init":["npm run lint","npm run markdownlint","npm run build","npm run test"]},"plugins":{"@release-it/conventional-changelog":{"preset":"angular","infile":"CHANGELOG.md"}}},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"dependencies":{"glob":"7.2.0"},"devDependencies":{"@commitlint/cli":"13.2.1","@commitlint/config-conventional":"13.2.0","@release-it/conventional-changelog":"3.3.0","@types/chai":"4.2.22","@types/chai-as-promised":"7.1.4","@types/chai-datetime":"0.0.37","@types/lodash":"4.14.175","@types/mocha":"9.0.0","@types/node":"17.0.7","@types/prettyjson":"0.0.30","@types/sinon":"10.0.6","@types/sinon-chai":"3.2.5","@typescript-eslint/eslint-plugin":"4.33.0","@typescript-eslint/parser":"4.33.0","chai":"4.3.4","chai-as-promised":"7.1.1","chai-datetime":"1.8.0","codecov":"3.8.3","copyfiles":"2.4.1","eslint":"7.32.0","eslint-config-prettier":"8.3.0","eslint-plugin-prettier":"4.0.0","has-flag":"5.0.1","husky":"7.0.2","lodash":"4.17.21","markdownlint-cli":"0.29.0","mocha":"9.1.3","moment":"2.29.1","mysql2":"2.3.0","nyc":"15.1.0","pinst":"2.1.6","prettier":"2.4.1","prettyjson":"1.2.1","reflect-metadata":"0.1.13","release-it":"14.11.6","sequelize":"6.8.0","sinon":"11.1.2","sinon-chai":"3.7.0","source-map-support":"0.5.20","sqlite3":"5.0.2","ts-node":"10.4.0","typescript":"4.5.4","uuid-validate":"0.0.3"},"peerDependencies":{"@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":">=6.8.0"},"gitHead":"9f1d0334db6d8977920208bd18e173ff7d18ef0e","_id":"sequelize-typescript@2.1.2","_nodeVersion":"16.13.1","_npmVersion":"8.1.2","dist":{"integrity":"sha512-+vhugJk1LLq5EVeLWi/UrkpGLrJGVD0R3UpEGHYouf6qeLRBL1V7QCIZr0pHZA57+nJPoK4PPTD+sGHS11uvvw==","shasum":"fcc2d3263ccc622710328c278f83e89f632a6d5a","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-2.1.2.tgz","fileCount":288,"unpackedSize":211846,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh0+BoCRA9TVsSAnZWagAArsUQAIhwlXG4ktb2IoWOXGni\nTmgXxqtRFtnfxPdNGWKP326gZhmcYWNs1GJoA0W/1DYuEj9IGbnklEIvvBxd\n8/Gq4jbTq79vL5K2bYvi5JR8T0my8c9yQ1XdsTDU0xkgSZWpKdG0wOhToxBk\nkzsiOCqIRSyhYJuoH4TE01Dk6C10WUqs85yEzHiVRc1RH1CKaeLn0gherjS4\n9rQKfIcDfhks2yQI/cn2TnNAv3BmH/AcXXe6ZZHgdBwI9yNnr3XNp0d/lmyS\ndb7VS+WDzFjYazjZyXOWXcCGzlYEQm5Ql0e6BipTAogaFtQC+WfcwKqkI92d\nXUgPAdA/NijxAOcy+Cv/n/ar4sBiruAjLGkUq37Le2pWMiaCdCRv1F5ko20a\nICEiY1cghlqRQ1LEAgNNmQMfneS6pTRAck5yX7SuNsWzblDc22S+Pu3CXGOk\nsK2GwRsZBjY2OfEr9K1HbzOneqoNZAYv0NSQFJ1qoGpaivkFCTaql4CyRCwQ\nKskoAcFdBKweb5vD824R8BVHlLR2Rvfrrs3Bb7dsn5jxwd8M+244EQ45q2hT\nv4lyzG/SQzsrY8lmHQZsamnirzVi7ZEwZ10Ba61FyF5HJBcbC559V/4pG5Nm\niDgaRV+Q0Z1GwjvnWBudwH7D5hYeOjAmYg9djp7EYeZTX5tB0/LlCT+SwW0/\nlj5z\r\n=SKhW\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCxtz0Cq6eIotkJgNH5wa8rlB0plYf/jyMxMYHu9J5mJwIhAM8sW35/ip+0ntdYaWfo5Zhm43XuvIcr6vDZehBGkpmU"}]},"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_2.1.2_1641275495882_0.08204266851892683"},"_hasShrinkwrap":false},"2.1.3":{"name":"sequelize-typescript","version":"2.1.3","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha test/**/*.spec.ts","cover":"nyc mocha test/**/*.spec.ts","lint":"eslint --ext .ts src/ test/","lint:fix":"npm run lint -- --fix","markdownlint":"markdownlint '**/*.md' --ignore node_modules","release":"release-it","_postinstall":"husky install","prepublishOnly":"pinst --disable && npm run build","postpublish":"pinst --enable"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","browser":"dist/browser/index.js","engines":{"node":">=10.0.0"},"release-it":{"git":{"commit":false,"push":false,"tag":false},"github":{"release":false},"npm":{"publish":false},"hooks":{"before:init":["npm run lint","npm run markdownlint","npm run build","npm run test"]},"plugins":{"@release-it/conventional-changelog":{"preset":"angular","infile":"CHANGELOG.md"}}},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"dependencies":{"glob":"7.2.0"},"devDependencies":{"@commitlint/cli":"16.1.0","@commitlint/config-conventional":"16.0.0","@release-it/conventional-changelog":"4.1.0","@types/chai":"4.3.0","@types/chai-as-promised":"7.1.5","@types/chai-datetime":"0.0.37","@types/lodash":"4.14.178","@types/mocha":"9.1.0","@types/node":"17.0.17","@types/prettyjson":"0.0.30","@types/sinon":"10.0.11","@types/sinon-chai":"3.2.8","@typescript-eslint/eslint-plugin":"5.11.0","@typescript-eslint/parser":"5.11.0","chai":"4.3.6","chai-as-promised":"7.1.1","chai-datetime":"1.8.0","codecov":"3.8.3","copyfiles":"2.4.1","eslint":"8.8.0","eslint-config-prettier":"8.3.0","eslint-plugin-prettier":"4.0.0","has-flag":"5.0.1","husky":"7.0.4","lodash":"4.17.21","markdownlint-cli":"0.31.1","mocha":"9.2.0","moment":"2.29.1","mysql2":"2.3.3","nyc":"15.1.0","pinst":"2.1.6","prettier":"2.5.1","prettyjson":"1.2.5","reflect-metadata":"0.1.13","release-it":"14.12.4","sequelize":"6.16.1","sinon":"13.0.1","sinon-chai":"3.7.0","source-map-support":"0.5.21","sqlite3":"5.0.2","ts-node":"10.5.0","typescript":"4.5.5","uuid-validate":"0.0.3"},"peerDependencies":{"@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":">=6.8.0"},"gitHead":"07f4371019923faa5f261084071e42b2c7ca6a3f","_id":"sequelize-typescript@2.1.3","_nodeVersion":"16.13.2","_npmVersion":"8.1.2","dist":{"integrity":"sha512-0mejGAaLywuCoOOLSXCQs2sMBNudU/QtWZkGY5VT2dfTHToXZi5bOxCa3/CukNNk7wJwXnLuIdeHdlqjvVoj1g==","shasum":"94a8d0a4b5739fc917c8d8fa66e1acb5aadc1274","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-2.1.3.tgz","fileCount":288,"unpackedSize":212335,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiDPpQCRA9TVsSAnZWagAAl9sQAJJcvWB2PuQFm74nO9PZ\nS/e2SGbe6aBPKqqpXmWtiEwT0+W2twUvK15cqo8ZRz/MnGK77nQZIe9B59ak\nDkixjbeqxxmvaSuiEnoPLo7OHtI4qY9FPhPb9xEVG6nCzrX3G4hJ43Z8H7X0\nrKs7KLOmvcVA1WdqdUhyftSIroE+uqSF3HWMdU13b8yQW1bueVv9lj04qidO\niPGPoHlzY7+foCYHaSP7K4WRycYVP9LRJviK4/4FjsceHrnaLkhSLTaXeR9B\nEwLO9QNxaq+d13iPrdQyeKhOXSSWWx1FxWBjv5k8g9Kvphhb4e4Zryw67HVD\nvbFto2VrY+y48eM5FvpnmhG/NbPXnzCRRppelrDTf/MgMJ6FGw2sBzElasa9\njx5IY3MjiVHzNPJFThVXX2EArpz6QNRg2URdvBED4CUlLeiChExXXP38+n3J\nFvV/OiPUkaQQHMyZyvBEg239ObOxT9b8OXpl30lUhtEGYNyM9rHVDkY+Yg3T\nnbECtBk5cq6RmJgcr7vud90DrtmyHXO42EVnmCPeQ0Ul51c7MmSOgJVmqvLD\ncZ+LpMokzDiABAH/nHNYfUiiQJUkekP6+a5Dvc+PPsbwdZMHFmzhNf5kT0UB\nlH32CcAbZaJWE7mBx918Vmqlok8H0CTPCWEsfaT8gisV8IOL1sg0qpDilV6a\nDW0+\r\n=aCSV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCV5mO8Va1mRcMF14It7+BqarpWtqEpfCr1JzgHtNx4pgIgEyC19fUE4VWLF1cXBjxTfQ6SSjKKLZ0TskVwc3v86n4="}]},"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"maintainers":[{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_2.1.3_1645017680815_0.4286762194829179"},"_hasShrinkwrap":false},"2.1.4":{"name":"sequelize-typescript","version":"2.1.4","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha test/**/*.spec.ts","cover":"nyc mocha test/**/*.spec.ts","lint":"eslint --ext .ts src/ test/","lint:fix":"npm run lint -- --fix","markdownlint":"markdownlint '**/*.md' --ignore node_modules","release":"release-it","_postinstall":"husky install","prepublishOnly":"pinst --disable && npm run build","postpublish":"pinst --enable"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","browser":"dist/browser/index.js","engines":{"node":">=10.0.0"},"release-it":{"git":{"commit":false,"push":false,"tag":false},"github":{"release":false},"npm":{"publish":false},"hooks":{"before:init":["npm run lint","npm run markdownlint","npm run build","npm run test"]},"plugins":{"@release-it/conventional-changelog":{"preset":"angular","infile":"CHANGELOG.md"}}},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"dependencies":{"glob":"8.0.3"},"devDependencies":{"@commitlint/cli":"17.1.2","@commitlint/config-conventional":"17.1.0","@release-it/conventional-changelog":"5.1.1","@types/chai":"4.3.3","@types/chai-as-promised":"7.1.5","@types/chai-datetime":"0.0.37","@types/lodash":"4.14.186","@types/mocha":"9.1.0","@types/node":"18.8.5","@types/prettyjson":"0.0.30","@types/sinon":"10.0.11","@types/sinon-chai":"3.2.8","@typescript-eslint/eslint-plugin":"5.40.0","@typescript-eslint/parser":"5.40.0","chai":"4.3.6","chai-as-promised":"7.1.1","chai-datetime":"1.8.0","codecov":"3.8.3","copyfiles":"2.4.1","eslint":"8.25.0","eslint-config-prettier":"8.5.0","eslint-plugin-prettier":"4.2.1","has-flag":"5.0.1","husky":"8.0.1","lodash":"4.17.21","markdownlint-cli":"0.32.2","mocha":"9.2.2","moment":"2.29.4","mysql2":"2.3.3","nyc":"15.1.0","pinst":"3.0.0","prettier":"2.7.1","prettyjson":"1.2.5","reflect-metadata":"0.1.13","release-it":"15.5.0","sequelize":"6.25.1","sinon":"13.0.1","sinon-chai":"3.7.0","source-map-support":"0.5.21","sqlite3":"5.1.2","ts-node":"10.9.1","typescript":"4.8.4","uuid-validate":"0.0.3"},"peerDependencies":{"@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":">=6.20.1"},"gitHead":"f1354a4d7677c84fb21618536239c6ddeaab113f","_id":"sequelize-typescript@2.1.4","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-Xr9m3If1RnHqaJ0C3xHgUWW8SB1GAtTCcPdv/a9l6fhmGNNO/rFgrFnXxQSuGtJF23rEpW/Icsjnr6jYc6L95g==","shasum":"f18ece00da08f4bcea3d94d622af12adf69e6a7e","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-2.1.4.tgz","fileCount":289,"unpackedSize":214902,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCQqW9e1tR8w28P5dAZsHO4FWngU89X9vP71d4pPVblXAIgCvE2IZMUtvSZES0hdT3W51tqqrQIx7J2svxW/w/5HfQ="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjSwEOACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqyARAAoidoLBpTHLLprkEuSUNB5f5BfgCaQPb7aL8v0lsqt4RMuuLB\r\nuBEU6U+pOthGcf3h2Hglzlg5pFCtzz/T4HKfQ7msfWkAtrlDGAWchz3dvGTd\r\nhS3eJb4X9TFshASihfMdBWtBWsF7I2jjz6Or0/nt81DAy7Zw3rBCQ3b8/fBu\r\n7rNDcZIBlgJOX8Vay0XoX6KTLz8xTdmC4p1i31gtjdTyUtnFTZXwuloTVmyi\r\nsfSfbkpY2+JN1jYB03o5o/fxZ5zE6JHzZhFpHEnPNVCplAx8AepZY6+KH110\r\nTXtFZ6Hvp6/IM1oEMopqdXbFafAcdUSqQWPovCMs1wjWQrXT+WhJ6spiaHPs\r\nKO26AyOwG9d407MIr0FFXB8JrhB7/ghjONjlC+O8xGmnv3ww85/xwjKkFO8y\r\n3chHcup72kWdw3/rnJa5GqFIIJruDvNOwHLsQbhu/SpO+FLxirJZF1p/BmQx\r\npaFj4m2xVXdu0pXnJZFwbq5BGf7pzRQ/cTKEhNRu1S9swume7c77XmrD9++C\r\nHvyN/B8rRU9WLzRD5badJ8zG2t5xrAkgmpysY8RUVYq84K7jNEDpMttjST/i\r\nekUBmtofhSdp2JCuZXf9whonuz72NxxnKcRnFA0lc3dG4J2ifYmLxHMP5t1s\r\nZL6VpcxqVgXbEZfjHkTp27XP1wkol51SB0k=\r\n=ILfN\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"maintainers":[{"name":"sdepold","email":"sascha@depold.com"},{"name":"ephys","email":"zoe@ephys.dev"},{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_2.1.4_1665859854380_0.3931276604762064"},"_hasShrinkwrap":false},"2.1.5":{"name":"sequelize-typescript","version":"2.1.5","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha test/**/*.spec.ts","cover":"nyc mocha test/**/*.spec.ts","lint":"eslint --ext .ts src/ test/","lint:fix":"npm run lint -- --fix","markdownlint":"markdownlint '**/*.md' --ignore node_modules","release":"release-it","_postinstall":"husky install","prepublishOnly":"pinst --disable && npm run build","postpublish":"pinst --enable"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","browser":"dist/browser/index.js","engines":{"node":">=10.0.0"},"release-it":{"git":{"commit":false,"push":false,"tag":false},"github":{"release":false},"npm":{"publish":false},"hooks":{"before:init":["npm run lint","npm run markdownlint","npm run build","npm run test"]},"plugins":{"@release-it/conventional-changelog":{"preset":"angular","infile":"CHANGELOG.md"}}},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"dependencies":{"glob":"7.2.0"},"devDependencies":{"@commitlint/cli":"17.1.2","@commitlint/config-conventional":"17.1.0","@release-it/conventional-changelog":"5.1.1","@types/chai":"4.3.3","@types/chai-as-promised":"7.1.5","@types/chai-datetime":"0.0.37","@types/lodash":"4.14.186","@types/mocha":"9.1.0","@types/node":"18.11.0","@types/prettyjson":"0.0.30","@types/sinon":"10.0.11","@types/sinon-chai":"3.2.8","@typescript-eslint/eslint-plugin":"5.40.0","@typescript-eslint/parser":"5.40.0","chai":"4.3.6","chai-as-promised":"7.1.1","chai-datetime":"1.8.0","codecov":"3.8.3","copyfiles":"2.4.1","eslint":"8.25.0","eslint-config-prettier":"8.5.0","eslint-plugin-prettier":"4.2.1","has-flag":"5.0.1","husky":"8.0.1","lodash":"4.17.21","markdownlint-cli":"0.32.2","mocha":"9.2.2","moment":"2.29.4","mysql2":"2.3.3","nyc":"15.1.0","pinst":"3.0.0","prettier":"2.7.1","prettyjson":"1.2.5","reflect-metadata":"0.1.13","release-it":"15.5.0","sequelize":"6.25.2","sinon":"13.0.1","sinon-chai":"3.7.0","source-map-support":"0.5.21","sqlite3":"5.1.2","ts-node":"10.9.1","typescript":"4.8.4","uuid-validate":"0.0.3"},"peerDependencies":{"@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":">=6.20.1"},"gitHead":"78e925b85df6306e14d3973fc8663a2b63afabbc","_id":"sequelize-typescript@2.1.5","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-x1CNODct8gJyfZPwEZBU5uVGNwgJI2Fda913ZxD5ZtCSRyTDPBTS/0uXciF+MlCpyqjpmoCAPtudQWzw579bzA==","shasum":"f12d14607cc8abfd6172cd99f7d3255ec5c4d78e","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-2.1.5.tgz","fileCount":289,"unpackedSize":215291,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCID9dUT3CNFgIblXEQfIHFdI7jF/hQTP9BXkAnUvyNAKoAiEAlzCq9FGm638FVv8eQeabLI1qGdQ3zD6cWZDQG//nNKU="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjTRy5ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqwiRAAj0MfbeRrZ2/oCYJb7e6vGll+MEknCh4afQZBLL8mmTLlbrOz\r\nObEfUUAtmLOLI30uiYV4ftHRgLOP/YhCJbaHyKBGxk1hDvmHAbeFFHnMg99j\r\nMCUJPYnCQSoxN6NXLAvbx6j9D8Sszvckiy+FV0eei5KhlS5cTUWpDGyH3LY9\r\ni57/DAItKHD5XhQLHCuA6HS+zsOFC59rLE7qHcVeCGrPisyJNRQUKc1sspg1\r\nBhFkLgdvdwJf/igxymWf2ZggbKZWzJYfNTtHWxgSu+rZYBXcwJFUiRH86rw6\r\n60Od23eJQdY3sX3ni03n4U0sqCvsdmK04uaOYsQuO/UDQMFQmUDQRBzQC6lj\r\nLyUVkyybr8tsOxpGzUJ7cO5RFvEdWrkAY7KM4BMoyGNhtJAUC++4MFy+gD+I\r\nj5mx2V2o2WQKAX0EpW06Z6vI/+i2TNKTAW5aoYe0FOY7/QwGkQPYepukwTiN\r\nShQPeAsGJtBgeBJDAPY17Yf7QVHmxOs2GLMZJ5wk66QiKxSkW3OSvrqQvbg6\r\nVfSCWh25YAloEys+9/sOhCQHmWq+kv0Vrkx7gQTSnth1LMBQJ4GFzdHUvf/8\r\nhitaN80K9qEK/++e/ljrmgWvIT4285/d0dvlFror+edw/kLW9kqZM1RBXPqU\r\ntqd4Gm19jcXoJLNSDyglLoSNcbf3Yyhtt7k=\r\n=0AEh\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"maintainers":[{"name":"sdepold","email":"sascha@depold.com"},{"name":"ephys","email":"zoe@ephys.dev"},{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_2.1.5_1665998009183_0.6861818352192757"},"_hasShrinkwrap":false},"2.1.6":{"name":"sequelize-typescript","version":"2.1.6","description":"Decorators and some other features for sequelize","scripts":{"build":"tsc","test":"mocha test/**/*.spec.ts","cover":"nyc mocha test/**/*.spec.ts","lint":"eslint --ext .ts src/ test/","lint:fix":"npm run lint -- --fix","markdownlint":"markdownlint '**/*.md' --ignore node_modules --ignore CHANGELOG.md","release":"release-it","_postinstall":"husky install","prepublishOnly":"pinst --disable && npm run build","postpublish":"pinst --enable"},"repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"],"author":{"name":"Robin Buschmann"},"license":"MIT","bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","main":"dist/index.js","types":"dist/index.d.ts","browser":"dist/browser/index.js","engines":{"node":">=10.0.0"},"release-it":{"git":{"commit":false,"push":false,"tag":false},"github":{"release":false},"npm":{"publish":false},"hooks":{"before:init":["npm run lint","npm run markdownlint","npm run build","npm run test"]},"plugins":{"@release-it/conventional-changelog":{"preset":"angular","infile":"CHANGELOG.md"}}},"nyc":{"lines":85,"statements":85,"functions":85,"branches":85,"include":["src"],"exclude":["test"],"extension":[".ts"],"reporter":["lcov","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"dependencies":{"glob":"7.2.0"},"devDependencies":{"@commitlint/cli":"17.2.0","@commitlint/config-conventional":"17.2.0","@release-it/conventional-changelog":"5.1.1","@types/chai":"4.3.4","@types/chai-as-promised":"7.1.5","@types/chai-datetime":"0.0.37","@types/lodash":"4.14.190","@types/mocha":"9.1.0","@types/node":"18.11.9","@types/prettyjson":"0.0.30","@types/sinon":"10.0.11","@types/sinon-chai":"3.2.9","@typescript-eslint/eslint-plugin":"5.44.0","@typescript-eslint/parser":"5.42.0","chai":"4.3.7","chai-as-promised":"7.1.1","chai-datetime":"1.8.0","codecov":"3.8.3","copyfiles":"2.4.1","eslint":"8.27.0","eslint-config-prettier":"8.5.0","eslint-plugin-prettier":"4.2.1","has-flag":"5.0.1","husky":"8.0.2","lodash":"4.17.21","markdownlint-cli":"0.32.2","mocha":"9.2.2","moment":"2.29.4","mysql2":"2.3.3","nyc":"15.1.0","pinst":"3.0.0","prettier":"2.8.0","prettyjson":"1.2.5","reflect-metadata":"0.1.13","release-it":"15.5.0","sequelize":"6.29.0","sinon":"13.0.1","sinon-chai":"3.7.0","source-map-support":"0.5.21","sqlite3":"5.1.2","ts-node":"10.9.1","typescript":"4.8.4","uuid-validate":"0.0.3"},"peerDependencies":{"@types/node":"*","@types/validator":"*","reflect-metadata":"*","sequelize":">=6.20.1"},"gitHead":"32e4824966b6230877bcd1f6c69f896a1e2bd9d7","_id":"sequelize-typescript@2.1.6","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-Vc2N++3en346RsbGjL3h7tgAl2Y7V+2liYTAOZ8XL0KTw3ahFHsyAUzOwct51n+g70I1TOUDgs06Oh6+XGcFkQ==","shasum":"9476c8a2510114ed1c3a26b424c47e05c2e6284e","tarball":"https://registry.npmjs.org/sequelize-typescript/-/sequelize-typescript-2.1.6.tgz","fileCount":289,"unpackedSize":215728,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIB7JHTS3sK3EJAC5PtdkRWDQhm+Er3jfD3v8woJ3XUdbAiEAtRnHseAsDiY6/mPwa/7QOukNhGULAM1ldoJasZv3YhQ="}]},"_npmUser":{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"},"directories":{},"maintainers":[{"name":"sdepold","email":"sascha@depold.com"},{"name":"ephys","email":"zoe@ephys.dev"},{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sequelize-typescript_2.1.6_1700855265606_0.7485381136188218"},"_hasShrinkwrap":false}},"readme":"# sequelize-typescript\n\n[![Build Status](https://github.com/sequelize/sequelize-typescript/workflows/Node.js%20CI/badge.svg)](https://github.com/sequelize/sequelize-typescript/actions?query=workflow%3A%22Node.js+CI%22)\n[![codecov](https://codecov.io/gh/sequelize/sequelize-typescript/branch/master/graph/badge.svg)](https://codecov.io/gh/sequelize/sequelize-typescript)\n[![NPM](https://img.shields.io/npm/v/sequelize-typescript.svg)](https://www.npmjs.com/package/sequelize-typescript)\n\nDecorators and some other features for sequelize (v6).\n\n- [Installation](#installation)\n- [Model Definition](#model-definition)\n  - [`@Table` API](#table-api)\n  - [`@Column` API](#column-api)\n- [Usage](#usage)\n  - [Configuration](#configuration)\n  - [globs](#globs)\n  - [Model-path resolving](#model-path-resolving)\n- [Model association](#model-association)\n  - [One-to-many](#one-to-many)\n  - [Many-to-many](#many-to-many)\n  - [One-to-one](#one-to-one)\n  - [`@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API](#foreignkey-belongsto-hasmany-hasone-belongstomany-api)\n  - [Generated getter and setter](#type-safe-usage-of-auto-generated-functions)\n  - [Multiple relations of same models](#multiple-relations-of-same-models)\n- [Indexes](#indexes)\n  - [`@Index` API](#index)\n  - [`createIndexDecorator()` API](#createindexdecorator)\n- [Repository mode](#repository-mode)\n  - [How to enable repository mode?](#how-to-enable-repository-mode)\n  - [How to use repository mode?](#how-to-use-repository-mode)\n  - [How to use associations with repository mode?](#how-to-use-associations-with-repository-mode)\n  - [Limitations of repository mode](#limitations-of-repository-mode)\n- [Model validation](#model-validation)\n- [Scopes](#scopes)\n- [Hooks](#hooks)\n- [Why `() => Model`?](#why---model)\n- [Recommendations and limitations](#recommendations-and-limitations)\n\n## Installation\n\n- this assumes usage of `sequelize@6`\n- _sequelize-typescript_ requires [sequelize](https://github.com/sequelize/sequelize)\n- additional typings as documented [here](https://sequelize.org/master/manual/typescript.html) and [reflect-metadata](https://www.npmjs.com/package/reflect-metadata)\n\n```sh\nnpm install --save-dev @types/node @types/validator\nnpm install sequelize reflect-metadata sequelize-typescript\n```\n\nYour `tsconfig.json` needs the following flags:\n\n```json\n\"target\": \"es6\", // or a more recent ecmascript version\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true\n```\n\n### Sequelize Options\n\n- `SequelizeConfig` renamed to `SequelizeOptions`\n- `modelPaths` property renamed to `models`\n\n### Scopes Options\n\nThe `@Scopes` and `@DefaultScope` decorators now take lambda's as options\n\n```ts\n@DefaultScope(() => ({...}))\n@Scopes(() => ({...}))\n```\n\ninstead of deprecated way:\n\n```ts\n@DefaultScope({...})\n@Scopes({...}))\n```\n\n## Model definition\n\n```typescript\nimport { Table, Column, Model, HasMany } from 'sequelize-typescript';\n\n@Table\nclass Person extends Model {\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\n\n### Less strict\n\n```typescript\nimport { Table, Model } from 'sequelize-typescript';\n\n@Table\nclass Person extends Model {}\n```\n\n### More strict\n\n```typescript\nimport { Optional } from 'sequelize';\nimport { Table, Model } from 'sequelize-typescript';\n\ninterface PersonAttributes {\n  id: number;\n  name: string;\n}\n\ninterface PersonCreationAttributes extends Optional<PersonAttributes, 'id'> {}\n\n@Table\nclass Person extends Model<PersonAttributes, PersonCreationAttributes> {}\n```\n\nThe model needs to extend the `Model` class and has to be annotated with the `@Table` decorator. All properties that\nshould appear as a column in the database require the `@Column` annotation.\n\nSee more advanced example [here](https://github.com/RobinBuschmann/sequelize-typescript-example).\n\n### `@Table`\n\nThe `@Table` annotation can be used without passing any parameters. To specify some more define options, use\nan object literal (all [define options](https://sequelize.org/v5/manual/models-definition.html#configuration)\nfrom sequelize are valid):\n\n```typescript\n@Table({\n  timestamps: true,\n  ...\n})\nclass Person extends Model {}\n```\n\n#### Table API\n\n| Decorator                        | Description                                                                                                                                                                                                            |\n| -------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `@Table`                         | sets `options.tableName=<CLASS_NAME>` and `options.modelName=<CLASS_NAME>` automatically                                                                                                                               |\n| `@Table(options: DefineOptions)` | sets [define options](https://sequelize.org/v5/manual/models-definition.html#configuration) (also sets `options.tableName=<CLASS_NAME>` and `options.modelName=<CLASS_NAME>` if not already defined by define options) |\n\n#### Primary key\n\nA primary key (`id`) will be inherited from base class `Model`. This primary key is by default an `INTEGER` and has\n`autoIncrement=true` (This behaviour is a native sequelize thing). The id can easily be overridden by marking another\nattribute as primary key. So either set `@Column({primaryKey: true})` or use `@PrimaryKey` together with `@Column`.\n\n#### `@CreatedAt`, `@UpdatedAt`, `@DeletedAt`\n\nAnnotations to define custom and type safe `createdAt`, `updatedAt` and `deletedAt` attributes:\n\n```typescript\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n\n  @DeletedAt\n  deletionDate: Date;\n```\n\n| Decorator    | Description                                                            |\n| ------------ | ---------------------------------------------------------------------- |\n| `@CreatedAt` | sets `timestamps=true` and `createdAt='creationDate'`                  |\n| `@UpdatedAt` | sets `timestamps=true` and `updatedAt='updatedOn'`                     |\n| `@DeletedAt` | sets `timestamps=true`, `paranoid=true` and `deletedAt='deletionDate'` |\n\n### `@Column`\n\nThe `@Column` annotation can be used without passing any parameters. But therefore it is necessary that\nthe js type can be inferred automatically (see [Type inference](#type-inference) for details).\n\n```typescript\n  @Column\n  name: string;\n```\n\nIf the type cannot or should not be inferred, use:\n\n```typescript\nimport {DataType} from 'sequelize-typescript';\n\n  @Column(DataType.TEXT)\n  name: string;\n```\n\nOr for a more detailed column description, use an object literal\n(all [attribute options](https://sequelize.org/v5/manual/models-definition.html#configuration)\nfrom sequelize are valid):\n\n```typescript\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n```\n\n#### Column API\n\n| Decorator                            | Description                                                                                               |\n| ------------------------------------ | --------------------------------------------------------------------------------------------------------- |\n| `@Column`                            | tries to infer [dataType](https://sequelize.org/v5/manual/models-definition.html#data-types) from js type |\n| `@Column(dataType: DataType)`        | sets [dataType](https://sequelize.org/v5/manual/models-definition.html#data-types) explicitly             |\n| `@Column(options: AttributeOptions)` | sets [attribute options](https://sequelize.org/v5/manual/models-definition.html#configuration)            |\n\n#### _Shortcuts_\n\nIf you're in love with decorators: _sequelize-typescript_ provides some more of them. The following decorators can be\nused together with the @Column annotation to make some attribute options easier available:\n\n| Decorator                         | Description                                      | Options                                                                                                                          |\n| --------------------------------- | ------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------- |\n| `@AllowNull(allowNull?: boolean)` | sets `attribute.allowNull` (default is `true`)   |\n| `@AutoIncrement`                  | sets `attribute.autoIncrement=true`              |\n| `@Unique(options? UniqueOptions)` | sets `attribute.unique=true`                     | [UniqueOptions](https://github.com/sequelize/sequelize-typescript/blob/master/src/model/column/column-options/unique.ts#L3) |\n| `@Default(value: any)`            | sets `attribute.defaultValue` to specified value |\n| `@PrimaryKey`                     | sets `attribute.primaryKey=true`                 |\n| `@Comment(value: string)`         | sets `attribute.comment` to specified string     |\n| Validate annotations              | see [Model validation](#model-validation)        |\n\n### Type inference\n\nThe following types can be automatically inferred from javascript type. Others have to be defined explicitly.\n\n| Design type | Sequelize data type |\n| ----------- | ------------------- |\n| `string`    | `STRING`            |\n| `boolean`   | `BOOLEAN`           |\n| `number`    | `INTEGER`           |\n| `bigint`    | `BIGINT`            |\n| `Date`      | `DATE`              |\n| `Buffer`    | `BLOB`              |\n\n### Accessors\n\nGet/set accessors do work as well\n\n```typescript\n@Table\nclass Person extends Model {\n  @Column\n  get name(): string {\n    return 'My name is ' + this.getDataValue('name');\n  }\n\n  set name(value: string) {\n    this.setDataValue('name', value);\n  }\n}\n```\n\n## Usage\n\nExcept for minor variations _sequelize-typescript_ will work like pure sequelize.\n(See sequelize [docs](https://docs.sequelizejs.com/manual/tutorial/models-usage.html))\n\n### Configuration\n\nTo make the defined models available, you have to configure a `Sequelize` instance from `sequelize-typescript`(!).\n\n```typescript\nimport { Sequelize } from 'sequelize-typescript';\n\nconst sequelize = new Sequelize({\n  database: 'some_db',\n  dialect: 'sqlite',\n  username: 'root',\n  password: '',\n  storage: ':memory:',\n  models: [__dirname + '/models'], // or [Player, Team],\n});\n```\n\nBefore you can use your models you have to tell sequelize where they can be found. So either set `models` in the\nsequelize config or add the required models later on by calling `sequelize.addModels([Person])` or\n`sequelize.addModels([__dirname + '/models'])`:\n\n```typescript\nsequelize.addModels([Person]);\nsequelize.addModels(['path/to/models']);\n```\n\n### globs\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n        ...\n        models: [__dirname + '/**/*.model.ts']\n});\n// or\nsequelize.addModels([__dirname + '/**/*.model.ts']);\n```\n\n#### Model-path resolving\n\nA model is matched to a file by its filename. E.g.\n\n```typescript\n// File User.ts matches the following exported model.\nexport class User extends Model {}\n```\n\nThis is done by comparison of the filename against all exported members. The\nmatching can be customized by specifying the `modelMatch` function in the\nconfiguration object.\n\nFor example, if your models are named `user.model.ts`, and your class is called\n`User`, you can match these two by using the following function:\n\n```typescript\nimport {Sequelize} from 'sequelize-typescript';\n\nconst sequelize =  new Sequelize({\n  models: [__dirname + '/models/**/*.model.ts']\n  modelMatch: (filename, member) => {\n    return filename.substring(0, filename.indexOf('.model')) === member.toLowerCase();\n  },\n});\n```\n\nFor each file that matches the `*.model.ts` pattern, the `modelMatch` function\nwill be called with its exported members. E.g. for the following file\n\n```TypeScript\n//user.model.ts\nimport {Table, Column, Model} from 'sequelize-typescript';\n\nexport const UserN = 'Not a model';\nexport const NUser = 'Not a model';\n\n@Table\nexport class User extends Model {\n\n  @Column\n  nickname: string;\n}\n```\n\nThe `modelMatch` function will be called three times with the following arguments.\n\n```text\nuser.model UserN -> false\nuser.model NUser -> false\nuser.model User  -> true (User will be added as model)\n```\n\nAnother way to match model to file is to make your model the default export.\n\n```TypeScript\nexport default class User extends Model {}\n```\n\n> ⚠️ When using paths to add models, keep in mind that they will be loaded during runtime. This means that the path\n> may differ from development time to execution time. For instance, using `.ts` extension within paths will only work\n> together with [ts-node](https://github.com/TypeStrong/ts-node).\n\n### Build and create\n\nInstantiation and inserts can be achieved in the good old sequelize way\n\n```typescript\nconst person = Person.build({ name: 'bob', age: 99 });\nperson.save();\n\nPerson.create({ name: 'bob', age: 99 });\n```\n\nbut _sequelize-typescript_ also makes it possible to create instances with `new`:\n\n```typescript\nconst person = new Person({ name: 'bob', age: 99 });\nperson.save();\n```\n\n### Find and update\n\nFinding and updating entries does also work like using native sequelize. So see sequelize\n[docs](https://docs.sequelizejs.com/manual/tutorial/models-usage.html) for more details.\n\n```typescript\nPerson.findOne().then((person) => {\n  person.age = 100;\n  return person.save();\n});\n\nPerson.update(\n  {\n    name: 'bobby',\n  },\n  { where: { id: 1 } }\n).then(() => {});\n```\n\n## Model association\n\nRelations can be described directly in the model by the `@HasMany`, `@HasOne`, `@BelongsTo`, `@BelongsToMany`\nand `@ForeignKey` annotations.\n\n### One-to-many\n\n```typescript\n@Table\nclass Player extends Model {\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n\n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n\n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nclass Team extends Model {\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\n\nThat's all, _sequelize-typescript_ does everything else for you. So when retrieving a team by `find`\n\n```typescript\nTeam.findOne({ include: [Player] }).then((team) => {\n  team.players.forEach((player) => console.log(`Player ${player.name}`));\n});\n```\n\nthe players will also be resolved (when passing `include: Player` to the find options)\n\n### Many-to-many\n\n```typescript\n@Table\nclass Book extends Model {\n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nclass Author extends Model {\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nclass BookAuthor extends Model {\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n#### Type safe _through_-table instance access\n\nTo access the _through_-table instance (instanceOf `BookAuthor` in the upper example) type safely, the type\nneed to be set up manually. For `Author` model it can be achieved like so:\n\n```ts\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n### One-to-one\n\nFor one-to-one use `@HasOne(...)`(foreign key for the relation exists on the other model) and\n`@BelongsTo(...)` (foreign key for the relation exists on this model)\n\n### `@ForeignKey`, `@BelongsTo`, `@HasMany`, `@HasOne`, `@BelongsToMany` API\n\n| Decorator                                                                                                                     | Description                                                                                                                                                                                                    |\n| ----------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `@ForeignKey(relatedModelGetter: () => typeof Model)`                                                                         | marks property as `foreignKey` for related class                                                                                                                                                               |\n| `@BelongsTo(relatedModelGetter: () => typeof Model)`                                                                          | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from source class                                                                         |\n| `@BelongsTo(relatedModelGetter: () => typeof Model, foreignKey: string)`                                                      | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value                                                                         |\n| `@BelongsTo(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsTo)`                                    | sets `SourceModel.belongsTo(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options                                                                       |\n| `@HasMany(relatedModelGetter: () => typeof Model)`                                                                            | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class                                                                   |\n| `@HasMany(relatedModelGetter: () => typeof Model, foreignKey: string)`                                                        | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value                                                                           |\n| `@HasMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasMany)`                                        | sets `SourceModel.hasMany(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options                                                                         |\n| `@HasOne(relatedModelGetter: () => typeof Model)`                                                                             | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is resolved from target related class                                                                    |\n| `@HasOne(relatedModelGetter: () => typeof Model, foreignKey: string)`                                                         | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `foreignKey` is explicitly specified value                                                                            |\n| `@HasOne(relatedModelGetter: () => typeof Model, options: AssociationOptionsHasOne)`                                          | sets `SourceModel.hasOne(RelatedModel, ...)` while `as` is key of annotated property and `options` are additional association options                                                                          |\n| `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model))`                                       | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` is resolved from through class                                |\n| `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string)`                   | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property, `foreignKey` is explicitly specified value and `otherKey` is resolved from through class |\n| `@BelongsToMany(relatedModelGetter: () => typeof Model, through: (() => typeof Model), foreignKey: string, otherKey: string)` | sets `SourceModel.belongsToMany(RelatedModel, {through: ThroughModel, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values                               |\n| `@BelongsToMany(relatedModelGetter: () => typeof Model, through: string, foreignKey: string, otherKey: string)`               | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `foreignKey`/`otherKey` are explicitly specified values                              |\n| `@BelongsToMany(relatedModelGetter: () => typeof Model, options: AssociationOptionsBelongsToMany)`                            | sets `SourceModel.belongsToMany(RelatedModel, {through: throughString, ...})` while `as` is key of annotated property and `options` are additional association values, including `foreignKey` and `otherKey`.  |\n\nNote that when using AssociationOptions, certain properties will be overwritten when the association is built, based on reflection metadata or explicit attribute parameters. For example, `as` will always be the annotated property's name, and `through` will be the explicitly stated value.\n\n### Multiple relations of same models\n\n_sequelize-typescript_ resolves the foreign keys by identifying the corresponding class references.\nSo if you define a model with multiple relations like\n\n```typescript\n@Table\nclass Book extends Model {\n  @ForeignKey(() => Person)\n  @Column\n  authorId: number;\n\n  @BelongsTo(() => Person)\n  author: Person;\n\n  @ForeignKey(() => Person)\n  @Column\n  proofreaderId: number;\n\n  @BelongsTo(() => Person)\n  proofreader: Person;\n}\n\n@Table\nclass Person extends Model {\n  @HasMany(() => Book)\n  writtenBooks: Book[];\n\n  @HasMany(() => Book)\n  proofedBooks: Book[];\n}\n```\n\n_sequelize-typescript_ cannot know which foreign key to use for which relation. So you have to add the foreign keys\nexplicitly:\n\n```typescript\n\n  // in class \"Books\":\n  @BelongsTo(() => Person, 'authorId')\n  author: Person;\n\n  @BelongsTo(() => Person, 'proofreaderId')\n  proofreader: Person;\n\n  // in class \"Person\":\n  @HasMany(() => Book, 'authorId')\n  writtenBooks: Book[];\n\n  @HasMany(() => Book, 'proofreaderId')\n  proofedBooks: Book[];\n```\n\n### Type safe usage of auto generated functions\n\nWith the creation of a relation, sequelize generates some method on the corresponding\nmodels. So when you create a 1:n relation between `ModelA` and `ModelB`, an instance of `ModelA` will\nhave the functions `getModelBs`, `setModelBs`, `addModelB`, `removeModelB`, `hasModelB`. These functions still exist with _sequelize-typescript_.\nBut TypeScript wont recognize them and will complain if you try to access `getModelB`, `setModelB` or\n`addModelB`. To make TypeScript happy, the `Model.prototype` of _sequelize-typescript_ has `$set`, `$get`, `$add`\nfunctions.\n\n```typescript\n@Table\nclass ModelA extends Model {\n  @HasMany(() => ModelB)\n  bs: ModelB[];\n}\n\n@Table\nclass ModelB extends Model {\n  @BelongsTo(() => ModelA)\n  a: ModelA;\n}\n```\n\nTo use them, pass the property key of the respective relation as the first parameter:\n\n```typescript\nconst modelA = new ModelA();\n\nmodelA\n  .$set('bs', [\n    /* instance */\n  ])\n  .then(/* ... */);\nmodelA.$add('b' /* instance */).then(/* ... */);\nmodelA.$get('bs').then(/* ... */);\nmodelA.$count('bs').then(/* ... */);\nmodelA.$has('bs').then(/* ... */);\nmodelA.$remove('bs' /* instance */).then(/* ... */);\nmodelA.$create('bs' /* value */).then(/* ... */);\n```\n\n## Indexes\n\n### `@Index`\n\nThe `@Index` annotation can be used without passing any parameters.\n\n```typescript\n@Table\nclass Person extends Model {\n  @Index // Define an index with default name\n  @Column\n  name: string;\n\n  @Index // Define another index\n  @Column\n  birthday: Date;\n}\n```\n\nTo specify index and index field options, use\nan object literal (see [indexes define option](https://sequelize.org/v5/manual/models-definition.html#indexes)):\n\n```typescript\n@Table\nclass Person extends Model {\n  @Index('my-index') // Define a multi-field index on name and birthday\n  @Column\n  name: string;\n\n  @Index('my-index') // Add birthday as the second field to my-index\n  @Column\n  birthday: Date;\n\n  @Index({\n    // index options\n    name: 'job-index',\n    parser: 'my-parser',\n    type: 'UNIQUE',\n    unique: true,\n    where: { isEmployee: true },\n    concurrently: true,\n    using: 'BTREE',\n    operator: 'text_pattern_ops',\n    prefix: 'test-',\n    // index field options\n    length: 10,\n    order: 'ASC',\n    collate: 'NOCASE',\n  })\n  @Column\n  jobTitle: string;\n\n  @Column\n  isEmployee: boolean;\n}\n```\n\n#### Index API\n\n| Decorator                                | Description                                                                                               |\n| ---------------------------------------- | --------------------------------------------------------------------------------------------------------- |\n| `@Index`                                 | adds new index on decorated field to `options.indexes`                                                    |\n| `@Index(name: string)`                   | adds new index or adds the field to an existing index with specified name                                 |\n| `@Table(options: IndexDecoratorOptions)` | sets both index and index field [options](https://sequelize.org/v5/manual/models-definition.html#indexes) |\n\n### `createIndexDecorator()`\n\nThe `createIndexDecorator()` function can be used to create a decorator for an index with options specified with an object literal supplied as the argument. Fields are added to the index by decorating properties.\n\n```typescript\nconst SomeIndex = createIndexDecorator();\nconst JobIndex = createIndexDecorator({\n  // index options\n  name: 'job-index',\n  parser: 'my-parser',\n  type: 'UNIQUE',\n  unique: true,\n  where: { isEmployee: true },\n  concurrently: true,\n  using: 'BTREE',\n  operator: 'text_pattern_ops',\n  prefix: 'test-',\n});\n\n@Table\nclass Person extends Model {\n  @SomeIndex // Add name to SomeIndex\n  @Column\n  name: string;\n\n  @SomeIndex // Add birthday to SomeIndex\n  @Column\n  birthday: Date;\n\n  @JobIndex({\n    // index field options\n    length: 10,\n    order: 'ASC',\n    collate: 'NOCASE',\n  })\n  @Column\n  jobTitle: string;\n\n  @Column\n  isEmployee: boolean;\n}\n```\n\n## Repository mode\n\nWith `sequelize-typescript@1` comes a repository mode. See [docs](#repository-mode) for details.\n\nThe repository mode makes it possible to separate static operations like `find`, `create`, ... from model definitions.\nIt also empowers models so that they can be used with multiple sequelize instances.\n\n### How to enable repository mode?\n\nEnable repository mode by setting `repositoryMode` flag:\n\n```typescript\nconst sequelize = new Sequelize({\n  repositoryMode: true,\n  ...,\n});\n```\n\n### How to use repository mode?\n\nRetrieve repository to create instances or perform search operations:\n\n```typescript\nconst userRepository = sequelize.getRepository(User);\n\nconst luke = await userRepository.create({ name: 'Luke Skywalker' });\nconst luke = await userRepository.findOne({ where: { name: 'luke' } });\n```\n\n### How to use associations with repository mode?\n\nFor now one need to use the repositories within the include options in order to retrieve or create related data:\n\n```typescript\nconst userRepository = sequelize.getRepository(User);\nconst addressRepository = sequelize.getRepository(Address);\n\nuserRepository.find({ include: [addressRepository] });\nuserRepository.create({ name: 'Bear' }, { include: [addressRepository] });\n```\n\n> ⚠️ This will change in the future: One will be able to refer the model classes instead of the repositories.\n\n### Limitations of repository mode\n\nNested scopes and includes in general won't work when using `@Scope` annotation together with repository mode like:\n\n```typescript\n@Scopes(() => ({\n  // includes\n  withAddress: {\n    include: [() => Address],\n  },\n  // nested scopes\n  withAddressIncludingLatLng: {\n    include: [() => Address.scope('withLatLng')],\n  },\n}))\n@Table\nclass User extends Model {}\n```\n\n> ⚠️ This will change in the future: Simple includes will be implemented.\n\n## Model validation\n\nValidation options can be set through the `@Column` annotation, but if you prefer to use separate decorators for\nvalidation instead, you can do so by simply adding the validate options _as_ decorators:\nSo that `validate.isEmail=true` becomes `@IsEmail`, `validate.equals='value'` becomes `@Equals('value')`\nand so on. Please notice that a validator that expects a boolean is translated to an annotation without a parameter.\n\nSee sequelize [docs](https://sequelize.org/v5/manual/models-definition.html#validations)\nfor all validators.\n\n### Exceptions\n\nThe following validators cannot simply be translated from sequelize validator to an annotation:\n\n| Validator                       | Annotation                                                                                                                                                                  |\n| ------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `validate.len=[number, number]` | `@Length({max?: number, min?: number})`                                                                                                                                     |\n| `validate[customName: string]`  | For custom validators also use the `@Is(...)` annotation: Either `@Is('custom', (value) => { /* ... */})` or with named function `@Is(function custom(value) { /* ... */})` |\n\n### Example\n\n```typescript\nconst HEX_REGEX = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\n@Table\nexport class Shoe extends Model {\n  @IsUUID(4)\n  @PrimaryKey\n  @Column\n  id: string;\n\n  @Equals('lala')\n  @Column\n  readonly key: string;\n\n  @Contains('Special')\n  @Column\n  special: string;\n\n  @Length({ min: 3, max: 15 })\n  @Column\n  brand: string;\n\n  @IsUrl\n  @Column\n  brandUrl: string;\n\n  @Is('HexColor', (value) => {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  primaryColor: string;\n\n  @Is(function hexColor(value: string): void {\n    if (!HEX_REGEX.test(value)) {\n      throw new Error(`\"${value}\" is not a hex color value.`);\n    }\n  })\n  @Column\n  secondaryColor: string;\n\n  @Is(HEX_REGEX)\n  @Column\n  tertiaryColor: string;\n\n  @IsDate\n  @IsBefore('2017-02-27')\n  @Column\n  producedAt: Date;\n}\n```\n\n## Scopes\n\nScopes can be defined with annotations as well. The scope options are identical to native\nsequelize (See sequelize [docs](https://sequelize.org/master/manual/scopes.html) for more details)\n\n### `@DefaultScope` and `@Scopes`\n\n```typescript\n@DefaultScope(() => ({\n  attributes: ['id', 'primaryColor', 'secondaryColor', 'producedAt'],\n}))\n@Scopes(() => ({\n  full: {\n    include: [Manufacturer],\n  },\n  yellow: {\n    where: { primaryColor: 'yellow' },\n  },\n}))\n@Table\nexport class ShoeWithScopes extends Model {\n  @Column\n  readonly secretKey: string;\n\n  @Column\n  primaryColor: string;\n\n  @Column\n  secondaryColor: string;\n\n  @Column\n  producedAt: Date;\n\n  @ForeignKey(() => Manufacturer)\n  @Column\n  manufacturerId: number;\n\n  @BelongsTo(() => Manufacturer)\n  manufacturer: Manufacturer;\n}\n```\n\n## Hooks\n\nHooks can be attached to your models. All Model-level hooks are supported. See [the related unit tests](test/models/Hook.ts) for a summary.\n\nEach hook must be a `static` method. Multiple hooks can be attached to a single method, and you can define multiple methods for a given hook.\n\nThe name of the method cannot be the same as the name of the hook (for example, a `@BeforeCreate` hook method cannot be named `beforeCreate`). That’s because Sequelize has pre-defined methods with those names.\n\n```typescript\n@Table\nexport class Person extends Model {\n  @Column\n  name: string;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static makeUpperCase(instance: Person) {\n    // this will be called when an instance is created or updated\n    instance.name = instance.name.toLocaleUpperCase();\n  }\n\n  @BeforeCreate\n  static addUnicorn(instance: Person) {\n    // this will also be called when an instance is created\n    instance.name += ' 🦄';\n  }\n}\n```\n\n## Why `() => Model`?\n\n`@ForeignKey(Model)` is much easier to read, so why is `@ForeignKey(() => Model)` so important? When it\ncomes to circular-dependencies (which are in general solved by node for you) `Model` can be `undefined`\nwhen it gets passed to @ForeignKey. With the usage of a function, which returns the actual model, we prevent\nthis issue.\n\n## Recommendations and limitations\n\n### One Sequelize instance per model (without repository mode)\n\nUnless you are using the [repository mode](#repository-mode), you won't be able to add one and the same model to multiple\nSequelize instances with differently configured connections. So that one model will only work for one connection.\n\n### One model class per file\n\nThis is not only good practice regarding design, but also matters for the order\nof execution. Since Typescript creates a `__metadata(\"design:type\", SomeModel)` call due to `emitDecoratorMetadata`\ncompile option, in some cases `SomeModel` is probably not defined(not undefined!) and would throw a `ReferenceError`.\nWhen putting `SomeModel` in a separate file, it would look like `__metadata(\"design:type\", SomeModel_1.SomeModel)`,\nwhich does not throw an error.\n\n### Minification\n\nIf you need to minify your code, you need to set `tableName` and `modelName`\nin the `DefineOptions` for `@Table` annotation. sequelize-typescript\nuses the class name as default name for `tableName` and `modelName`.\nWhen the code is minified the class name will no longer be the originally\ndefined one (So that `class User` will become `class b` for example).\n\n## Contributing\n\nTo contribute you can:\n\n- Open issues and participate in discussion of other issues.\n- Fork the project to open up PR's.\n- Update the [types of Sequelize](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize).\n- Anything else constructively helpful.\n\nIn order to open a pull request please:\n\n- Create a new branch.\n- Run tests locally (`npm install && npm run build && npm run cover`) and ensure your commits don't break the tests.\n- Document your work well with commit messages, a good PR description, comments in code when necessary, etc.\n\nIn order to update the types for sequelize please go to [the Definitely Typed repo](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/sequelize), it would also be a good\nidea to open a PR into [sequelize](https://github.com/sequelize/sequelize) so that Sequelize can maintain its own types, but that\nmight be harder than getting updated types into microsoft's repo. The Typescript team is slowly trying to encourage\nnpm package maintainers to maintain their own typings, but Microsoft still has dedicated and good people maintaining the DT repo,\naccepting PR's and keeping quality high.\n\n**Keep in mind `sequelize-typescript` does not provide typings for `sequelize`** - these are seperate things.\nA lot of the types in `sequelize-typescript` augment, refer to, or extend what sequelize already has.\n","maintainers":[{"name":"sdepold","email":"sascha@depold.com"},{"name":"ephys","email":"zoe@ephys.dev"},{"name":"robinbuschmann","email":"robinbuschmann@hotmail.de"}],"time":{"modified":"2023-11-24T19:47:45.942Z","created":"2017-03-15T17:55:51.043Z","0.1.0":"2017-03-15T17:55:51.043Z","0.1.1":"2017-03-15T18:01:26.182Z","0.1.2":"2017-03-15T20:00:38.407Z","0.1.3":"2017-03-15T20:04:44.070Z","0.1.4":"2017-03-20T15:27:20.103Z","0.2.0":"2017-03-26T18:54:31.288Z","0.2.1":"2017-03-30T08:37:15.457Z","0.2.2-rc.0":"2017-04-05T06:33:07.764Z","0.2.2":"2017-04-05T06:34:25.821Z","0.2.3":"2017-04-05T07:27:02.902Z","0.2.4":"2017-04-05T08:28:26.589Z","0.3.0":"2017-05-10T09:57:52.496Z","0.3.1":"2017-05-19T10:25:06.876Z","0.3.2":"2017-06-03T13:44:58.017Z","0.3.3":"2017-06-12T16:28:20.766Z","0.3.4":"2017-06-14T18:40:27.588Z","0.3.5":"2017-06-14T18:53:47.159Z","0.4.0-beta":"2017-07-16T18:04:47.484Z","0.4.0-beta.1":"2017-08-05T13:09:00.182Z","0.4.0":"2017-08-05T13:34:23.619Z","0.5.0-beta.0":"2017-08-26T14:57:09.319Z","0.5.0-beta.1":"2017-08-30T15:28:36.843Z","0.5.0-beta.2":"2017-08-31T20:38:15.231Z","0.5.0-beta.3":"2017-09-06T18:28:59.574Z","0.5.0":"2017-09-14T17:40:33.746Z","0.6.0-beta.0":"2017-09-22T18:12:42.139Z","0.6.0-beta.1":"2017-10-12T06:24:52.714Z","0.6.0-beta.2":"2017-10-14T12:27:43.849Z","0.6.0-beta.3":"2017-11-04T21:20:07.609Z","0.6.0-beta.4":"2017-11-07T19:55:04.943Z","0.6.0-beta.5":"2017-11-11T11:21:17.373Z","0.6.0":"2017-11-27T20:35:06.189Z","0.6.1":"2017-11-29T16:23:40.248Z","0.6.2":"2017-12-19T20:49:37.177Z","0.6.3-beta.0":"2018-01-19T21:08:56.752Z","0.6.3-beta.1":"2018-02-12T21:07:34.117Z","0.6.3-beta.2":"2018-03-06T18:51:24.716Z","0.6.3":"2018-03-06T19:06:40.511Z","1.0.0-alpha.0":"2018-03-30T18:31:58.810Z","1.0.0-alpha.1":"2018-03-31T12:30:19.733Z","1.0.0-alpha.2":"2018-04-08T18:11:40.140Z","0.6.4-beta.0":"2018-04-12T19:09:08.224Z","0.6.4-beta.1":"2018-04-23T18:35:03.456Z","0.6.4":"2018-04-23T18:41:44.834Z","0.6.5-beta.0":"2018-04-24T17:30:33.534Z","1.0.0-alpha.3":"2018-05-05T18:55:25.937Z","0.6.5-beta.1":"2018-05-15T17:37:21.971Z","0.6.5-beta.2":"2018-05-16T18:48:16.055Z","0.6.5":"2018-05-24T18:14:51.196Z","0.6.6-beta.0":"2018-05-30T18:03:43.052Z","0.6.6-beta.1":"2018-06-06T14:22:18.589Z","0.6.6-beta.2":"2018-08-07T15:36:09.240Z","0.6.6-beta.3":"2018-08-07T16:49:49.294Z","0.6.6":"2018-08-07T17:06:21.349Z","0.6.7-beta.0":"2018-09-13T18:50:02.019Z","1.0.0-alpha.4":"2018-09-17T15:26:19.809Z","1.0.0-alpha.5":"2018-11-14T15:09:04.409Z","0.6.7-beta.1":"2018-11-15T13:18:50.600Z","1.0.0-alpha.6":"2018-12-31T11:26:39.050Z","1.0.0-alpha.7":"2018-12-31T13:44:52.265Z","0.6.7":"2019-01-15T17:08:23.268Z","0.6.8-beta.0":"2019-01-30T11:07:01.170Z","1.0.0-alpha.8":"2019-02-20T17:30:05.632Z","1.0.0-alpha.9":"2019-03-17T12:16:22.359Z","0.6.8":"2019-03-17T14:05:10.990Z","0.6.9":"2019-03-31T13:34:06.276Z","0.6.10":"2019-04-14T17:56:35.216Z","1.0.0-beta.0":"2019-04-14T17:58:15.925Z","1.0.0-beta.1":"2019-04-14T18:16:16.569Z","1.0.0-beta.2":"2019-04-22T14:34:17.956Z","0.6.11-beta.0":"2019-04-22T14:55:26.481Z","0.6.11-beta.1":"2019-05-01T10:15:41.151Z","1.0.0-beta.3":"2019-05-01T11:32:33.027Z","0.6.11":"2019-05-18T16:39:58.759Z","0.6.12-beta.0":"2019-06-02T08:41:55.735Z","0.6.12-beta.1":"2019-06-02T10:07:18.555Z","0.6.12-beta.2":"2019-06-02T12:18:41.878Z","0.6.12-beta.3":"2019-06-07T21:10:47.936Z","1.0.0-beta.4":"2019-08-11T17:28:29.903Z","1.0.0":"2019-08-21T19:35:17.187Z","1.1.0-beta.0":"2019-09-29T12:59:24.276Z","1.1.0-beta.1":"2019-11-05T20:19:06.543Z","1.1.0-beta.2":"2019-12-08T14:58:36.417Z","1.1.0":"2019-12-08T15:03:00.621Z","2.0.0-beta.0":"2020-07-13T20:38:51.065Z","2.0.0-beta.1":"2020-12-07T16:57:04.194Z","2.0.0":"2021-01-17T15:31:47.443Z","2.1.0":"2021-02-15T12:47:19.231Z","2.1.1":"2021-10-10T18:38:58.820Z","2.1.2":"2022-01-04T05:51:36.122Z","2.1.3":"2022-02-16T13:21:20.946Z","2.1.4":"2022-10-15T18:50:54.568Z","2.1.5":"2022-10-17T09:13:29.374Z","2.1.6":"2023-11-24T19:47:45.774Z"},"readmeFilename":"README.md","homepage":"https://github.com/RobinBuschmann/sequelize-typescript#readme","repository":{"type":"git","url":"git+https://github.com/RobinBuschmann/sequelize-typescript.git"},"author":{"name":"Robin Buschmann"},"bugs":{"url":"https://github.com/RobinBuschmann/sequelize-typescript/issues"},"license":"MIT","users":{"jstlns":true,"mattstrom":true,"morogasper":true},"keywords":["orm","object relational mapper","sequelize","typescript","decorators","mysql","sqlite","postgresql","postgres","mssql"]}